* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.huxhorn.lilith.data.access.AccessEvent
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/43_lilith/evosuite-files/evosuite.properties
* Connecting to master process on port 20207
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:17:00.870 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:17:00.875 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:17:00.877 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 04:17:00.902 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 04:17:00.904 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 04:17:00.905 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 04:17:00.906 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 04:17:00.909 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 04:17:00.910 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 04:17:00.912 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 04:17:00.918 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 04:17:00.922 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 04:17:00.966 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:17:00.973 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:17:00.974 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class de.huxhorn.lilith.data.access.AccessEvent
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 447
* Using seed 1710217019005
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 179 / 447
[Progress:>                             0%] [Cov:======================>            63%][Progress:>                             1%] [Cov:======================>            65%][Progress:>                             1%] [Cov:=========================>         73%][Progress:>                             2%] [Cov:===========================>       79%][Progress:>                             2%] [Cov:============================>      80%][Progress:>                             2%] [Cov:============================>      81%][Progress:>                             2%] [Cov:=============================>     83%][Progress:>                             3%] [Cov:=============================>     85%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:================================>  92%][Progress:=>                            4%] [Cov:================================>  92%][Progress:=>                            4%] [Cov:================================>  92%][Progress:=>                            5%] [Cov:================================>  92%][Progress:=>                            5%] [Cov:================================>  92%][Progress:=>                            5%] [Cov:================================>  92%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 95%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          11%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          12%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%]
* Search finished after 101s and 1842 generations, 374000 statements, best individual has fitness: 5.0
* Generated before the refinement 96 tests with total length 350
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRemoteUser()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteUser = accessEvent.getRemoteUser()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("John Doe", "john.doe@example.com", 1234567890);
        accessEvent.getRemoteUser();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("John Doe", "john.doe@example.com", 1234567890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getRemoteUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteUser() target is: accessEvent method is: getRemoteUser()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = accessEvent.toString()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("John Doe", 25, "johndoe@example.com");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("John Doe", 25, "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("7bfiJy")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("7bfiJy");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestParameters()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String[]>
statement code is: Map<String, String[]> requestParameters = accessEvent.getRequestParameters()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(10, "GET", "/users/123", 200, "OK");
        String requestParameters = accessEvent.getRequestParameters();
        // Improved test data
        int userId = 10;
        String method = "GET";
        String path = "/users/123";
        int statusCode = 200;
        String statusMessage = "OK";
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(10, "GET", "/users/123", 200, "OK"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String requestParameters = accessEvent.getRequestParameters(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestParameters() target is: accessEvent method is: getRequestParameters()
statement is: // Improved test data
int userId = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String method = "GET", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String path = "/users/123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int statusCode = 200, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String statusMessage = "OK", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "GET"
* this is vulnerable: String string = "/users/123"
* this is vulnerable: int _int = 200
* this is vulnerable: String string = "OK"
TestCase is: int _int = 10;
String string = "GET";
String string = "/users/123";
int _int = 200;
String string = "OK";

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getLocalPort()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int localPort = accessEvent.getLocalPort()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getLocalPort();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(12345, "user", 60, "localhost", 80);
        accessEvent.getLocalPort();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(12345, "user", 60, "localhost", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getLocalPort(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getLocalPort() target is: accessEvent method is: getLocalPort()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: getResponseHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> responseHeaders = accessEvent.getResponseHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("Content-Type", "application/json");
        accessEvent.setResponseHeaders(hashMap);
        assertEquals(0, accessEvent.getResponseHeaders().size());
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("Content-Type", "application/json"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("Content-Type", "application/json") target is: hashMap method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: assertEquals(0, accessEvent.getResponseHeaders().size()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(0, accessEvent.getResponseHeaders().size()) target is:  method is: assertEquals(int,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getServerName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String serverName = accessEvent.getServerName()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getServerName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("production-server", "main-database");
        accessEvent.getServerName();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("production-server", "main-database"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getServerName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getServerName() target is: accessEvent method is: getServerName()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getProtocol()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String protocol = accessEvent.getProtocol()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getProtocol();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        // Primitive values:
        int integerValue = 12345;
        double doubleValue = 3.14159;
        String stringValue = "Hello, world!";
        char charValue = 'A';
        // String examples:
        String[] stringExamples = new String[]{ "apple", "banana", "orange" };
        // AccessEvent object
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setProtocol("HTTP");
        accessEvent.setUri("/index.html");
        accessEvent.setHttpMethod(GET);
    }
}
statement is: // Improved test data
// Primitive values:
int integerValue = 12345, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14159, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // String examples:
String[] stringExamples = new String[]{ "apple", "banana", "orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // AccessEvent object
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setProtocol("HTTP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setProtocol("HTTP") target is: accessEvent method is: setProtocol(java.lang.String)
statement is: accessEvent.setUri("/index.html"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setUri("/index.html") target is: accessEvent method is: setUri(java.lang.String)
statement is: accessEvent.setHttpMethod(GET), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setHttpMethod(GET) target is: accessEvent method is: setHttpMethod()
* this is vulnerable: int _int = 12345
* this is vulnerable: double _double = 3.14159
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 12345;
double _double = 3.14159;
String string = "Hello, world!";
char _char = 'A';
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("12345", "67890");
        Map<String, String> map = ZoneId.SHORT_IDS;
        map.put("key1", "value1");
        map.put("key2", "value2");
        accessEvent.setRequestHeaders(map);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("12345", "67890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Map<String, String> map = ZoneId.SHORT_IDS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ZoneId.SHORT_IDS is ZoneId
CtField is: public static final java.util.Map java.time.ZoneId.SHORT_IDS Map SHORT_IDS
statement is: map.put("key1", "value1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: map.put("key1", "value1") target is: map method is: put(java.lang.String,java.lang.String)
statement is: map.put("key2", "value2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: map.put("key2", "value2") target is: map method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setRequestHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(map) target is: accessEvent method is: setRequestHeaders(Map)
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        LoggerContext loggerContext = new LoggerContext();
        accessEvent.setLoggerContext(loggerContext);
        accessEvent.setLoggerName("com.example.MyLogger");
        accessEvent.setLevel(WARN);// Changed to a more descriptive level

        accessEvent.setMarker(new Marker("MY_MARKER"));
        accessEvent.setMessage("This is a test message with an updated level");
        accessEvent.setThreadName("main");
        accessEvent.setTimeStamp(Instant.now());
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LoggerContext loggerContext = new LoggerContext(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLoggerContext(loggerContext), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLoggerContext(loggerContext) target is: accessEvent method is: setLoggerContext(LoggerContext)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V
statement is: accessEvent.setLoggerName("com.example.MyLogger"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLoggerName("com.example.MyLogger") target is: accessEvent method is: setLoggerName(java.lang.String)
statement is: accessEvent.setLevel(WARN)// Changed to a more descriptive level
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLevel(WARN)// Changed to a more descriptive level
 target is: accessEvent method is: setLevel()
statement is: accessEvent.setMarker(new Marker("MY_MARKER")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMarker(new Marker("MY_MARKER")) target is: accessEvent method is: setMarker(Marker)
statement is: accessEvent.setMessage("This is a test message with an updated level"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMessage("This is a test message with an updated level") target is: accessEvent method is: setMessage(java.lang.String)
statement is: accessEvent.setThreadName("main"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setThreadName("main") target is: accessEvent method is: setThreadName(java.lang.String)
statement is: accessEvent.setTimeStamp(Instant.now()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(Instant.now()) target is: accessEvent method is: setTimeStamp()
TestCase is: AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> requestHeaders = accessEvent.getRequestHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("1234567890-abcdef", "example.org", "/path/to/another/resource", "POST", 404);
        accessEvent.getRequestHeaders();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("1234567890-abcdef", "example.org", "/path/to/another/resource", "POST", 404), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getRequestHeaders(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestHeaders() target is: accessEvent method is: getRequestHeaders()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestURL()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURL = accessEvent.getRequestURL()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURL();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("https://example.com", "GET", "application/json", "2019-07-24T13:22:14Z");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("https://example.com", "GET", "application/json", "2019-07-24T13:22:14Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRemoteHost()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteHost = accessEvent.getRemoteHost()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteHost();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("user-agent-test-server", 443, "/user-agent/index.html");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("user-agent-test-server", 443, "/user-agent/index.html"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("PJ")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("PJ");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent("HTTP", "POST", "/login", 403, "Forbidden");
        accessEvent.equals(accessEvent1);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent("HTTP", "POST", "/login", 403, "Forbidden"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent1) target is: accessEvent method is: equals(AccessEvent)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getStatusCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int statusCode = accessEvent.getStatusCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getStatusCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(1, "John Doe", "2023-04-25 14:30:00");
        accessEvent.getStatusCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(1, "John Doe", "2023-04-25 14:30:00"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getStatusCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getStatusCode() target is: accessEvent method is: getStatusCode()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getResponseHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> responseHeaders = accessEvent.getResponseHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getResponseHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.getResponseHeaders();
        // Improved test data
        accessEvent = new AccessEvent(200, "OK", "text/html", "example.com");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getResponseHeaders(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getResponseHeaders() target is: accessEvent method is: getResponseHeaders()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getResponseHeaders()Ljava/util/Map;
statement is: // Improved test data
accessEvent = new AccessEvent(200, "OK", "text/html", "example.com"), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getResponseHeaders();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("7bfiJy")
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("7bfiJy")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("7bfiJy")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("7bfiJy");
accessEvent.setRemoteHost("7bfiJy");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("7bfiJy");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURI("https://www.example.com/test");
        accessEvent.setRemoteHost("192.168.0.1");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURI("https://www.example.com/test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("https://www.example.com/test") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 5
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 5
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/test";
accessEvent.setRequestURI(string);
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getLoggerContext()Lde/huxhorn/lilith/data/access/LoggerContext; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = accessEvent.getLoggerContext()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getLoggerContext();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setLoggerContext("com.example.mylogger");
        accessEvent.setLogLevel(INFO);
        accessEvent.setMessage("Hello, world!");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLoggerContext("com.example.mylogger"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLoggerContext("com.example.mylogger") target is: accessEvent method is: setLoggerContext(java.lang.String)
statement is: accessEvent.setLogLevel(INFO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLogLevel(INFO) target is: accessEvent method is: setLogLevel()
statement is: accessEvent.setMessage("Hello, world!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMessage("Hello, world!") target is: accessEvent method is: setMessage(java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("PJ")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("PJ");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John Doe");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John Doe";
accessEvent.setRemoteUser(string);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setServerName("local-server");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setServerName("remote-server");
        accessEvent2.equals(accessEvent1);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setServerName("local-server"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setServerName("local-server") target is: accessEvent1 method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setServerName("remote-server"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setServerName("remote-server") target is: accessEvent2 method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent2.equals(accessEvent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.equals(accessEvent1) target is: accessEvent2 method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "local-server";
accessEvent.setServerName(string);
AccessEvent accessEvent = new AccessEvent();
String string = "remote-server";
accessEvent.setServerName(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRemoteAddress()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteAddress = accessEvent.getRemoteAddress()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteAddress();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.100");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.100") target is: accessEvent method is: setRemoteAddress(java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getTimeStamp()Ljava/lang/Long; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Long
statement code is: Long timeStamp = accessEvent.getTimeStamp()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(LocalDateTime.of(2021, 10, 15, 8, 30), "John Doe", "Male");
        accessEvent.getTimeStamp();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(LocalDateTime.of(2021, 10, 15, 8, 30), "John Doe", "Male"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getTimeStamp(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getTimeStamp() target is: accessEvent method is: getTimeStamp()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getMethod()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String method = accessEvent.getMethod()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getMethod();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(1234567890, "John Doe", 1);
        accessEvent.getMethod();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(1234567890, "John Doe", 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getMethod(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getMethod() target is: accessEvent method is: getMethod()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestURI()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURI = accessEvent.getRequestURI()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURI();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(123456789, "http://www.example.com", "GET", 200, "OK");
        accessEvent.getRequestURI();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(123456789, "http://www.example.com", "GET", 200, "OK"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getRequestURI(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestURI() target is: accessEvent method is: getRequestURI()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("John Doe", "john.doe@example.com");
        accessEvent.equals(new AccessEvent("Jane Doe", "jane.doe@example.com"));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("John Doe", "john.doe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(new AccessEvent("Jane Doe", "jane.doe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(new AccessEvent("Jane Doe", "jane.doe@example.com")) target is: accessEvent method is: equals(AccessEvent)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals((Object) null)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(new Date(), "Employee 1", 200, true);
        accessEvent.equals(((Object) (null)));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(new Date(), "Employee 1", 200, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(((Object) (null))) target is: accessEvent method is: equals(java.lang.Object)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Object object = new Object();
accessEvent.equals(object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("user1", "resource1");
        Object object = new Object();
        assertFalse(accessEvent.equals(object));
        String resourceName = "resource2";
        String userId = "user3";
        accessEvent = new AccessEvent(userId, resourceName);
        assertEquals("user1", accessEvent.getUserId());
        assertEquals("resource2", accessEvent.getResourceName());
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("user1", "resource1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(accessEvent.equals(object)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent.equals(object)) target is:  method is: assertFalse(<unknown>)
statement is: String resourceName = "resource2", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String userId = "user3", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: accessEvent = new AccessEvent(userId, resourceName), class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertEquals("user1", accessEvent.getUserId()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("user1", accessEvent.getUserId()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("resource2", accessEvent.getResourceName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("resource2", accessEvent.getResourceName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "resource2"
* this is vulnerable: String string = "user3"
TestCase is: Object object = new Object();
String string = "resource2";
String string = "user3";

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setLocalPort(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLocalPort((-1))
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1));
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setLocalPort(-25568);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLocalPort(-25568), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLocalPort(-25568) target is: accessEvent method is: setLocalPort(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setLocalPort(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = null;
accessEvent.setLocalPort(_int);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setStatusCode(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setStatusCode(986)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(986);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setStatusCode(200);// Successful access

        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setStatusCode(403);// Forbidden access

        assertEquals(accessEvent1, accessEvent1);// The two instances are equal

        assertNotEquals(accessEvent1, accessEvent2);// The two instances are not equal }}

    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setStatusCode(200)// Successful access
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setStatusCode(200)// Successful access
 target is: accessEvent1 method is: setStatusCode(int)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setStatusCode(403)// Forbidden access
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setStatusCode(403)// Forbidden access
 target is: accessEvent2 method is: setStatusCode(int)
statement is: assertEquals(accessEvent1, accessEvent1)// The two instances are equal
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent1, accessEvent1)// The two instances are equal
 target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertNotEquals(accessEvent1, accessEvent2)// The two instances are not equal }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(accessEvent1, accessEvent2)// The two instances are not equal }}
 target is:  method is: assertNotEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("User1", "2023-02-28 14:56:01", "INFO");
        assertEquals(accessEvent, accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("User1", "2023-02-28 14:56:01", "INFO"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(accessEvent, accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent, accessEvent) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("USER", "2018-01-01 12:34:56", "INFO", "This is an INFO message");
        LoggerContext loggerContext = new LoggerContext();
        accessEvent.setLoggerContext(loggerContext);
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("USER", "2018-01-01 12:34:56", "INFO", "This is an INFO message"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LoggerContext loggerContext = new LoggerContext(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLoggerContext(loggerContext), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLoggerContext(loggerContext) target is: accessEvent method is: setLoggerContext(LoggerContext)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: LoggerContext loggerContext = new LoggerContext();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setLoggerName("com.example.TestLogger");
        accessEvent1.setThreadId(9876543210L);
        accessEvent1.setMessage("The quick brown fox jumps over the lazy dog.");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setLoggerName("com.example.TestLogger");
        accessEvent2.setThreadId(9876543210L);
        accessEvent2.setMessage("The quick brown fox jumps over the lazy cat.");
        assertThat(accessEvent1, not(equalTo(accessEvent2)));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setLoggerName("com.example.TestLogger"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setLoggerName("com.example.TestLogger") target is: accessEvent1 method is: setLoggerName(java.lang.String)
statement is: accessEvent1.setThreadId(9876543210L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setThreadId(9876543210L) target is: accessEvent1 method is: setThreadId(long)
statement is: accessEvent1.setMessage("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setMessage("The quick brown fox jumps over the lazy dog.") target is: accessEvent1 method is: setMessage(java.lang.String)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setLoggerName("com.example.TestLogger"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setLoggerName("com.example.TestLogger") target is: accessEvent2 method is: setLoggerName(java.lang.String)
statement is: accessEvent2.setThreadId(9876543210L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setThreadId(9876543210L) target is: accessEvent2 method is: setThreadId(long)
statement is: accessEvent2.setMessage("The quick brown fox jumps over the lazy cat."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setMessage("The quick brown fox jumps over the lazy cat.") target is: accessEvent2 method is: setMessage(java.lang.String)
statement is: assertThat(accessEvent1, not(equalTo(accessEvent2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertThat(accessEvent1, not(equalTo(accessEvent2))) target is:  method is: assertThat(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("\">iptC0;786k")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("\">iptC0;786k");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("GET /index.html HTTP/1.1\r\nHost: www.example.com");
        assertTrue(accessEvent.equals(accessEvent));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("GET /index.html HTTP/1.1\r\nHost: www.example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("GET /index.html HTTP/1.1\r\nHost: www.example.com") target is: accessEvent method is: setMethod(java.lang.String)
statement is: assertTrue(accessEvent.equals(accessEvent)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent.equals(accessEvent)) target is:  method is: assertTrue(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("\">iptC0;786k")
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("\">iptC0;786k")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("\">iptC0;786k");
accessEvent.setMethod("\">iptC0;786k");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setMethod("GET");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setMethod("POST");
        assertEquals(accessEvent1, accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setMethod("GET"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setMethod("GET") target is: accessEvent1 method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setMethod("POST"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setMethod("POST") target is: accessEvent2 method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: assertEquals(accessEvent1, accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent1, accessEvent2) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "GET";
accessEvent.setMethod(string);
AccessEvent accessEvent = new AccessEvent();
String string = "POST";
accessEvent.setMethod(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("]B@9mOw,/rP")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("]B@9mOw,/rP");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("GET");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("GET"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("GET") target is: accessEvent method is: setMethod(java.lang.String)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("PJ")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("PJ")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("PJ");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("PJ");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setProtocol("HTTP");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setProtocol("HTTPS");
        assertFalse(accessEvent1.equals(accessEvent2));
        accessEvent1.setProtocol("FTP");
        accessEvent2.setProtocol("FTP");
        assertTrue(accessEvent1.equals(accessEvent2));
        String protocol1 = "PJ";
        String protocol2 = "HTTPS";
        assertFalse(protocol1.equals(protocol2));
        protocol1 = "FTP";
        protocol2 = "FTP";
        assertTrue(protocol1.equals(protocol2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setProtocol("HTTP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setProtocol("HTTP") target is: accessEvent1 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setProtocol("HTTPS"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setProtocol("HTTPS") target is: accessEvent2 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: assertFalse(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent1.equals(accessEvent2)) target is:  method is: assertFalse(<unknown>)
statement is: accessEvent1.setProtocol("FTP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setProtocol("FTP") target is: accessEvent1 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: accessEvent2.setProtocol("FTP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setProtocol("FTP") target is: accessEvent2 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: assertTrue(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent1.equals(accessEvent2)) target is:  method is: assertTrue(<unknown>)
statement is: String protocol1 = "PJ", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String protocol2 = "HTTPS", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertFalse(protocol1.equals(protocol2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(protocol1.equals(protocol2)) target is:  method is: assertFalse(boolean)
statement is: protocol1 = "FTP", class spoon.support.reflect.code.CtAssignmentImpl
statement is: protocol2 = "FTP", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(protocol1.equals(protocol2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(protocol1.equals(protocol2)) target is:  method is: assertTrue(boolean)
* this is vulnerable: String string = "PJ"
* this is vulnerable: String string = "HTTPS"
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "HTTP";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "HTTPS";
accessEvent.setProtocol(string);
String string = "FTP";
accessEvent.setProtocol(string);
String string = "FTP";
accessEvent.setProtocol(string);
String string = "PJ";
String string = "HTTPS";

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("PJ")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("PJ");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setProtocol("TCP");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setProtocol("TCP");
        boolean equal1 = accessEvent1.equals(accessEvent2);
        AccessEvent accessEvent3 = new AccessEvent();
        accessEvent3.setProtocol("UDP");
        AccessEvent accessEvent4 = new AccessEvent();
        accessEvent4.setProtocol("UDP");
        boolean equal2 = accessEvent3.equals(accessEvent4);
        AccessEvent accessEvent5 = new AccessEvent();
        accessEvent5.setProtocol("ICMP");
        AccessEvent accessEvent6 = new AccessEvent();
        accessEvent6.setProtocol("ICMP");
        boolean equal3 = accessEvent5.equals(accessEvent6);
    }
}
statement is: // Improved test data
AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setProtocol("TCP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setProtocol("TCP") target is: accessEvent1 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setProtocol("TCP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setProtocol("TCP") target is: accessEvent2 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: boolean equal1 = accessEvent1.equals(accessEvent2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.equals(accessEvent2) target is: accessEvent1 method is: equals(AccessEvent)
statement is: AccessEvent accessEvent3 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent3.setProtocol("UDP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent3.setProtocol("UDP") target is: accessEvent3 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 6
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: AccessEvent accessEvent4 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent4.setProtocol("UDP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent4.setProtocol("UDP") target is: accessEvent4 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 9
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: boolean equal2 = accessEvent3.equals(accessEvent4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent3.equals(accessEvent4) target is: accessEvent3 method is: equals(AccessEvent)
statement is: AccessEvent accessEvent5 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent5.setProtocol("ICMP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent5.setProtocol("ICMP") target is: accessEvent5 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 12
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: AccessEvent accessEvent6 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent6.setProtocol("ICMP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent6.setProtocol("ICMP") target is: accessEvent6 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 15
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: boolean equal3 = accessEvent5.equals(accessEvent6), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent5.equals(accessEvent6) target is: accessEvent5 method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "TCP";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "TCP";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "UDP";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "UDP";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "ICMP";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "ICMP";
accessEvent.setProtocol(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("8rz/")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("8rz/");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.1");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.1") target is: accessEvent method is: setRemoteAddress(java.lang.String)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRemoteAddress("192.168.0.1");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRemoteAddress("192.168.0.2");
        Assert.assertFalse(accessEvent1.equals(accessEvent2));
        AccessEvent accessEvent3 = new AccessEvent();
        accessEvent3.setRemoteAddress("192.168.0.1");
        AccessEvent accessEvent4 = new AccessEvent();
        accessEvent4.setRemoteAddress("192.168.0.1");
        Assert.assertTrue(accessEvent3.equals(accessEvent4));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRemoteAddress("192.168.0.1") target is: accessEvent1 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRemoteAddress("192.168.0.2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRemoteAddress("192.168.0.2") target is: accessEvent2 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: Assert.assertFalse(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertFalse(accessEvent1.equals(accessEvent2)) target is: Assert method is: assertFalse()
statement is: AccessEvent accessEvent3 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent3.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent3.setRemoteAddress("192.168.0.1") target is: accessEvent3 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 6
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: AccessEvent accessEvent4 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent4.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent4.setRemoteAddress("192.168.0.1") target is: accessEvent4 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 9
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: Assert.assertTrue(accessEvent3.equals(accessEvent4)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertTrue(accessEvent3.equals(accessEvent4)) target is: Assert method is: assertTrue()
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.2";
accessEvent.setRemoteAddress(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("keq)MNOY/|9=__u")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("keq)MNOY/|9=__u");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.1");
        assertTrue(accessEvent.equals(accessEvent));
    }
}
statement is: // Improved test data
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.1") target is: accessEvent method is: setRemoteAddress(java.lang.String)
statement is: assertTrue(accessEvent.equals(accessEvent)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent.equals(accessEvent)) target is:  method is: assertTrue(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost(", pHopertis=")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost(", pHopertis=");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRemoteHost("192.168.0.1");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.equals(accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRemoteHost("192.168.0.1") target is: accessEvent1 method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.equals(accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.equals(accessEvent2) target is: accessEvent2 method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("PJ")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("PJ")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("PJ");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("PJ");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("Jane");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("Jane"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("Jane") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John";
accessEvent.setRemoteUser(string);
AccessEvent accessEvent = new AccessEvent();
String string = "Jane";
accessEvent.setRemoteUser(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("^J")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("^J");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRemoteUser("^J");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRemoteUser("^K");
        assertFalse(accessEvent1.equals(accessEvent2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRemoteUser("^J"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRemoteUser("^J") target is: accessEvent1 method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRemoteUser("^K"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRemoteUser("^K") target is: accessEvent2 method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: assertFalse(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent1.equals(accessEvent2)) target is:  method is: assertFalse(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "^J";
accessEvent.setRemoteUser(string);
AccessEvent accessEvent = new AccessEvent();
String string = "^K";
accessEvent.setRemoteUser(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        Map<String, String> map = ZoneId.SHORT_IDS;
        map.put("X-Forwarded-For", "192.168.0.1");
        map.put("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36");
        accessEvent.setRequestHeaders(map);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestHeaders(map);
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Map<String, String> map = ZoneId.SHORT_IDS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ZoneId.SHORT_IDS is ZoneId
CtField is: public static final java.util.Map java.time.ZoneId.SHORT_IDS Map SHORT_IDS
statement is: map.put("X-Forwarded-For", "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: map.put("X-Forwarded-For", "192.168.0.1") target is: map method is: put(java.lang.String,java.lang.String)
statement is: map.put("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: map.put("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36") target is: map method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setRequestHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(map) target is: accessEvent method is: setRequestHeaders(Map)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestHeaders(Ljava/util/Map;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(map) target is: accessEvent method is: setRequestHeaders(Map)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRequestHeaders(Ljava/util/Map;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = null;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = null;
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("7bfiJy")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("7bfiJy")
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("7bfiJy");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("7bfiJy");
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");// improved

        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");// improved

        Map<String, String> map = ZoneId.SHORT_IDS;
        accessEvent.setRequestHeaders(map);
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1")// improved
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1")// improved
 target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1")// improved
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1")// improved
 target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: Map<String, String> map = ZoneId.SHORT_IDS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ZoneId.SHORT_IDS is ZoneId
CtField is: public static final java.util.Map java.time.ZoneId.SHORT_IDS Map SHORT_IDS
statement is: accessEvent.setRequestHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(map) target is: accessEvent method is: setRequestHeaders(Map)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("loggerContext=")
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("loggerContext=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("loggerContext=");
accessEvent.setRequestURI("loggerContext=");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURI("loggerContext=test");
        accessEvent.setRequestURI("loggerContext=test");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURI("loggerContext=test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("loggerContext=test") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.setRequestURI("loggerContext=test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("loggerContext=test") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "loggerContext=test";
accessEvent.setRequestURI(string);
String string = "loggerContext=test";
accessEvent.setRequestURI(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRequestURI("https://www.example.com/login");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.equals(accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRequestURI("https://www.example.com/login"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRequestURI("https://www.example.com/login") target is: accessEvent1 method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.equals(accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.equals(accessEvent2) target is: accessEvent2 method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/login";
accessEvent.setRequestURI(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("U'n7P5D`s@9/")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("U'n7P5D`s@9/");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/path/to/page?query=value#anchor");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/page?query=value#anchor"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/page?query=value#anchor") target is: accessEvent method is: setRequestURL(java.lang.String)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("U'n7P5D`s@9/")
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("U'n7P5D`s@9/")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("U'n7P5D`s@9/");
accessEvent.setRequestURL("U'n7P5D`s@9/");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/path/to/file?query=string");
        accessEvent.setRequestURL("https://www.example.com/path/to/file?query=string");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/file?query=string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/file?query=string") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/file?query=string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/file?query=string") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/file?query=string";
accessEvent.setRequestURL(string);
String string = "https://www.example.com/path/to/file?query=string";
accessEvent.setRequestURL(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("U'n7P5D`s/")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("U'n7P5D`s/");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("https://www.example.com/", "GET", 200);
        AccessEvent accessEvent2 = new AccessEvent("https://www.example.com/", "POST", 403);
        Assert.assertTrue(accessEvent.equals(accessEvent));// Test case 1: Check if the event is equal to itself

        Assert.assertFalse(accessEvent.equals(null));// Test case 2: Check if the event is not equal to null

        Assert.assertFalse(accessEvent.equals(accessEvent2));// Test case 3: Check if the event is not equal to a different event with the same properties but in a different order }}

    }
}
statement is: AccessEvent accessEvent = new AccessEvent("https://www.example.com/", "GET", 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent2 = new AccessEvent("https://www.example.com/", "POST", 403), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Assert.assertTrue(accessEvent.equals(accessEvent))// Test case 1: Check if the event is equal to itself
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertTrue(accessEvent.equals(accessEvent))// Test case 1: Check if the event is equal to itself
 target is: Assert method is: assertTrue()
statement is: Assert.assertFalse(accessEvent.equals(null))// Test case 2: Check if the event is not equal to null
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertFalse(accessEvent.equals(null))// Test case 2: Check if the event is not equal to null
 target is: Assert method is: assertFalse()
statement is: Assert.assertFalse(accessEvent.equals(accessEvent2))// Test case 3: Check if the event is not equal to a different event with the same properties but in a different order }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertFalse(accessEvent.equals(accessEvent2))// Test case 3: Check if the event is not equal to a different event with the same properties but in a different order }}
 target is: Assert method is: assertFalse()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setResponseHeaders(new HashMap<String, String>());
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setResponseHeaders(new HashMap<String, String>());
        assertEquals(accessEvent1, accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setResponseHeaders(new HashMap<String, String>()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setResponseHeaders(new HashMap<String, String>()) target is: accessEvent1 method is: setResponseHeaders(HashMap)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setResponseHeaders(new HashMap<String, String>()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setResponseHeaders(new HashMap<String, String>()) target is: accessEvent2 method is: setResponseHeaders(HashMap)
statement is: assertEquals(accessEvent1, accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent1, accessEvent2) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("header1", "value1");
        accessEvent.setResponseHeaders(hashMap);
        accessEvent.setResponseHeaders(hashMap);
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("header1", "value1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("header1", "value1") target is: hashMap method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 1
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 1
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 1
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("Content-Type", "application/json");
        accessEvent.setResponseHeaders(hashMap);
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("Content-Type", "application/json"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("Content-Type", "application/json") target is: hashMap method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 1
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent1.setServerName("Server A");
        accessEvent2.setServerName("Server B");
        assertTrue(accessEvent1.equals(accessEvent2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setServerName("Server A"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setServerName("Server A") target is: accessEvent1 method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 1
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent2.setServerName("Server B"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setServerName("Server B") target is: accessEvent2 method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 1
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: assertTrue(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent1.equals(accessEvent2)) target is:  method is: assertTrue(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
String string = "Server A";
accessEvent.setServerName(string);
String string = "Server B";
accessEvent.setServerName(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("'")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("'");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setServerName("server1");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.equals(accessEvent1);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setServerName("server1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setServerName("server1") target is: accessEvent1 method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.equals(accessEvent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.equals(accessEvent1) target is: accessEvent2 method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "server1";
accessEvent.setServerName(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(12L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(12L);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setTimeStamp(new Long(System.currentTimeMillis()));
        assertTrue(accessEvent.equals(accessEvent), "Access events are equal");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setTimeStamp(new Long(System.currentTimeMillis())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(new Long(System.currentTimeMillis())) target is: accessEvent method is: setTimeStamp(java.lang.Long)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
statement is: assertTrue(accessEvent.equals(accessEvent), "Access events are equal"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent.equals(accessEvent), "Access events are equal") target is:  method is: assertTrue(<unknown>,java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long(12L);
accessEvent.setTimeStamp(long);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(12L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(12L);
accessEvent.setTimeStamp(long);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        Long = new Long(10L);
        accessEvent.setTimeStamp(long.class);
        accessEvent.setTimeStamp(long.class);
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long = new Long(10L), class spoon.support.reflect.code.CtAssignmentImpl
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
Long long = null;
accessEvent.setTimeStamp(long);
Long long = null;
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(0L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setTimeStamp(1597423806L);// timestamp representing a specific date and time in the past

        accessEvent.setUsername("admin");// a user with administrative privileges

        accessEvent.setIpAddress("192.168.1.1");// an IP address belonging to a specific network interface

        accessEvent.setOperation("CREATE");// operation representing the creation of a new resource

        accessEvent.setResourceType("USER");// type of resource being operated on, in this case, a user account

        accessEvent.setResourceName("john_doe");// name of the resource being operated on

        accessEvent.setResult(true);// result indicating whether the operation was successful or not

        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setTimeStamp(1597423806L);// same timestamp as above

        accessEvent2.setUsername("admin");// same user name as above

        accessEvent2.setIpAddress("192.168.1.1");// same IP address as above

        accessEvent2.setOperation("READ");// operation representing the reading of a resource

        accessEvent2.setResourceType("USER");// same type of resource as above

        accessEvent2.setResourceName("john_doe");// same name of the resource as above

        accessEvent2.setResult(true);// same result as above

        assertEquals(accessEvent, accessEvent2);// tests that two events with the same properties are equal }}

    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setTimeStamp(1597423806L)// timestamp representing a specific date and time in the past
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(1597423806L)// timestamp representing a specific date and time in the past
 target is: accessEvent method is: setTimeStamp(long)
statement is: accessEvent.setUsername("admin")// a user with administrative privileges
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setUsername("admin")// a user with administrative privileges
 target is: accessEvent method is: setUsername(java.lang.String)
statement is: accessEvent.setIpAddress("192.168.1.1")// an IP address belonging to a specific network interface
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setIpAddress("192.168.1.1")// an IP address belonging to a specific network interface
 target is: accessEvent method is: setIpAddress(java.lang.String)
statement is: accessEvent.setOperation("CREATE")// operation representing the creation of a new resource
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setOperation("CREATE")// operation representing the creation of a new resource
 target is: accessEvent method is: setOperation(java.lang.String)
statement is: accessEvent.setResourceType("USER")// type of resource being operated on, in this case, a user account
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResourceType("USER")// type of resource being operated on, in this case, a user account
 target is: accessEvent method is: setResourceType(java.lang.String)
statement is: accessEvent.setResourceName("john_doe")// name of the resource being operated on
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResourceName("john_doe")// name of the resource being operated on
 target is: accessEvent method is: setResourceName(java.lang.String)
statement is: accessEvent.setResult(true)// result indicating whether the operation was successful or not
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResult(true)// result indicating whether the operation was successful or not
 target is: accessEvent method is: setResult(boolean)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setTimeStamp(1597423806L)// same timestamp as above
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setTimeStamp(1597423806L)// same timestamp as above
 target is: accessEvent2 method is: setTimeStamp(long)
statement is: accessEvent2.setUsername("admin")// same user name as above
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setUsername("admin")// same user name as above
 target is: accessEvent2 method is: setUsername(java.lang.String)
statement is: accessEvent2.setIpAddress("192.168.1.1")// same IP address as above
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setIpAddress("192.168.1.1")// same IP address as above
 target is: accessEvent2 method is: setIpAddress(java.lang.String)
statement is: accessEvent2.setOperation("READ")// operation representing the reading of a resource
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setOperation("READ")// operation representing the reading of a resource
 target is: accessEvent2 method is: setOperation(java.lang.String)
statement is: accessEvent2.setResourceType("USER")// same type of resource as above
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setResourceType("USER")// same type of resource as above
 target is: accessEvent2 method is: setResourceType(java.lang.String)
statement is: accessEvent2.setResourceName("john_doe")// same name of the resource as above
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setResourceName("john_doe")// same name of the resource as above
 target is: accessEvent2 method is: setResourceName(java.lang.String)
statement is: accessEvent2.setResult(true)// same result as above
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setResult(true)// same result as above
 target is: accessEvent2 method is: setResult(boolean)
statement is: assertEquals(accessEvent, accessEvent2)// tests that two events with the same properties are equal }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent, accessEvent2)// tests that two events with the same properties are equal }}
 target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(0L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent = new AccessEvent();
        Long = new Long(1623987405L);// Unix timestamp representing May 1, 2021, at 12:00:05 AM

        accessEvent.setTimeStamp(long.class);
        accessEvent.hashCode();
    }
}
statement is: // Improved test data
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long = new Long(1623987405L)// Unix timestamp representing May 1, 2021, at 12:00:05 AM
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
Long long = null;
accessEvent.setTimeStamp(long);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURI("https://www.example.com");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURI("https://www.example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("https://www.example.com") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com";
accessEvent.setRequestURI(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("]")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("]");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/path/to/resource");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/resource"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/resource") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/resource";
accessEvent.setRequestURL(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("%HN.KMH-_*L")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("%HN.KMH-_*L");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
accessEvent.hashCode();

** It was a parseable test case! 
* Computation finished
