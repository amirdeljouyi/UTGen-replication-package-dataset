/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 09:04:15 GMT 2024
 */

package de.huxhorn.lilith.data.access;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import de.huxhorn.lilith.data.access.AccessEvent;
import de.huxhorn.lilith.data.access.LoggerContext;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessEvent_Original_ESTest extends AccessEvent_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeStampReturningZero() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Long arg0 = new Long(0L);
      accessEvent.setTimeStamp(arg0);
      Long timeStamp = accessEvent.getTimeStamp();
      assertEquals(0L, (long)timeStamp);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeStampReturningPositive() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Long arg0 = new Long(1L);
      accessEvent.setTimeStamp(arg0);
      Long timeStamp = accessEvent.getTimeStamp();
      assertEquals(1L, (long)timeStamp);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningPositive() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setStatusCode(1);
      int statusCode = accessEvent.getStatusCode();
      assertEquals(1, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServerNameReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setServerName("9LC_(03");
      String serverName = accessEvent.getServerName();
      assertEquals("9LC_(03", serverName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestURLReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURL("]");
      String requestURL = accessEvent.getRequestURL();
      assertEquals("]", requestURL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestURIReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURI("JwZYcqTp");
      String requestURI = accessEvent.getRequestURI();
      assertEquals("JwZYcqTp", requestURI);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestParametersReturningMapWhereIsEmptyIsFalse() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      HashMap<String, String[]> arg0 = new HashMap<String, String[]>();
      String[] arg1 = new String[7];
      arg0.put(", properties=", arg1);
      accessEvent.setRequestParameters(arg0);
      Map<String, String[]> requestParameters = accessEvent.getRequestParameters();
      assertFalse(requestParameters.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestHeadersReturningMapWhereIsEmptyIsFalse() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      HashMap<String, String> arg0 = new HashMap<String, String>();
      arg0.put("rR:&]O]9\"F+mXb+kW_&", "rR:&]O]9\"F+mXb+kW_&");
      accessEvent.setRequestHeaders(arg0);
      Map<String, String> requestHeaders = accessEvent.getRequestHeaders();
      assertFalse(requestHeaders.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteUserReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteUser("f;=l.]8O");
      String remoteUser = accessEvent.getRemoteUser();
      assertEquals("f;=l.]8O", remoteUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteUserReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteUser("");
      String remoteUser = accessEvent.getRemoteUser();
      assertEquals("", remoteUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteHostReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteHost("hT7^[9,`joAH1SU");
      String remoteHost = accessEvent.getRemoteHost();
      assertEquals("hT7^[9,`joAH1SU", remoteHost);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteHostReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteHost("");
      String remoteHost = accessEvent.getRemoteHost();
      assertEquals("", remoteHost);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteAddressReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteAddress("]");
      String remoteAddress = accessEvent.getRemoteAddress();
      assertEquals("]", remoteAddress);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProtocolReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setProtocol("-qysKf&n(kwAS7R-");
      String protocol = accessEvent.getProtocol();
      assertEquals("-qysKf&n(kwAS7R-", protocol);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMethodReturningNonEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setMethod("rb");
      String method = accessEvent.getMethod();
      assertEquals("rb", method);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLoggerContextReturningNonNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      LoggerContext arg0 = new LoggerContext();
      accessEvent.setLoggerContext(arg0);
      LoggerContext loggerContext = accessEvent.getLoggerContext();
      assertSame(loggerContext, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalPortReturningPositive() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setLocalPort(181);
      int localPort = accessEvent.getLocalPort();
      assertEquals(181, localPort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetRemoteAddress() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteAddress("AccessEvent[");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetServerName() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setServerName("AccessEvent[");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetMethod() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setMethod("99kc#K]-54&Yd=");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetProtocol() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setProtocol("q");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetRemoteHost() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteHost(";zwv ");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetRequestURL() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURL("p/:;j5s3.oA%-`/");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeAndSetRequestURI() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURI("AccessEvent[");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLoggerContext() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      LoggerContext arg0 = new LoggerContext();
      accessEvent.setLoggerContext(arg0);
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTimeStamp() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Long arg0 = new Long(0L);
      accessEvent.setTimeStamp(arg0);
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetServerName0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setServerName(",dxK#WYHu8_pR`M");
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetServerNameAndEqualsReturningTrue() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setServerName("AccessEvent[");
      AccessEvent accessEvent = new AccessEvent();
      assertFalse(accessEvent.equals((Object)arg0));
      
      accessEvent.setServerName("AccessEvent[");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(accessEvent.equals((Object)arg0));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetServerName1() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setServerName("+$v`}%jBz-");
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRequestURL0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setRequestURL("de.huxhorn.lilith.data.access.LoggerContext");
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRequestURLAndEqualsReturningTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURL("de.huxhorn.lilith.data.access.LoggerContext");
      AccessEvent arg0 = new AccessEvent();
      assertFalse(arg0.equals((Object)accessEvent));
      
      arg0.setRequestURL("de.huxhorn.lilith.data.access.LoggerContext");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(arg0.equals((Object)accessEvent));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRequestURL1() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURL("de.huxhorn.lilith.data.access.LoggerContext");
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRequestURI0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setRequestURI("f");
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRequestURIAndEqualsReturningTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURI("f");
      AccessEvent arg0 = new AccessEvent();
      assertFalse(arg0.equals((Object)accessEvent));
      
      arg0.setRequestURI("f");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(arg0.equals((Object)accessEvent));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRequestURI1() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURI("f");
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteUser0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setRemoteUser("E");
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteUserAndEqualsReturningTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteUser("K");
      AccessEvent arg0 = new AccessEvent();
      assertFalse(arg0.equals((Object)accessEvent));
      
      arg0.setRemoteUser("K");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(arg0.equals((Object)accessEvent));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteUser1() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteUser("K");
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteHost0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      AccessEvent accessEvent = new AccessEvent();
      assertTrue(accessEvent.equals((Object)arg0));
      
      arg0.setRemoteHost(",dxK#WYHu8_pR`M");
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteHost1() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      AccessEvent accessEvent = new AccessEvent();
      assertTrue(accessEvent.equals((Object)arg0));
      
      accessEvent.setRemoteHost("eJYN88yb|;0+C>lE8V`");
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteAddress0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setRemoteAddress("K");
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteAddressAndEqualsReturningTrue() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      AccessEvent accessEvent = new AccessEvent();
      arg0.setRemoteAddress("~LoggerContextname=");
      assertFalse(arg0.equals((Object)accessEvent));
      
      accessEvent.setRemoteAddress("~LoggerContextname=");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(arg0.equals((Object)accessEvent));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteAddress1() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      AccessEvent accessEvent = new AccessEvent();
      assertTrue(accessEvent.equals((Object)arg0));
      
      accessEvent.setRemoteAddress("~LoggerContextname=");
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProtocol0() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setProtocol("v3dV_:v");
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProtocolAndEqualsReturningTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setProtocol("\"HaCg=GO&g^mn");
      AccessEvent arg0 = new AccessEvent();
      assertFalse(arg0.equals((Object)accessEvent));
      
      arg0.setProtocol("\"HaCg=GO&g^mn");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(arg0.equals((Object)accessEvent));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProtocol1() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setProtocol("\"HaCg=GO&g^mn");
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetMethod0() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      AccessEvent arg0 = new AccessEvent();
      assertTrue(arg0.equals((Object)accessEvent));
      
      arg0.setMethod("]");
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetMethodAndEqualsReturningTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setMethod("Qk");
      AccessEvent arg0 = new AccessEvent();
      assertFalse(arg0.equals((Object)accessEvent));
      
      arg0.setMethod("Qk");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(arg0.equals((Object)accessEvent));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetMethod1() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setMethod("Qk");
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetStatusCode() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      AccessEvent arg0 = new AccessEvent();
      accessEvent.setStatusCode(2545);
      boolean equals = accessEvent.equals(arg0);
      assertEquals(2545, accessEvent.getStatusCode());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLocalPort() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setLocalPort(2401);
      AccessEvent arg0 = new AccessEvent();
      boolean equals = accessEvent.equals(arg0);
      assertEquals(2401, accessEvent.getLocalPort());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String[] arg0 = Locale.getISOLanguages();
      boolean equals = accessEvent.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      boolean equals = accessEvent.equals((Object) null);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMethodReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setMethod("");
      String method = accessEvent.getMethod();
      assertEquals("", method);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteAddressReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteAddress("");
      String remoteAddress = accessEvent.getRemoteAddress();
      assertEquals("", remoteAddress);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestURIReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String requestURI = accessEvent.getRequestURI();
      assertNull(requestURI);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMethodReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String method = accessEvent.getMethod();
      assertNull(method);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeStampReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Long timeStamp = accessEvent.getTimeStamp();
      assertNull(timeStamp);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteAddressReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String remoteAddress = accessEvent.getRemoteAddress();
      assertNull(remoteAddress);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServerNameReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setServerName("");
      String serverName = accessEvent.getServerName();
      assertEquals("", serverName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRemoteUserWithEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRemoteUser("");
      accessEvent.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLoggerContextReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      LoggerContext loggerContext = accessEvent.getLoggerContext();
      assertNull(loggerContext);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestURIReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURI("");
      String requestURI = accessEvent.getRequestURI();
      assertEquals("", requestURI);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetResponseHeadersReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Map<String, String> responseHeaders = accessEvent.getResponseHeaders();
      assertNull(responseHeaders);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningZero() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      int statusCode = accessEvent.getStatusCode();
      assertEquals(0, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProtocolReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setProtocol("");
      String protocol = accessEvent.getProtocol();
      assertEquals("", protocol);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteHostReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String remoteHost = accessEvent.getRemoteHost();
      assertNull(remoteHost);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestURLReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String requestURL = accessEvent.getRequestURL();
      assertNull(requestURL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestHeadersReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Map<String, String> requestHeaders = accessEvent.getRequestHeaders();
      assertNull(requestHeaders);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestHeadersReturningMapWhereIsEmptyIsTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      HashMap<String, String> arg0 = new HashMap<String, String>();
      accessEvent.setRequestHeaders(arg0);
      Map<String, String> requestHeaders = accessEvent.getRequestHeaders();
      assertTrue(requestHeaders.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProtocolReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String protocol = accessEvent.getProtocol();
      assertNull(protocol);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalPortReturningNegative() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setLocalPort((-1087));
      int localPort = accessEvent.getLocalPort();
      assertEquals((-1087), localPort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServerNameReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String serverName = accessEvent.getServerName();
      assertNull(serverName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeStampReturningNegative() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Long arg0 = new Long((-2827L));
      accessEvent.setTimeStamp(arg0);
      Long timeStamp = accessEvent.getTimeStamp();
      assertEquals((-2827L), (long)timeStamp);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestParametersReturningMapWhereIsEmptyIsTrue() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      HashMap<String, String[]> arg0 = new HashMap<String, String[]>();
      accessEvent.setRequestParameters(arg0);
      Map<String, String[]> requestParameters = accessEvent.getRequestParameters();
      assertEquals(0, requestParameters.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetResponseHeaders() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      HashMap<String, String> arg0 = new HashMap<String, String>();
      accessEvent.setResponseHeaders(arg0);
      Map<String, String> responseHeaders = accessEvent.getResponseHeaders();
      assertTrue(responseHeaders.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestURLReturningEmptyString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setRequestURL("");
      String requestURL = accessEvent.getRequestURL();
      assertEquals("", requestURL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalPortReturningZero() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      int localPort = accessEvent.getLocalPort();
      assertEquals(0, localPort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRequestParametersReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      Map<String, String[]> requestParameters = accessEvent.getRequestParameters();
      assertNull(requestParameters);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetRemoteHostAndEqualsReturningTrue() throws Throwable  {
      AccessEvent arg0 = new AccessEvent();
      arg0.setRemoteHost("eJYN88yb|;0+C>lE8V`");
      AccessEvent accessEvent = new AccessEvent();
      assertFalse(accessEvent.equals((Object)arg0));
      
      accessEvent.setRemoteHost("eJYN88yb|;0+C>lE8V`");
      boolean equals = accessEvent.equals(arg0);
      assertTrue(accessEvent.equals((Object)arg0));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String string = accessEvent.toString();
      assertEquals("AccessEvent[loggerContext=null, timeStamp=null]", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteUserReturningNull() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      String remoteUser = accessEvent.getRemoteUser();
      assertNull(remoteUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningNegative() throws Throwable  {
      AccessEvent accessEvent = new AccessEvent();
      accessEvent.setStatusCode((-921));
      int statusCode = accessEvent.getStatusCode();
      assertEquals((-921), statusCode);
  }
}
