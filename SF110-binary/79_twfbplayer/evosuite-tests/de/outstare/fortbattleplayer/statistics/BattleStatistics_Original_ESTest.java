/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 12:31:02 GMT 2024
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BattleStatistics_Original_ESTest extends BattleStatistics_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAndResetRoundCounter() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
      HashMap<CombatantSide, AtomicInteger> arg0 = new HashMap<CombatantSide, AtomicInteger>();
      battleStatistics.addAndResetRoundCounter(arg0, (Map<CombatantSide, RoundStatistics>) null);
      assertEquals(0, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRoundReturningZero() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
      int round = battleStatistics.round(0);
      assertEquals(0, round);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRoundReturningNegative() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
      int round = battleStatistics.round((-2985));
      assertEquals((-2985), round);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountWeaponMods() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
      CombatantSide arg0 = CombatantSide.ATTACKER;
      int countWeaponMods = battleStatistics.countWeaponMods(arg0, (WeaponModCounter) null);
      assertEquals(0, countWeaponMods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCritListWithNonNull() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(478, 478);
      CombatantSide arg0 = CombatantSide.DEFENDER;
      List<CriticalHit> critList = battleStatistics.critList(arg0);
      assertTrue(critList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNotShootersPerRound() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(478, 478);
      battleStatistics.setRound(478);
      Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound();
      assertEquals(2, notShootersPerRound.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCritListWithNull() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
      List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null);
      assertTrue(critList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCriticalHitDamage() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
      CombatantSide arg0 = CombatantSide.ATTACKER;
      long criticalHitDamage = battleStatistics.criticalHitDamage(arg0);
      assertEquals(0L, criticalHitDamage);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSwitchedPosList() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(478, 478);
      Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null);
      assertEquals(0, switchedPosList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfMovesPerPlayerReturningZero() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(478, 478);
      CombatantSide arg0 = CombatantSide.DEFENDER;
      double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
      assertEquals(0.0, numberOfMovesPerPlayer, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfMovesPerPlayerWithNonNull() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(1, 1);
      CombatantSide arg0 = CombatantSide.ATTACKER;
      double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
      assertEquals(0.0, numberOfMovesPerPlayer, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCombatantLifetime() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(52, 52);
      int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null);
      assertEquals(0, combatantLifetime);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRoundWithNegative() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
      battleStatistics.setRound((-2911));
      battleStatistics.setRound((-2911));
      battleStatistics.setRound((-2911));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShotsPerRound() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(478, 478);
      Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound();
      assertFalse(shotsPerRound.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAmountOfDefenseBonus() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(29, 29);
      CombatantSide arg0 = CombatantSide.DEFENDER;
      int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0);
      assertEquals(0, amountOfDefenseBonus);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRoundReturningPositive() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
      int round = battleStatistics.round(84.2853148);
      assertEquals(84, round);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCriticalHits() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
      CombatantSide arg0 = CombatantSide.DEFENDER;
      int criticalHits = battleStatistics.criticalHits(arg0);
      assertEquals(0, criticalHits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHitsPerRound() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
      Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound();
      assertEquals(2, hitsPerRound.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasMovedThrowsNullPointerException() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
      // Undeclared exception!
      try { 
        battleStatistics.hasMoved((Combatant) null, (Area) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAlive() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
      battleStatistics.isAlive((Combatant) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfHipFlasks() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
      CombatantSide arg0 = CombatantSide.DEFENDER;
      int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0);
      assertEquals(0, numberOfHipFlasks);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfSchmierOil() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(23, 23);
      int numberOfSchmierOil = battleStatistics.numberOfSchmierOil((CombatantSide) null);
      assertEquals(0, numberOfSchmierOil);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfFettesOil() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(478, 478);
      CombatantSide arg0 = CombatantSide.DEFENDER;
      int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0);
      assertEquals(0, numberOfFettesOil);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFieldStatistics() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
      Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics();
      assertEquals(0, fieldStatistics.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTotalSwaps() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
      CombatantSide arg0 = CombatantSide.ATTACKER;
      int totalSwaps = battleStatistics.totalSwaps(arg0);
      assertEquals(0, totalSwaps);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfGraphitLubricants() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
      CombatantSide arg0 = CombatantSide.DEFENDER;
      int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0);
      assertEquals(0, numberOfGraphitLubricants);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAmountOfAttackBonus() throws Throwable  {
      CombatantSide arg0 = CombatantSide.DEFENDER;
      BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
      int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0);
      assertEquals(0, amountOfAttackBonus);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsDead() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(3, 3);
      battleStatistics.isDead((Combatant) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfLoadingChamerOrEnhancedPatrons() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(1, 1);
      CombatantSide arg0 = CombatantSide.DEFENDER;
      int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0);
      assertEquals(0, numberOfLoadingChamerOrEnhancedPatrons);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewDestination() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(0, 0);
      CharacterClass arg7 = CharacterClass.ADVENTURER;
      SimpleSector arg2 = new SimpleSector(16716049, false, true, 1509, 612, false, 0, arg7);
      SimpleArea arg1 = new SimpleArea(16716049, 474, arg2);
      battleStatistics.newDestination((Combatant) null, arg1);
      assertFalse(arg1.isOccupied());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfBayonets() throws Throwable  {
      BattleStatistics battleStatistics = new BattleStatistics(23, 23);
      CombatantSide arg0 = CombatantSide.ATTACKER;
      int numberOfBayonets = battleStatistics.numberOfBayonets(arg0);
      assertEquals(0, numberOfBayonets);
  }
}
