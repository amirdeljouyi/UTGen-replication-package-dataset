* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.model.impl.SimpleSector
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 20997
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 12:20:58.769 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 12:20:58.775 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 12:20:58.776 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 12:20:58.847 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 12:20:59.171 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 12:20:59.173 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.model.impl.SimpleSector
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 308
* Using seed 1710332456760
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 134 / 308
[Progress:>                             0%] [Cov:===========================>       78%][Progress:>                             1%] [Cov:===========================>       79%][Progress:>                             1%] [Cov:============================>      81%][Progress:>                             1%] [Cov:============================>      81%][Progress:>                             1%] [Cov:==============================>    86%][Progress:>                             1%] [Cov:==============================>    86%][Progress:>                             2%] [Cov:==============================>    86%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:==============================>    88%][Progress:>                             3%] [Cov:===============================>   89%][Progress:>                             3%] [Cov:===============================>   89%][Progress:>                             3%] [Cov:===============================>   89%][Progress:>                             3%] [Cov:===============================>   89%][Progress:>                             3%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][MASTER] 12:22:48.523 [logback-1] WARN  TestCluster - Failed to check cache for javax.swing.JComboBox<E> : Type points to itself
[Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%]
* Search finished after 202s and 1169 generations, 915732 statements, best individual has fitness: 23.0
* Generated before the refinement 44 tests with total length 161
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
simpleSector.getOccupier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getOccupier();
    }
}
statement is: simpleSector.getOccupier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getOccupier() target is: simpleSector method is: getOccupier()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isAttackerSpawn();
    }
}
statement is: simpleSector.isAttackerSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isAttackerSpawn() target is: simpleSector method is: isAttackerSpawn()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();
    }
}
statement is: simpleSector.isFlag(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag() target is: simpleSector method is: isFlag()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: removeObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.removeObserver(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.removeObserver(sectorObserver);
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.removeObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.removeObserver(sectorObserver) target is: simpleSector method is: removeObserver(SectorObserver)
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 559, false, 31, arg7)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 559, false, 31, characterClass);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getAreas();
    }
}
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isDefenderSpawn();
    }
}
statement is: simpleSector.isDefenderSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isDefenderSpawn() target is: simpleSector method is: isDefenderSpawn()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(5584, false, false, 5584, 5584, false, 5584, arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(5584, false, false, 5584, 5584, false, 5584, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.gainControl(combatantSide);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        simpleSector.gainControl(combatantSide);
        simpleSector.gainControl(combatantSide);
        simpleSector.free();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: addObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.addObserver(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.addObserver(sectorObserver);
        simpleSector.free();
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.addObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.addObserver(sectorObserver) target is: simpleSector method is: addObserver(SectorObserver)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(23, true, true, 0, 23, true, 0, arg7)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 0, 23, true, 0, characterClass);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isOccupied();
    }
}
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleSector.gainControl(combatantSide);
        simpleSector.isOccupied();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(278, true, true, 278, 278, true, 278, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(278, 278, arg2)
statement is: getDamageBonus()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int damageBonus = simpleSector.getDamageBonus()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(278, true, true, 278, 278, true, 278, characterClass);
SimpleArea simpleArea = new SimpleArea(278, 278, simpleSector);
simpleSector.getDamageBonus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(100, 278, simpleSector);
        simpleSector.getDamageBonus();// changed to a more descriptive example }}

    }
}
statement is: SimpleArea simpleArea = new SimpleArea(100, 278, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getDamageBonus()// changed to a more descriptive example }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDamageBonus()// changed to a more descriptive example }}
 target is: simpleSector method is: getDamageBonus()
TestCase is: int _int = 100;
int _int = 278;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(278, true, true, 278, 278, true, 278, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(278, 278, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 278, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(278, "ntf end to go to round ", 278, 278)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 278, "ntf end to go to round ", arg4, arg5, "ntf end to go to round ")
statement is: getDamageBonus()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int damageBonus = simpleSector.getDamageBonus()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(278, true, true, 278, 278, true, 278, characterClass);
SimpleArea simpleArea = new SimpleArea(278, 278, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 278, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(278, "ntf end to go to round ", 278, 278);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 278, "ntf end to go to round ", characterClass, simpleWeapon, "ntf end to go to round ");
simpleSector.getDamageBonus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(278, 278, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 278, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(278, "The Enforcer", 278, 278);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 278, "Grimbold Ironfist", characterClass, simpleWeapon, "Dwarf");
        simpleSector.getDamageBonus();
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(278, 278, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 278, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(278, "The Enforcer", 278, 278), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 278, "Grimbold Ironfist", characterClass, simpleWeapon, "Dwarf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getDamageBonus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDamageBonus() target is: simpleSector method is: getDamageBonus()
TestCase is: int _int = 278;
int _int = 278;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 278;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 278;
String string = "The Enforcer";
int _int = 278;
int _int = 278;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 278;
String string = "Grimbold Ironfist";
String string = "Dwarf";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "ntf end to go to round ");

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), arg7)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the getAttackBonus method of the SimpleSector class
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, -1455, characterClass);
        int expectedAttackBonus = 6;
        assertEquals(expectedAttackBonus, simpleSector.getAttackBonus(characterClass));
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        int expectedAttackBonus = -2;
    }
}
statement is: // Improved test data for the getAttackBonus method of the SimpleSector class
CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, -1455, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int expectedAttackBonus = 6, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedAttackBonus, simpleSector.getAttackBonus(characterClass)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedAttackBonus, simpleSector.getAttackBonus(characterClass)) target is:  method is: assertEquals(int,<unknown>)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: int expectedAttackBonus = -2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -2
* this is vulnerable: int _int = 6
TestCase is: int _int = 50;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 50;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1455), (CharacterClass) _int);
int _int = 6;

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(23, true, true, 0, 23, true, 0, arg7)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = simpleSector.hashCode()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 0, 23, true, 0, characterClass);
simpleSector.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.hashCode();
    }
}
statement is: simpleSector.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.hashCode() target is: simpleSector method is: hashCode()
statement is: de.outstare.fortbattleplayer.model.impl.SimpleBattleField(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleBattleField
statement code is: SimpleBattleField simpleBattleField = new SimpleBattleField(0, 1231)
test data is: SimpleBattleField simpleBattleField = new SimpleBattleField(0, 1231);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the SimpleBattleField class
        char[][] board = new char[][]{ new char[]{ 'X', 'O', 'X' }, new char[]{ ' ', ' ', ' ' }, new char[]{ ' ', ' ', ' ' } };
        String playerId = "Alice";
        String move = "left";
    }
}
statement is: // Improved test data for the SimpleBattleField class
char[][] board = new char[][]{ new char[]{ 'X', 'O', 'X' }, new char[]{ ' ', ' ', ' ' }, new char[]{ ' ', ' ', ' ' } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String playerId = "Alice", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String move = "left", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "left"
TestCase is: String string = "Alice";
String string = "left";

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(23, true, true, 0, 23, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 23, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 0, 23, true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 23, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector2);
    }
}
statement is: simpleSector.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector2) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals((Object) null)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
simpleSector.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(((Object) (null)));
    }
}
statement is: simpleSector.equals(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(((Object) (null))) target is: simpleSector method is: equals(java.lang.Object)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: getBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus bonus = simpleSector.getBonus(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SectorBonus bonus = simpleSector.getBonus(characterClass);
simpleSector.equals(bonus);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(bonus);
    }
}
statement is: simpleSector.equals(bonus), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(bonus) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, arg7)
statement is: _addArea(Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector._addArea((Area) null)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-503), false, true, 4, 1231, false, (-1690), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-503), true, false, 2086, 0, false, 2086, characterClass);
simpleSector._addArea((Area) null);
SimpleSector simpleSector = new SimpleSector((-503), false, true, 4, 1231, false, (-1690), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1._addArea(((Area) (null)));
        SimpleSector simpleSector2 = new SimpleSector(sectorWithAreaID, false, true, 4, 1231, false, -1690, characterClass);
        simpleSector2.equals(simpleSector2);
    }
}
statement is: simpleSector1._addArea(((Area) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1._addArea(((Area) (null))) target is: simpleSector1 method is: _addArea(Area)
statement is: SimpleSector simpleSector2 = new SimpleSector(sectorWithAreaID, false, true, 4, 1231, false, -1690, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector2.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector2.equals(simpleSector2) target is: simpleSector2 method is: equals(SimpleSector)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 5
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: boolean _boolean = false;
boolean _boolean = true;
int _int = 4;
int _int = 1231;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, false, 2086, (CharacterClass) _boolean);
((SimpleSector) _boolean).equals(simpleSector);

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 50, 2112, false, 316, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(50, false, false, 2, (-1455), false, 316, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 50, 2112, false, 316, characterClass);
SimpleSector simpleSector = new SimpleSector(50, false, false, 2, (-1455), false, 316, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, true, 50, 2112, false, 316, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), characterClass);
SimpleSector simpleSector = new SimpleSector(1231, false, true, 50, 2112, false, 316, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 50, 2112, false, 316, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(50, false, false, 50, 50, true, (-1455), characterClass);
SimpleSector simpleSector = new SimpleSector(1231, false, false, 50, 2112, false, 316, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);// This line will return false as the two objects are not equal }}

    }
}
statement is: simpleSector1.equals(simpleSector2)// This line will return false as the two objects are not equal }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2)// This line will return false as the two objects are not equal }}
 target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-457), true, true, (-457), (-457), true, (-457), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2902, true, true, (-457), 2902, true, (-457), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-457), true, true, (-457), (-457), true, (-457), characterClass);
SimpleSector simpleSector = new SimpleSector(2902, true, true, (-457), 2902, true, (-457), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertTrue(simpleSector1.equals(simpleSector2));
    }
}
statement is: assertTrue(simpleSector1.equals(simpleSector2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(simpleSector1.equals(simpleSector2)) target is:  method is: assertTrue(<unknown>)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-418), false, false, (-418), (-418), false, (-418), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-418), false, false, (-418), (-418), true, (-418), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-418), false, false, (-418), (-418), false, (-418), characterClass);
SimpleSector simpleSector = new SimpleSector((-418), false, false, (-418), (-418), true, (-418), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2504), false, true, (-2504), (-2504), true, (-412), arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2504), false, true, (-2504), (-2504), true, (-412), characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, false, 1, arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, false, 1, characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // The bonus value for a WORKER character should be 10.
        assertEquals(10, simpleSector.classBonus(WORKER));
        // The bonus value for an OFFICER character should be 20.
        assertEquals(20, simpleSector.classBonus(OFFICER));
        // The bonus value for a SCIENTIST character should be 30. }}
    }
}
statement is: // The bonus value for a WORKER character should be 10.
assertEquals(10, simpleSector.classBonus(WORKER)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The bonus value for a WORKER character should be 10.
assertEquals(10, simpleSector.classBonus(WORKER)) target is:  method is: assertEquals(int,<unknown>)
statement is: // The bonus value for an OFFICER character should be 20.
assertEquals(20, simpleSector.classBonus(OFFICER)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The bonus value for an OFFICER character should be 20.
assertEquals(20, simpleSector.classBonus(OFFICER)) target is:  method is: assertEquals(int,<unknown>)
statement is: // The bonus value for a SCIENTIST character should be 30. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, false, false, 2875, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2875, 1, arg2)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, false, false, 2875, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2875, 1, simpleSector);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.setAreas(new ArrayList<SimpleArea>());
        // Create a few sample areas with different values for the sector ID
        SimpleArea simpleArea1 = new SimpleArea(1234, 1, simpleSector);
        SimpleArea simpleArea2 = new SimpleArea(5678, 1, simpleSector);
        SimpleArea simpleArea3 = new SimpleArea(9012, 1, simpleSector);
        simpleSector.getAreas().add(simpleArea1);
        simpleSector.getAreas().add(simpleArea2);
        simpleSector.getAreas().add(simpleArea3);
    }
}
statement is: simpleSector.setAreas(new ArrayList<SimpleArea>()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.setAreas(new ArrayList<SimpleArea>()) target is: simpleSector method is: setAreas(ArrayList)
statement is: // Create a few sample areas with different values for the sector ID
SimpleArea simpleArea1 = new SimpleArea(1234, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea2 = new SimpleArea(5678, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea3 = new SimpleArea(9012, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getAreas().add(simpleArea1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas().add(simpleArea1) target is: simpleSector.getAreas() method is: add(SimpleArea)
statement is: simpleSector.getAreas().add(simpleArea2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas().add(simpleArea2) target is: simpleSector.getAreas() method is: add(SimpleArea)
statement is: simpleSector.getAreas().add(simpleArea3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas().add(simpleArea3) target is: simpleSector.getAreas() method is: add(SimpleArea)
TestCase is: int _int = 1234;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 5678;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 9012;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);

statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2504), false, true, (-2504), (-2504), true, (-412), arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2504), false, true, (-2504), (-2504), true, (-412), characterClass);
simpleSector.getAttackBonus(characterClass);

* Computation finished
