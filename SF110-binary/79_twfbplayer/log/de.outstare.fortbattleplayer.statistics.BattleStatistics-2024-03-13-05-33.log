* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.statistics.BattleStatistics
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 8730
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:33:50.799 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:33:50.808 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:33:50.810 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:33:50.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntBinaryOperator
[MASTER] 05:33:50.844 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntUnaryOperator
[MASTER] 05:33:50.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 05:33:50.890 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 05:33:50.892 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 05:33:54.047 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.statistics.BattleStatistics
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 693
* Using seed 1710308028525
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 327 / 693
[MASTER] 05:33:55.798 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:>                             1%] [Cov:====================>              58%][MASTER] 05:33:57.391 [logback-1] WARN  TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 05:33:57.391 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             1%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:=====================>             62%][Progress:>                             2%] [Cov:======================>            64%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:========================>          69%][Progress:>                             3%] [Cov:========================>          70%][Progress:=>                            4%] [Cov:========================>          70%][Progress:=>                            4%] [Cov:========================>          71%][Progress:=>                            4%] [Cov:========================>          71%][Progress:=>                            4%] [Cov:========================>          71%][Progress:=>                            4%] [Cov:========================>          71%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         74%][Progress:=>                            5%] [Cov:=========================>         74%][Progress:=>                            5%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][MASTER] 05:34:21.027 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 202s and 860 generations, 553453 statements, best individual has fitness: 84.0
* Generated before the refinement 65 tests with total length 477
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfBayonets = battleStatistics.numberOfBayonets(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfBayonets(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfBayonets(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfBayonets(combatantSide) target is: battleStatistics method is: numberOfBayonets(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-1422), 2, arg2)
statement is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.newDestination((Combatant) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), characterClass);
SimpleArea simpleArea = new SimpleArea((-1422), 2, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, -1422, characterClass);
        SimpleArea simpleArea = new SimpleArea(-1422, 2, simpleSector);
        battleStatistics.newDestination(((Combatant) (null)), simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, -1422, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-1422, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.newDestination(((Combatant) (null)), simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.newDestination(((Combatant) (null)), simpleArea) target is: battleStatistics method is: newDestination(Combatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 2;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1422), (CharacterClass) _int);
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2276, 2276)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfShinyOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2276, 2276), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2276;
int _int = 2276;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide) target is: battleStatistics method is: numberOfLoadingChamerOrEnhancedPatrons(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10000, 1500);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfGraphitLubricants(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10000, 1500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfGraphitLubricants(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(combatantSide) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10000;
int _int = 1500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2674), 0)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(-2674, 0);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(-2674, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, 0);
CombatantSide combatantSide = null;
battleStatistics.totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-4778), (-4778))
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-4778), (-4778));
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private final int attackPower;

    private final int defensePower;

    public  BattleStatistics(int attackPower, int defensePower) {
        this.attackPower = attackPower;
        this.defensePower = defensePower;
    }

    public Map<String, Integer> getFieldStatistics() {
        // returns a map of field statistics
        return null;
    }
}
statement is: this.attackPower = attackPower, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.defensePower = defensePower, class spoon.support.reflect.code.CtAssignmentImpl
statement is: // returns a map of field statistics
return null, class spoon.support.reflect.code.CtReturnImpl
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3701, 100);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfHipFlasks(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3701, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfHipFlasks(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(combatantSide) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3701;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(50, 50)
statement is: getHitsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(50, 50);
battleStatistics.getHitsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.getHitsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getHitsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getHitsPerRound() target is: battleStatistics method is: getHitsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getHitsPerRound()Ljava/util/Map;
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getHitsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHits(combatantSide);
        // Improved test data:
        int attackerCriticalHits = 5;
        int defenderCriticalHits = 3;
        CombatantSide attackerSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHits(attackerSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
int attackerCriticalHits = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int defenderCriticalHits = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHits(attackerSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(attackerSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 3
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);
int _int = 5;
int _int = 3;
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2079, 2079)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2079, 2079, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2079, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4158, "", arg4, arg5, "")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(5, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(5, true, true, 5, 5, true, 5, characterClass);
        SimpleArea simpleArea = new SimpleArea(5, 5, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(5, "M16", 0, 5);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "Red", characterClass, simpleWeapon, "M16");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(5, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(5, true, true, 5, 5, true, 5, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(5, 5, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(5, "M16", 0, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "Red", characterClass, simpleWeapon, "M16"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 5;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
boolean _boolean = true;
boolean _boolean = true;
int _int = 5;
int _int = 5;
boolean _boolean = true;
int _int = 5;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 5;
int _int = 5;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 5;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "M16";
int _int = 0;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4158;
String string = "Red";
String string = "M16";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4, 4)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(371, 371)
statement is: getShotsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(371, 371);
battleStatistics.getShotsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(371, 371);
        battleStatistics.getShotsPerRound();
        // Output: 250 shots per round }}
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(371, 371), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getShotsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getShotsPerRound() target is: battleStatistics method is: getShotsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getShotsPerRound()Ljava/util/Map;
statement is: // Output: 250 shots per round }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 371;
int _int = 371;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getShotsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-7))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-1))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-673))
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((-7));
battleStatistics.setRound((-1));
battleStatistics.setRound((-673));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-7, -7);
        battleStatistics.setRound(-7);
        battleStatistics.setRound(-1);
        battleStatistics.setRound(-673);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-7, -7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(-7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-7) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.setRound(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-1) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.setRound(-673), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-673) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4, 4)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(4)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(4, 4, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 4, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 8, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4, 4);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.setRound(4);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
        SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
        SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide, combatantState, 8, "Offline Combatant 1", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant1, false);
        SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide, combatantState, 8, "Offline Combatant 2", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant2, false);
        SimpleCombatant simpleCombatant3 = new SimpleCombatant(combatantSide, combatantState, 8, "Online Combatant 1", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant3, true);
        SimpleCombatant simpleCombatant4 = new SimpleCombatant(combatantSide, combatantState, 8, "Online Combatant 2", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant4, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.setRound(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide, combatantState, 8, "Offline Combatant 1", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant1, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant1, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide, combatantState, 8, "Offline Combatant 2", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant2, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant2, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: SimpleCombatant simpleCombatant3 = new SimpleCombatant(combatantSide, combatantState, 8, "Online Combatant 1", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant3, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant3, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: SimpleCombatant simpleCombatant4 = new SimpleCombatant(combatantSide, combatantState, 8, "Online Combatant 2", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant4, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant4, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 4;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 4;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4;
int _int = 4;
boolean _boolean = false;
int _int = 4;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 4;
int _int = 4;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 4;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4;
String string = "";
int _int = 0;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 8;
String string = "Offline Combatant 1";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Offline Combatant 2";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Online Combatant 1";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Online Combatant 2";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2299, true, true, 2299, 2299, false, 2299, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2299, 2299, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-674), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1666), "round statistics for players and shots differ!", 4598, 4598)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), "round statistics for players and shots differ!", arg4, arg5, " aims at ")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-674), 4598)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-3208))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1191)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2299, true, true, 2299, 2299, false, 2299, characterClass);
SimpleArea simpleArea = new SimpleArea(2299, 2299, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-674), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1666), "round statistics for players and shots differ!", 4598, 4598);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "round statistics for players and shots differ!", characterClass, simpleWeapon, " aims at ");
BattleStatistics battleStatistics = new BattleStatistics((-674), 4598);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound((-3208));
battleStatistics.setRound(1191);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(2299, 2299, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -674, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1666, "a sharp sword", 4598, 4598);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "Gorthok the Unyielding", characterClass, simpleWeapon, " swings his sword at ");
        BattleStatistics battleStatistics = new BattleStatistics(-674, 4598);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.setRound(-3208);
        battleStatistics.setRound(1191);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(2299, 2299, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -674, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1666, "a sharp sword", 4598, 4598), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "Gorthok the Unyielding", characterClass, simpleWeapon, " swings his sword at "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(-674, 4598), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 13
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.setRound(-3208), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-3208) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 13
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 13
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.setRound(1191), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1191) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 13
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 13
Matched Method is: setRound(I)V
TestCase is: int _int = 2299;
int _int = 2299;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "a sharp sword";
int _int = 4598;
int _int = 4598;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 4598);
String string = "Gorthok the Unyielding";
String string = " swings his sword at ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, " aims at ");
int _int = 4598;
BattleStatistics battleStatistics = new BattleStatistics(_int, 4598);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = null;
((BattleStatistics) _int).setRound(_int);
int _int = 1191;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2079, 2079)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2079, 2079, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2079, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4158, "", arg4, arg5, "")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1234567890, 1234567890);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1234567890, true, true, 1234567890, 1234567890, true, 1234567890, characterClass);
        SimpleArea simpleArea = new SimpleArea(1234567890, 1234567890, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1234567890, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1234567890, "M16A2", 0.5, 1234567890);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "John Doe", characterClass, simpleWeapon, "US");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1234567890, 1234567890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1234567890, true, true, 1234567890, 1234567890, true, 1234567890, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1234567890, 1234567890, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1234567890, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1234567890, "M16A2", 0.5, 1234567890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "John Doe", characterClass, simpleWeapon, "US"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1234567890;
int _int = 1234567890;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1234567890;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1234567890;
int _int = 1234567890;
boolean _boolean = true;
int _int = 1234567890;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1234567890;
int _int = 1234567890;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234567890;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234567890;
String string = "M16A2";
double _double = 0.5;
int _int = 1234567890;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, _int);
int _int = 4158;
String string = "John Doe";
String string = "US";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 1, true, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 1614, arg2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "", arg4, (Weapon) null, "")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 1, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 1614, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(15, false, false, 3, 6, true, 7, characterClass);
        SimpleArea simpleArea = new SimpleArea(25, 4087, simpleSector);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "", characterClass, ((Weapon) (null)), "");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(15, false, false, 3, 6, true, 7, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(25, 4087, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "", characterClass, ((Weapon) (null)), ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 15;
boolean _boolean = false;
boolean _boolean = false;
int _int = 3;
int _int = 6;
boolean _boolean = true;
int _int = 7;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 25;
int _int = 4087;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2056, 2056, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2056, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4112, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
        SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2056;
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2056;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2056;
int _int = 2056;
boolean _boolean = true;
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2056;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2056;
String string = "";
int _int = 0;
int _int = 2056;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4112;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2056, 2056, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2056, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4112, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
        SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "M16A2", 2000, 300);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "John Doe", characterClass, simpleWeapon, "US Army");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "M16A2", 2000, 300), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "John Doe", characterClass, simpleWeapon, "US Army"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2056;
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2056;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2056;
int _int = 2056;
boolean _boolean = true;
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2056;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2056;
String string = "M16A2";
int _int = 2000;
int _int = 300;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4112;
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(151, 151)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(151, 151, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 151, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(151, "", 0, 151)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 302, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(151, 151);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, characterClass);
SimpleArea simpleArea = new SimpleArea(151, 151, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 151, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(151, "", 0, 151);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 302, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(151, 151);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, characterClass);
        SimpleArea simpleArea = new SimpleArea(151, 151, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 151, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(151, "Energy Blade", 0, 151);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 302, "Lord Zekk", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(151, 151), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(151, 151, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 151, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(151, "Energy Blade", 0, 151), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 302, "Lord Zekk", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 151;
int _int = 151;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 151;
boolean _boolean = false;
boolean _boolean = false;
int _int = 151;
int _int = 151;
boolean _boolean = false;
int _int = 151;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 151;
int _int = 151;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 151;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 151;
String string = "Energy Blade";
int _int = 0;
int _int = 151;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 302;
String string = "Lord Zekk";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3, 3)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3, 3, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 6, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfFettesOil = battleStatistics.numberOfFettesOil((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, characterClass);
SimpleArea simpleArea = new SimpleArea(3, 3, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 6, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfFettesOil((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3, 3);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, characterClass);
        SimpleArea simpleArea = new SimpleArea(3, 3, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 6, "", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.numberOfFettesOil(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(3, 3, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 6, "", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfFettesOil(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(((CombatantSide) (null))) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3;
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3;
boolean _boolean = false;
boolean _boolean = false;
int _int = 3;
int _int = 3;
boolean _boolean = false;
int _int = 3;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 3;
int _int = 3;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 3;
String string = "";
int _int = 0;
int _int = 3;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 6;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2040, 2040, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2040, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4080, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
        SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "Gauss Rifle", 500, 2040);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234567890, "Bob the Worker", characterClass, simpleWeapon, "Red");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "Gauss Rifle", 500, 2040), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234567890, "Bob the Worker", characterClass, simpleWeapon, "Red"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2040;
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2040;
boolean _boolean = false;
boolean _boolean = false;
int _int = 2040;
int _int = 2040;
boolean _boolean = false;
int _int = 2040;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2040;
int _int = 2040;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2040;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2040;
String string = "Gauss Rifle";
int _int = 500;
int _int = 2040;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1234567890;
String string = "Bob the Worker";
String string = "Red";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-7), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1823), "", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 258, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1823), "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 258, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleResults = new BattleStatistics(25, 30);
        CombatantSide attackerSide = CombatantSide.ATTACKER;
        CharacterClass attackerClass = CharacterClass.WARRIOR;
        SimpleSector attackerSector = new SimpleSector(1823, true, true, 7, -673, true, 258, attackerClass);
        SimpleArea attackerArea = new SimpleArea(258, 30, attackerSector);
        CombatantState attackerState = new CombatantState(attackerArea, 7, attackerArea, true);
        SimpleWeapon attackerWeapon = new SimpleWeapon(1823, "Heavy Crossbow", 50, 30);
        SimpleCombatant attackerCombatant = new SimpleCombatant(attackerSide, attackerState, 258, "Arthur", attackerClass, attackerWeapon, "Avenger");
        battleResults.isOnline(attackerCombatant, true);
        CombatantSide defenderSide = CombatantSide.DEFENDER;
        battleResults.roundsTillOnline(defenderSide);
    }
}
statement is: BattleStatistics battleResults = new BattleStatistics(25, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass attackerClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector attackerSector = new SimpleSector(1823, true, true, 7, -673, true, 258, attackerClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea attackerArea = new SimpleArea(258, 30, attackerSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState attackerState = new CombatantState(attackerArea, 7, attackerArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon attackerWeapon = new SimpleWeapon(1823, "Heavy Crossbow", 50, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant attackerCombatant = new SimpleCombatant(attackerSide, attackerState, 258, "Arthur", attackerClass, attackerWeapon, "Avenger"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleResults.isOnline(attackerCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleResults.isOnline(attackerCombatant, true) target is: battleResults method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide defenderSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleResults.roundsTillOnline(defenderSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleResults.roundsTillOnline(defenderSide) target is: battleResults method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 25;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1823;
boolean _boolean = true;
boolean _boolean = true;
int _int = 7;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 7;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1823;
String string = "Heavy Crossbow";
int _int = 50;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 258;
String string = "Arthur";
String string = "Avenger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2056, 2056, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2056, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4112, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
        SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
        CombatantState combatantState = new CombatantState("4112", simpleArea, 2056, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon("M4 rifle", "Gun", 100, 2056);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "4112", "John Doe", characterClass, simpleWeapon, "US Army");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2056, 2056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState("4112", simpleArea, 2056, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("M4 rifle", "Gun", 100, 2056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "4112", "John Doe", characterClass, simpleWeapon, "US Army"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2056;
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2056;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2056;
int _int = 2056;
boolean _boolean = true;
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
String string = "M4 rifle";
String string = "Gun";
int _int = 100;
int _int = 2056;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
String string = "4112";
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) string, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2063, 2063)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2063, 2063, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2063, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "", 0, 2063)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4126, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, characterClass);
SimpleArea simpleArea = new SimpleArea(2063, 2063, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2063, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "", 0, 2063);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4126, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, characterClass);
        SimpleArea simpleArea = new SimpleArea(2063, 2063, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2063, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "Assault Rifle", 500, 1000);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4126, "John Doe", characterClass, simpleWeapon, "USA");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2063, 2063), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2063, 2063, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2063, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "Assault Rifle", 500, 1000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4126, "John Doe", characterClass, simpleWeapon, "USA"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2063;
int _int = 2063;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2063;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2063;
int _int = 2063;
boolean _boolean = true;
int _int = 2063;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2063;
int _int = 2063;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2063;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2063;
String string = "Assault Rifle";
int _int = 500;
int _int = 1000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4126;
String string = "John Doe";
String string = "USA";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 58)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 1, true, (-45), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 58, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-45), "", arg4, arg5, "E&~")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 58);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 1, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-45), "", characterClass, simpleWeapon, "E&~");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 58);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2, true, true, -45, 1, true, -45, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -45, "", characterClass, simpleWeapon, "E&~");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 58), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, true, true, -45, 1, true, -45, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -45, "", characterClass, simpleWeapon, "E&~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 58;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, true, (-45), (CharacterClass) _int);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "i]Iv2";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "";
String string = "E&~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "E&~");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(17, true, false, (-106), (-619), true, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-2911), 1, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-106), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-4701), "RxUGwDk7", 1, 997)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 997, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(17, true, false, (-106), (-619), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea((-2911), 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-106), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-4701), "RxUGwDk7", 1, 997);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 997, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(17, true, false, -106, -619, true, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(-2911, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -106, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-4701, "RxUGwDk7", 1, 997);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 997, "John Doe", characterClass, simpleWeapon, "Heavy Blaster");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(17, true, false, -106, -619, true, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-2911, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -106, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-4701, "RxUGwDk7", 1, 997), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 997, "John Doe", characterClass, simpleWeapon, "Heavy Blaster"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 17;
boolean _boolean = true;
boolean _boolean = false;
boolean _boolean = true;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) _boolean, _int, true, 1, (CharacterClass) battleStatistics);
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "RxUGwDk7";
int _int = 1;
int _int = 997;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 997);
int _int = 997;
String string = "John Doe";
String string = "Heavy Blaster";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2040, 2040, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2040, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4080, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
        SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "Assault Rifle", 100, 2040);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "John Doe", characterClass, simpleWeapon, "123456789");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.isOnline(simpleCombatant, false);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "Assault Rifle", 100, 2040), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "John Doe", characterClass, simpleWeapon, "123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 2040;
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2040;
boolean _boolean = false;
boolean _boolean = false;
int _int = 2040;
int _int = 2040;
boolean _boolean = false;
int _int = 2040;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2040;
int _int = 2040;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2040;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2040;
String string = "Assault Rifle";
int _int = 100;
int _int = 2040;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4080;
String string = "John Doe";
String string = "123456789";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-7))
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-7), arg2, true)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-1))
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
battleStatistics.setRound((-1));
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-7, -7);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.setRound(-7);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1823, true, true, -7, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -7, simpleArea, true);
        battleStatistics.setRound(-1);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "M4A1", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "John Doe", characterClass, simpleWeapon, "US Army");
        battleStatistics.isOnline(simpleCombatant, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-7, -7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.setRound(-7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-7) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1823, true, true, -7, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -7, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-1) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "M4A1", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "John Doe", characterClass, simpleWeapon, "US Army"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
int _int = null;
battleStatistics.setRound(_int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _boolean);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = null;
battleStatistics.setRound(_int);
int _int = 2005;
String string = "M4A1";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
battleStatistics.isOnline(simpleCombatant, _boolean);

statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), false, false, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 25, " is now ", arg4, (Weapon) null, "GxfdB")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, (-1))
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, " is now ", characterClass, (Weapon) null, "GxfdB");
BattleStatistics battleStatistics = new BattleStatistics(0, (-1));
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(5, 3);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(-1, false, false, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, " is now ", characterClass, ((Weapon) (null)), "GxfdB");
        BattleStatistics battleStatistics = new BattleStatistics(0, -1);
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(5, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1, false, false, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, " is now ", characterClass, ((Weapon) (null)), "GxfdB"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, -1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 16
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 16
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = " is now ";
String string = "GxfdB";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "GxfdB");
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, (-1));
((BattleStatistics) simpleArea).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) simpleArea).targetNoOne(combatantSide);

statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 7, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 7, "fQ7<)o!-$G", arg4, (Weapon) null, "fQ7<)o!-$G")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), "&d{<r=l", arg4, (Weapon) null, "Nachbedingung nicht erf\u00C3\u00BCllt: _minDamage >= 0")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg0, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "fQ7<)o!-$G", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "&d{<r=l", characterClass, (Weapon) null, "Nachbedingung nicht erf\u00C3\u00BCllt: _minDamage >= 0");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Create a point and character class for the first combatant
        Point point1 = new Point(5, 6);
        CharacterClass characterClass1 = CharacterClass.GREENHORN;
        // Create a simple sector and area for the first combatant
        SimpleSector simpleSector1 = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass1);
        SimpleArea simpleArea1 = new SimpleArea(point1, simpleSector1);
        // Create a combatant side and state for the first combatant
        CombatantSide combatantSide1 = CombatantSide.DEFENDER;
        CombatantState combatantState1 = new CombatantState(simpleArea1, 7, simpleArea1, false);
        // Create a simple combatant for the first combatant
        SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide1, combatantState1, 7, "Greenhorn", characterClass1, ((Weapon) (null)), "Greenhorn");
        // Create a point and character class for the second combatant
        Point point2 = new Point(4, 3);
        CharacterClass characterClass2 = CharacterClass.BARBARIAN;
        // Create a simple sector and area for the second combatant
        SimpleSector simpleSector2 = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass2);
        SimpleArea simpleArea2 = new SimpleArea(point2, simpleSector2);
        // Create a combatant side and state for the second combatant
        CombatantSide combatantSide2 = CombatantSide.DEFENDER;
        CombatantState combatantState2 = new CombatantState(simpleArea2, 7, simpleArea2, false);
        // Create a simple combatant for the second combatant
        SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide2, combatantState2, 7, "Barbarian", characterClass2, ((Weapon) (null)), "Barbarian");
        // Create a battle statistics object and add the combatants to it
        BattleStatistics battleStatistics = new BattleStatistics();
        battleStatistics.aimsAt(simpleCombatant1, simpleCombatant2);
        battleStatistics.aimsAt(simpleCombatant2, simpleCombatant1);
        battleStatistics.targetNoOne(combatantSide1);
        battleStatistics.targetNoOne(combatantSide2);
    }
}
statement is: // Create a point and character class for the first combatant
Point point1 = new Point(5, 6), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass1 = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: // Create a simple sector and area for the first combatant
SimpleSector simpleSector1 = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea1 = new SimpleArea(point1, simpleSector1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a combatant side and state for the first combatant
CombatantSide combatantSide1 = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CombatantState combatantState1 = new CombatantState(simpleArea1, 7, simpleArea1, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a simple combatant for the first combatant
SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide1, combatantState1, 7, "Greenhorn", characterClass1, ((Weapon) (null)), "Greenhorn"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a point and character class for the second combatant
Point point2 = new Point(4, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass2 = CharacterClass.BARBARIAN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.BARBARIAN is CharacterClass
statement is: // Create a simple sector and area for the second combatant
SimpleSector simpleSector2 = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea2 = new SimpleArea(point2, simpleSector2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a combatant side and state for the second combatant
CombatantSide combatantSide2 = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CombatantState combatantState2 = new CombatantState(simpleArea2, 7, simpleArea2, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a simple combatant for the second combatant
SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide2, combatantState2, 7, "Barbarian", characterClass2, ((Weapon) (null)), "Barbarian"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a battle statistics object and add the combatants to it
BattleStatistics battleStatistics = new BattleStatistics(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant1, simpleCombatant2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant1, simpleCombatant2) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
statement is: battleStatistics.aimsAt(simpleCombatant2, simpleCombatant1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant2, simpleCombatant1) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
statement is: battleStatistics.targetNoOne(combatantSide1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide1) target is: battleStatistics method is: targetNoOne(CombatantSide)
statement is: battleStatistics.targetNoOne(combatantSide2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide2) target is: battleStatistics method is: targetNoOne(CombatantSide)
TestCase is: int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 7;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "Greenhorn";
String string = "Greenhorn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 7;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "Barbarian";
String string = "Barbarian";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "}F", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide attackerSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfSchmierOil(attackerSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfSchmierOil(attackerSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(attackerSide) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4, 4)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-702), false, false, 10, 60, true, 4, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((Point) null, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 4, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, arg1, 1, "Qv#|;n>", arg4, (Weapon) null, "Qv#|;n>")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-702), false, false, 10, 60, true, 4, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 1, "Qv#|;n>", characterClass, (Weapon) null, "Qv#|;n>");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4, 4);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(-702, false, false, 10, 60, true, 4, characterClass);
        SimpleArea simpleArea = new SimpleArea(new Point(5, -3), simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(CombatantSide.ATTACKER, combatantState, 1, "Aragorn", characterClass, Weapon.SWORD, "Aragorn");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-702, false, false, 10, 60, true, 4, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(new Point(5, -3), simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(CombatantSide.ATTACKER, combatantState, 1, "Aragorn", characterClass, Weapon.SWORD, "Aragorn"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 4;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = false;
boolean _boolean = false;
int _int = 10;
int _int = 60;
boolean _boolean = true;
int _int = 4;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 4, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) battleStatistics);
int _int = 4;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Aragorn";
String string = "Aragorn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "Qv#|;n>");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.switchedPosList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        battleStatistics.switchedPosList(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(((CombatantSide) (null))) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1192, 1)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
battleStatistics.critList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
        // Replace the null value with a more descriptive example
        battleStatistics.critList(ATTACKER);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1192, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Replace the null value with a more descriptive example
battleStatistics.critList(ATTACKER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace the null value with a more descriptive example
battleStatistics.critList(ATTACKER) target is: battleStatistics method is: critList()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1192;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1999, "}F", arg4, arg5, "")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 0)
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1999, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1999, "}F", characterClass, simpleWeapon, "");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1999, "}F", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 1999;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1999;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "}F", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.setRound(0);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.setRound(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(0) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) _int);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(60, 60)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(60)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(60, true, true, 60, 60, true, 60, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(60, 60, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 60, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(60, "", 0, 60)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 120, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(60, 60);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound(60);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(60, true, true, 60, 60, true, 60, characterClass);
SimpleArea simpleArea = new SimpleArea(60, 60, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 60, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(60, "", 0, 60);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 120, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 30);
        CombatantSide attackerSide = CombatantSide.ATTACKER;
        battleStatistics.setRound(20);
        CharacterClass greenhornClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(50, true, true, 30, 40, true, 60, greenhornClass);
        SimpleArea simpleArea = new SimpleArea(50, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 20, simpleArea, true);
        SimpleWeapon sword = new SimpleWeapon(50, "Wooden Sword", 10, 20);
        SimpleCombatant greenhorn = new SimpleCombatant(attackerSide, combatantState, 40, "Greenhorn", greenhornClass, sword, "Greenhorn's Sword");
        battleStatistics.isOnline(greenhorn, true);
        battleStatistics.turnOrder(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.setRound(20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(20) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CharacterClass greenhornClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, true, true, 30, 40, true, 60, greenhornClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 20, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon sword = new SimpleWeapon(50, "Wooden Sword", 10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant greenhorn = new SimpleCombatant(attackerSide, combatantState, 40, "Greenhorn", greenhornClass, sword, "Greenhorn's Sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(greenhorn, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(greenhorn, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(((CombatantSide) (null))) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 20;
((BattleStatistics) _int).setRound(_int);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 30;
int _int = 40;
boolean _boolean = true;
int _int = 60;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 20;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Wooden Sword";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 40;
String string = "Greenhorn";
String string = "Greenhorn's Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-7))
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "}F", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 10);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.setRound(10);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(100 = 200, true, true, -7, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 19, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005 - Sword, "This is a sword with a silver handle and a sharp blade.", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005 - Sword, "Attacker1", characterClass, simpleWeapon, "This is an attacker with a sword.");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.setRound(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(10) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(100 = 200, true, true, -7, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 19, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005 - Sword, "This is a sword with a silver handle and a sharp blade.", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005 - Sword, "Attacker1", characterClass, simpleWeapon, "This is an attacker with a sword."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _int);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 19;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "This is a sword with a silver handle and a sharp blade.";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 30);
String string = "Attacker1";
String string = "This is an attacker with a sword.";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-1))
statement is: getNotShootersPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound((-1));
battleStatistics.getNotShootersPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        battleStatistics.setRound(5);
        battleStatistics.getNotShootersPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(5) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.getNotShootersPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getNotShootersPerRound() target is: battleStatistics method is: getNotShootersPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getNotShootersPerRound()Ljava/util/Map;
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
((BattleStatistics) _int).setRound(_int);
((BattleStatistics) _int).getNotShootersPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 0, true, (-45), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", arg4, arg5, "de.outstare.fortbattleplayer.statistics.RoundStatistics")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 0, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the BattleStatistics class
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        CharacterClass characterClass = CharacterClass.ASSASSIN;// Changed to a more descriptive character class

        SimpleSector simpleSector = new SimpleSector(2, true, true, -45, 0, true, -45, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1);// Changed to a more descriptive weapon name

        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: // Improved test data for the BattleStatistics class
BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ASSASSIN// Changed to a more descriptive character class
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ASSASSIN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, true, true, -45, 0, true, -45, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1)// Changed to a more descriptive weapon name
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.RoundStatistics"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, true, (-45), (CharacterClass) _int);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "RxGwDk7";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "de.outstare.fortbattleplayer.statistics.RoundStatistics";
String string = "de.outstare.fortbattleplayer.statistics.RoundStatistics";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-7), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1823, true, true, 50, 673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "John Doe", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1823, true, true, 50, 673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "John Doe", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1823;
boolean _boolean = true;
boolean _boolean = true;
int _int = 50;
int _int = 673;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "}F", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4, 4)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(4, 4, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 4, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 8, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(10, false, false, 10, 10, false, 10, characterClass);
        SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "", 0, 10);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(10, false, false, 10, 10, false, 10, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "", 0, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
boolean _boolean = false;
boolean _boolean = false;
int _int = 10;
int _int = 10;
boolean _boolean = false;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "";
int _int = 0;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 8;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2030, 2030)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2030, 2030, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2030, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "", 0, 2030)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4060, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, characterClass);
SimpleArea simpleArea = new SimpleArea(2030, 2030, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2030, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "", 0, 2030);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4060, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, characterClass);
        SimpleArea simpleArea = new SimpleArea(2030, 2030, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2030, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "Awesome Sword", 1000, 2030);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4060, "Alex", characterClass, simpleWeapon, "I am the best!");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.combatantLifetime(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2030, 2030), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2030, 2030, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2030, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "Awesome Sword", 1000, 2030), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4060, "Alex", characterClass, simpleWeapon, "I am the best!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.combatantLifetime(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(simpleCombatant) target is: battleStatistics method is: combatantLifetime(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
TestCase is: int _int = 2030;
int _int = 2030;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2030;
boolean _boolean = false;
boolean _boolean = false;
int _int = 2030;
int _int = 2030;
boolean _boolean = false;
int _int = 2030;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2030;
int _int = 2030;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2030;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2030;
String string = "Awesome Sword";
int _int = 1000;
int _int = 2030;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4060;
String string = "Alex";
String string = "I am the best!";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-18), (-18))
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-18), (-18));
battleStatistics.combatantLifetime((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        battleStatistics.combatantLifetime(new Combatant("Alice", "Mage", 80));
        battleStatistics.combatantLifetime(new Combatant("Bob", "Warrior", 90));
        battleStatistics.combatantLifetime(new Combatant("Charlie", "Ranger", 70));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.combatantLifetime(new Combatant("Alice", "Mage", 80)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Alice", "Mage", 80)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.combatantLifetime(new Combatant("Bob", "Warrior", 90)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Bob", "Warrior", 90)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.combatantLifetime(new Combatant("Charlie", "Ranger", 70)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Charlie", "Ranger", 70)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 922)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.WeaponModCounter$BayonetCounter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.WeaponModCounter$BayonetCounter
statement code is: WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter()
statement is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 922);
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 922);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
        battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 922), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter) target is: battleStatistics method is: countWeaponMods(CombatantSide,WeaponModCounter.BayonetCounter)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 2;
int _int = 922;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = null;
((BattleStatistics) _int).countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), (String) null, arg4, arg5, "0lD[@Q#*|Q|Sf*b")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 1)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics("Large", "Large");
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, -1, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon("Assault Rifle", "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, ((String) (null)), characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics("Large", "Large"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, -1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("Assault Rifle", "de.outstare.fortbattleplayer.player.PlayerState", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, ((String) (null)), characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "Large";
String string = "Large";
BattleStatistics battleStatistics = new BattleStatistics((int) string, (int) string);
Point point = new Point();
int _int = 2040;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1), (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "Assault Rifle";
String string = "de.outstare.fortbattleplayer.player.PlayerState";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
String string = "0lD[@Q#*|Q|Sf*b";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (int) string, (String) null, (CharacterClass) point, (Weapon) _int, "0lD[@Q#*|Q|Sf*b");
int _int = 1;
((BattleStatistics) string).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) string).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), (String) null, arg4, arg5, "0lD[@Q#*|Q|Sf*b")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 1)
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, -1, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, ((String) (null)), characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
        int numShotsFired = 2;
        double damageDealt = 10.5;
        boolean attackerIsWorker = true;
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, numShotsFired);
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2040, 2040), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, -1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, ((String) (null)), characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int numShotsFired = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double damageDealt = 10.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean attackerIsWorker = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, numShotsFired), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, numShotsFired) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: double _double = 10.5
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 2040;
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 2040;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1), (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 3258;
String string = "de.outstare.fortbattleplayer.player.PlayerState";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "0lD[@Q#*|Q|Sf*b";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (int) string, (String) null, (CharacterClass) point, (Weapon) _int, "0lD[@Q#*|Q|Sf*b");
int _int = 2;
double _double = 10.5;
boolean _boolean = true;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "}F", arg4, arg5, "")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 0)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass);
        SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "F", characterClass, simpleWeapon, "");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1823, true, true, 0, -673, true, 258, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -19, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "F", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(258, 30, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-19), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2005, "}F", arg4, arg5, "")
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved(arg0, arg1)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-10, -10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-543, true, true, -27, -673, true, 108, characterClass);
        SimpleArea simpleArea = new SimpleArea(108, 30, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 45, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "ZS@`tr?DfP5k26", 0, 30);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "F", characterClass, simpleWeapon, "");
        battleStatistics.hasMoved(simpleCombatant, simpleArea);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-10, -10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-543, true, true, -27, -673, true, 108, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(108, 30, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 45, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "ZS@`tr?DfP5k26", 0, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "F", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(simpleCombatant, simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(simpleCombatant, simpleArea) target is: battleStatistics method is: hasMoved(SimpleCombatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 108;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _boolean);
int _int = 108;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 45;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2005;
String string = "ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, (-1), true, (-1), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2), arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 916, "", arg4, (Weapon) null, "fQ7<)o!-$G")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(13, 0)
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved(arg0, arg1)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, (-1), true, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 916, "", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Point point = new Point(1234, 5678);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(-1, false, true, 0, -1, true, -1, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 916, "Bob", characterClass, ((Weapon) (null)), "fQ7<)o!-$G");
        BattleStatistics battleStatistics = new BattleStatistics(13, 0);
        battleStatistics.hasMoved(simpleCombatant, simpleArea);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: Point point = new Point(1234, 5678), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1, false, true, 0, -1, true, -1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 916, "Bob", characterClass, ((Weapon) (null)), "fQ7<)o!-$G"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(13, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(simpleCombatant, simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(simpleCombatant, simpleArea) target is: battleStatistics method is: hasMoved(SimpleCombatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 14
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 14
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: boolean _boolean = false;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, (-1), true, (-1), (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 916;
String string = "Bob";
String string = "fQ7<)o!-$G";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");
int _int = 13;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) combatantState).hasMoved(simpleCombatant, simpleArea);
CombatantSide combatantSide = null;
((BattleStatistics) combatantState).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round((-7))
test data is: BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.round((-7));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(42, 13);
        battleStatistics.round(42);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(42, 13), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(42) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 42;
int _int = 13;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 42;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(3701)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
battleStatistics.round(3701);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
        battleStatistics.round(3701);
        // Improved test data
        BattleStatistics battleStatistics2 = new BattleStatistics(456, 9876);
        battleStatistics2.round(456);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(3701), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(3701) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
statement is: // Improved test data
BattleStatistics battleStatistics2 = new BattleStatistics(456, 9876), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics2.round(456), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics2.round(456) target is: battleStatistics2 method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: round(D)I
TestCase is: int _int = 3701;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3701;
((BattleStatistics) _int).round(_int);
int _int = 456;
int _int = 9876;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 456;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2383, 2383)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(0.0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2383, 2383);
battleStatistics.round(0.0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321);
        battleStatistics.round(3.14159);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(3.14159), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(3.14159) target is: battleStatistics method is: round(double)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 123456789;
int _int = 987654321;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
double _double = 3.14159;
((BattleStatistics) _int).round(_double);

statement is: javax.swing.TransferHandler(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.TransferHandler
statement code is: TransferHandler transferHandler = new TransferHandler("")
statement is: getDragImageOffset()Ljava/awt/Point; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.awt.Point
statement code is: Point dragImageOffset = transferHandler.getDragImageOffset()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 7, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 7, "", arg4, (Weapon) null, "")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2674), 0)
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TransferHandler transferHandler = new TransferHandler("");
        Point dragImageOffset = new Point(50, 100);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(360, true, true, 7, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, ((Weapon) (null)), "");
        BattleStatistics battleStatistics = new BattleStatistics(-2674, 0);
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.switchedPosList(combatantSide);
    }
}
statement is: TransferHandler transferHandler = new TransferHandler(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point dragImageOffset = new Point(50, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(360, true, true, 7, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, ((Weapon) (null)), ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(-2674, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 19
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 19
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "";
TransferHandler transferHandler = new TransferHandler(string);
int _int = 360;
boolean _boolean = true;
boolean _boolean = true;
int _int = 7;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, 0);
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: javax.swing.TransferHandler(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.TransferHandler
statement code is: TransferHandler transferHandler = new TransferHandler("")
statement is: getDragImageOffset()Ljava/awt/Point; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.awt.Point
statement code is: Point dragImageOffset = transferHandler.getDragImageOffset()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 7, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 7, "", arg4, (Weapon) null, "")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2674), 0)
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TransferHandler transferHandler = new TransferHandler("");
        Point dragImageOffset = new Point(0, 0);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, ((Weapon) (null)), "");
        BattleStatistics battleStatistics = new BattleStatistics(0, 123456);
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: TransferHandler transferHandler = new TransferHandler(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point dragImageOffset = new Point(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, ((Weapon) (null)), ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 123456), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 20
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 20
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "";
TransferHandler transferHandler = new TransferHandler(string);
int _int = 7;
boolean _boolean = false;
boolean _boolean = false;
int _int = 7;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
int _int = 0;
int _int = 123456;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(100, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (-53), true, 483, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((Point) null, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-53), "could not determine turn order for ", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 601, "could not determine turn order for ", arg4, arg5, ", maxDmg=")
statement is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isHit(arg0, 0, 601)
test data is: BattleStatistics battleStatistics = new BattleStatistics(100, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (-53), true, 483, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-53), "could not determine turn order for ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 601, "could not determine turn order for ", characterClass, simpleWeapon, ", maxDmg=");
battleStatistics.isHit(simpleCombatant, 0, 601);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 100, -53, true, 483, characterClass);
        SimpleArea simpleArea = new SimpleArea(((Point) (null)), simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-53, "Could not determine turn order for ", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 601, "Could not determine turn order for ", characterClass, simpleWeapon, ", maxDmg=");
        battleStatistics.isHit(simpleCombatant, 5, 483);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 100, -53, true, 483, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(((Point) (null)), simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-53, "Could not determine turn order for ", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 601, "Could not determine turn order for ", characterClass, simpleWeapon, ", maxDmg="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isHit(simpleCombatant, 5, 483), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isHit(simpleCombatant, 5, 483) target is: battleStatistics method is: isHit(SimpleCombatant,int,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V
TestCase is: int _int = 100;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
boolean _boolean = true;
int _int = 483;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 483, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Could not determine turn order for ";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
int _int = 601;
String string = "Could not determine turn order for ";
String string = ", maxDmg=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ", maxDmg=");
int _int = 5;
int _int = 483;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0)
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<de.outstare.fortbattleplayer.model.CombatantSide, java.util.concurrent.atomic.AtomicInteger>
statement code is: HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<de.outstare.fortbattleplayer.model.CombatantSide, de.outstare.fortbattleplayer.statistics.RoundStatistics>
statement code is: HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>()
statement is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.addAndResetRoundCounter(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashMap, hashMap);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 10);
        HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
        hashMap.put(ATTACKER, new AtomicInteger(5));
        hashMap.put(DEFENDER, new AtomicInteger(3));
        battleStatistics.addAndResetRoundCounter(hashMap, hashMap);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put(ATTACKER, new AtomicInteger(5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put(ATTACKER, new AtomicInteger(5)) target is: hashMap method is: put(AtomicInteger)
statement is: hashMap.put(DEFENDER, new AtomicInteger(3)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put(DEFENDER, new AtomicInteger(3)) target is: hashMap method is: put(AtomicInteger)
statement is: battleStatistics.addAndResetRoundCounter(hashMap, hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.addAndResetRoundCounter(hashMap, hashMap) target is: battleStatistics method is: addAndResetRoundCounter(HashMap,HashMap)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V
TestCase is: int _int = 50;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
((BattleStatistics) _int).addAndResetRoundCounter(hashMap, hashMap);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(780, 17)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2346), true, true, (-58), 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(780, 780, arg2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 17, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", arg4, arg5, "de.outstare.fortbattleplayer.statistics.BattleStatistics")
statement is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isAlive(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(780, 17);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2346), true, true, (-58), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(780, 780, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
battleStatistics.isAlive(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(780, 17);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(-2346, true, true, -58, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(780, 780, simpleSector);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
        battleStatistics.isAlive(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(780, 17), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2346, true, true, -58, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(780, 780, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.BattleStatistics"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive(simpleCombatant) target is: battleStatistics method is: isAlive(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 780;
int _int = 17;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 0, (CharacterClass) _int);
int _int = 780;
int _int = 780;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 17;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "RxUGwDk7";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.BattleStatistics";
String string = "de.outstare.fortbattleplayer.statistics.BattleStatistics";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
((BattleStatistics) _int).isAlive(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isDead((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.isDead(new Combatant("Alice", 25, "Sword"));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isDead(new Combatant("Alice", 25, "Sword")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isDead(new Combatant("Alice", 25, "Sword")) target is: battleStatistics method is: isDead(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isDead(combatant);

* test suite isTestSuite: 129
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), characterClass);
SimpleArea simpleArea = new SimpleArea((-1422), 2, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 6: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.totalSwaps(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics((-4778), (-4778));
battleStatistics.getFieldStatistics();
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(50, 50);
battleStatistics.getHitsPerRound();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(371, 371);
battleStatistics.getShotsPerRound();
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((-7));
battleStatistics.setRound((-1));
battleStatistics.setRound((-673));
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
Test 16: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2299, true, true, 2299, 2299, false, 2299, characterClass);
SimpleArea simpleArea = new SimpleArea(2299, 2299, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-674), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1666), "round statistics for players and shots differ!", 4598, 4598);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "round statistics for players and shots differ!", characterClass, simpleWeapon, " aims at ");
BattleStatistics battleStatistics = new BattleStatistics((-674), 4598);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound((-3208));
battleStatistics.setRound(1191);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.percentAbleToShoot(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 1, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 1614, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(151, 151);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, characterClass);
SimpleArea simpleArea = new SimpleArea(151, 151, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 151, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(151, "", 0, 151);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 302, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, characterClass);
SimpleArea simpleArea = new SimpleArea(3, 3, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 6, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfFettesOil((CombatantSide) null);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1823), "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 258, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, characterClass);
SimpleArea simpleArea = new SimpleArea(2063, 2063, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2063, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "", 0, 2063);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4126, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(2, 58);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 1, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-45), "", characterClass, simpleWeapon, "E&~");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(17, true, false, (-106), (-619), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea((-2911), 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-106), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-4701), "RxUGwDk7", 1, 997);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 997, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
battleStatistics.setRound((-1));
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 32: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, " is now ", characterClass, (Weapon) null, "GxfdB");
BattleStatistics battleStatistics = new BattleStatistics(0, (-1));
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 33: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "fQ7<)o!-$G", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "&d{<r=l", characterClass, (Weapon) null, "Nachbedingung nicht erf\u00C3\u00BCllt: _minDamage >= 0");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-702), false, false, 10, 60, true, 4, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 1, "Qv#|;n>", characterClass, (Weapon) null, "Qv#|;n>");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.switchedPosList((CombatantSide) null);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
battleStatistics.critList((CombatantSide) null);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1999, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.criticalHitDamage(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(60, 60);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound(60);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(60, true, true, 60, 60, true, 60, characterClass);
SimpleArea simpleArea = new SimpleArea(60, 60, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 60, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(60, "", 0, 60);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 120, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound((-1));
battleStatistics.getNotShootersPerRound();
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 0, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, characterClass);
SimpleArea simpleArea = new SimpleArea(2030, 2030, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2030, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "", 0, 2030);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4060, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics((-18), (-18));
battleStatistics.combatantLifetime((Combatant) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(2, 922);
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHits(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.getFieldStatistics();
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 55: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, (-1), true, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 916, "", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.round((-7));
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
battleStatistics.round(3701);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(2383, 2383);
battleStatistics.round(0.0);
Test 59: 
TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 60: 
TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(100, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (-53), true, 483, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-53), "could not determine turn order for ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 601, "could not determine turn order for ", characterClass, simpleWeapon, ", maxDmg=");
battleStatistics.isHit(simpleCombatant, 0, 601);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashMap, hashMap);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(780, 17);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2346), true, true, (-58), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(780, 780, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
battleStatistics.isAlive(simpleCombatant);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfBayonets((CombatantSide) null);

Test 66: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), (CharacterClass) 0);
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
((BattleStatistics)2276).numberOfShinyOil((CombatantSide) null);

Test 68: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)20).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).amountOfAttackBonus((CombatantSide) null);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(10000, 1500);
((BattleStatistics)10000).numberOfGraphitLubricants((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.totalSwaps((CombatantSide) null);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 100);
((BattleStatistics)3701).numberOfHipFlasks((CombatantSide) null);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).getHitsPerRound();

Test 74: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).criticalHits((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

Test 75: 
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(5, 5);
int _int = 5;
SimpleSector simpleSector = new SimpleSector(5, true, true, 5, 5, true, 5, (CharacterClass) battleStatistics);
int _int = 5;
int _int = 5;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 5;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "M16";
int _int = 0;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4158;
String string = "Red";
String string = "M16";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 76: 
BattleStatistics battleStatistics = new BattleStatistics(50, 10);
((BattleStatistics)50).amountOfDefenseBonus((CombatantSide) null);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(371, 371);
((BattleStatistics)371).getShotsPerRound();

Test 78: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((int) (Integer) null);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);

Test 79: 
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
int _int = 4;
((BattleStatistics)4).setRound(4);
int _int = 4;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4;
int _int = 4;
boolean _boolean = false;
int _int = 4;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 4;
int _int = 4;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 4;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4;
String string = "";
int _int = 0;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 8;
String string = "Offline Combatant 1";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Offline Combatant 2";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Online Combatant 1";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Online Combatant 2";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 80: 
int _int = 2299;
SimpleArea simpleArea = new SimpleArea(2299, 2299, (Sector) 2299);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "a sharp sword";
int _int = 4598;
int _int = 4598;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 4598);
String string = "Gorthok the Unyielding";
String string = " swings his sword at ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, " aims at ");
int _int = 4598;
BattleStatistics battleStatistics = new BattleStatistics(_int, 4598);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = null;
((BattleStatistics) _int).setRound(_int);
int _int = 1191;
((BattleStatistics) _int).setRound(_int);

Test 81: 
int _int = 1234567890;
BattleStatistics battleStatistics = new BattleStatistics(1234567890, 1234567890);
int _int = 1234567890;
SimpleSector simpleSector = new SimpleSector(1234567890, true, true, 1234567890, 1234567890, true, 1234567890, (CharacterClass) battleStatistics);
int _int = 1234567890;
int _int = 1234567890;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234567890;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234567890;
String string = "M16A2";
double _double = 0.5;
int _int = 1234567890;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, _int);
int _int = 4158;
String string = "John Doe";
String string = "US";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 82: 
int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
SimpleSector simpleSector = new SimpleSector(15, false, false, 3, 6, true, 7, (CharacterClass) 20);
int _int = 25;
int _int = 4087;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 83: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 84: 
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2056;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2056;
String string = "";
int _int = 0;
int _int = 2056;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4112;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 85: 
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2056;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2056;
String string = "M16A2";
int _int = 2000;
int _int = 300;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4112;
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 86: 
int _int = 151;
BattleStatistics battleStatistics = new BattleStatistics(151, 151);
int _int = 151;
SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, (CharacterClass) battleStatistics);
int _int = 151;
int _int = 151;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 151;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 151;
String string = "Energy Blade";
int _int = 0;
int _int = 151;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 302;
String string = "Lord Zekk";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 87: 
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
int _int = 3;
SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, (CharacterClass) battleStatistics);
int _int = 3;
int _int = 3;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 3;
String string = "";
int _int = 0;
int _int = 3;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 6;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

Test 88: 
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
int _int = 2040;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, (CharacterClass) battleStatistics);
int _int = 2040;
int _int = 2040;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2040;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2040;
String string = "Gauss Rifle";
int _int = 500;
int _int = 2040;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1234567890;
String string = "Bob the Worker";
String string = "Red";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 89: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 30);
int _int = 7;
SimpleSector simpleSector = new SimpleSector(1823, true, true, 7, (int) true, (boolean) 258, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 7;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1823;
String string = "Heavy Crossbow";
int _int = 50;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 258;
String string = "Arthur";
String string = "Avenger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 90: 
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
String string = "M4 rifle";
String string = "Gun";
int _int = 100;
int _int = 2056;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
String string = "4112";
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) string, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 91: 
int _int = 2063;
BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
int _int = 2063;
SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, (CharacterClass) battleStatistics);
int _int = 2063;
int _int = 2063;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2063;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2063;
String string = "Assault Rifle";
int _int = 500;
int _int = 1000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4126;
String string = "John Doe";
String string = "USA";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 92: 
int _int = 100;
int _int = 58;
BattleStatistics battleStatistics = new BattleStatistics(100, 58);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(2, true, true, 1, (int) true, true, (-45), (CharacterClass) 58);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "i]Iv2";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "";
String string = "E&~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "E&~");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 93: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 17;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(17, true, false, (int) true, 1, true, 1, (CharacterClass) battleStatistics);
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "RxUGwDk7";
int _int = 1;
int _int = 997;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 997);
int _int = 997;
String string = "John Doe";
String string = "Heavy Blaster";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 94: 
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
int _int = 2040;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, (CharacterClass) battleStatistics);
int _int = 2040;
int _int = 2040;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2040;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2040;
String string = "Assault Rifle";
int _int = 100;
int _int = 2040;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4080;
String string = "John Doe";
String string = "123456789";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 95: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((int) (Integer) null);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _boolean);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = null;
battleStatistics.setRound(_int);
int _int = 2005;
String string = "M4A1";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
battleStatistics.isOnline(simpleCombatant, _boolean);

Test 96: 
int _int = 0;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 0, 0, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = " is now ";
String string = "GxfdB";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "GxfdB");
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, (-1));
((BattleStatistics) simpleArea).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) simpleArea).targetNoOne(combatantSide);

Test 97: 
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "Greenhorn";
String string = "Greenhorn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 7;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "Barbarian";
String string = "Barbarian";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");

Test 98: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

Test 99: 
int _int = 4;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 10, 60, (int) true, (boolean) 4, 4, (CharacterClass) 4);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) battleStatistics);
int _int = 4;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Aragorn";
String string = "Aragorn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "Qv#|;n>");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);

Test 100: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).switchedPosList((CombatantSide) null);

Test 101: 
BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
((BattleStatistics)1192).critList((CombatantSide) null);

Test 102: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).criticalHitDamage((CombatantSide) null);

Test 103: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 1999;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1999;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 104: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
((BattleStatistics)0).setRound(0);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) _int);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 105: 
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(50, 30);
int _int = 20;
((BattleStatistics)50).setRound(20);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 30;
int _int = 40;
boolean _boolean = true;
int _int = 60;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 20;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Wooden Sword";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 40;
String string = "Greenhorn";
String string = "Greenhorn's Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 106: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
((BattleStatistics)10).setRound(10);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _int);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 19;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "This is a sword with a silver handle and a sharp blade.";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 30);
String string = "Attacker1";
String string = "This is an attacker with a sword.";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 107: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).setRound(5);
((BattleStatistics) _int).getNotShootersPerRound();

Test 108: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2, true, true, 0, (int) true, true, (-45), (CharacterClass) 2);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "RxGwDk7";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "de.outstare.fortbattleplayer.statistics.RoundStatistics";
String string = "de.outstare.fortbattleplayer.statistics.RoundStatistics";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 109: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 20);
int _int = 50;
SimpleSector simpleSector = new SimpleSector(1823, true, true, 50, 673, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 110: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 111: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(10, false, false, 10, 10, false, 10, (CharacterClass) battleStatistics);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "";
int _int = 0;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 8;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 112: 
int _int = 2030;
BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
int _int = 2030;
SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, (CharacterClass) battleStatistics);
int _int = 2030;
int _int = 2030;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2030;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2030;
String string = "Awesome Sword";
int _int = 1000;
int _int = 2030;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4060;
String string = "Alex";
String string = "I am the best!";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 113: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).combatantLifetime((Combatant) null);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

Test 114: 
BattleStatistics battleStatistics = new BattleStatistics(2, 922);
((BattleStatistics)2).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 115: 
String string = "Large";
BattleStatistics battleStatistics = new BattleStatistics((int) "Large", (int) "Large");
Point point = new Point();
int _int = 2040;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1), (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "Assault Rifle";
String string = "de.outstare.fortbattleplayer.player.PlayerState";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
String string = "0lD[@Q#*|Q|Sf*b";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (int) string, (String) null, (CharacterClass) point, (Weapon) _int, "0lD[@Q#*|Q|Sf*b");
int _int = 1;
((BattleStatistics) string).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) string).critList(combatantSide);

Test 116: 
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
Point point = new Point();
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 3258;
String string = "de.outstare.fortbattleplayer.player.PlayerState";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "0lD[@Q#*|Q|Sf*b";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (int) string, (String) null, (CharacterClass) point, (Weapon) _int, "0lD[@Q#*|Q|Sf*b");
int _int = 2;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

Test 117: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 108, (-673), true, 258, (CharacterClass) true);
int _int = 108;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 45;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2005;
String string = "ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

Test 119: 
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 0, (int) true, (-1), true, (-1), (CharacterClass) true);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 916;
String string = "Bob";
String string = "fQ7<)o!-$G";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");
int _int = 13;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) combatantState).hasMoved(simpleCombatant, simpleArea);
CombatantSide combatantSide = null;
((BattleStatistics) combatantState).numberOfMovesPerPlayer(combatantSide);

Test 120: 
BattleStatistics battleStatistics = new BattleStatistics(42, 13);
((BattleStatistics)42).round(42);

Test 121: 
int _int = 3701;
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
((BattleStatistics)3701).round(3701);
int _int = 456;
int _int = 9876;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 456;
((BattleStatistics) _int).round(_int);

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321);
((BattleStatistics)123456789).round(3.14159);

Test 123: 
TransferHandler transferHandler = new TransferHandler("");
int _int = 360;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(360, true, true, 7, 0, false, 0, (CharacterClass) 360);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, 0);
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 124: 
TransferHandler transferHandler = new TransferHandler("");
int _int = 7;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 0, false, 0, (CharacterClass) 7);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
int _int = 0;
int _int = 123456;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 125: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 0);
int _int = 0;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (int) true, (boolean) 483, 483, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Could not determine turn order for ";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
int _int = 601;
String string = "Could not determine turn order for ";
String string = ", maxDmg=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ", maxDmg=");
int _int = 5;
int _int = 483;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);

Test 126: 
BattleStatistics battleStatistics = new BattleStatistics(50, 10);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
((BattleStatistics)50).addAndResetRoundCounter(hashMap, hashMap);

Test 127: 
int _int = 780;
BattleStatistics battleStatistics = new BattleStatistics(780, 17);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 0, true, 0, (CharacterClass) 17);
int _int = 780;
int _int = 780;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 17;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "RxUGwDk7";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.BattleStatistics";
String string = "de.outstare.fortbattleplayer.statistics.BattleStatistics";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
((BattleStatistics) _int).isAlive(simpleCombatant);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).isDead((Combatant) null);


* Generated after the refinement and before minimization 129 tests with total length 1430
* test suite isTestSuite: 129
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), characterClass);
SimpleArea simpleArea = new SimpleArea((-1422), 2, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 6: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.totalSwaps(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics((-4778), (-4778));
battleStatistics.getFieldStatistics();
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(50, 50);
battleStatistics.getHitsPerRound();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(371, 371);
battleStatistics.getShotsPerRound();
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((-7));
battleStatistics.setRound((-1));
battleStatistics.setRound((-673));
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
Test 16: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2299, true, true, 2299, 2299, false, 2299, characterClass);
SimpleArea simpleArea = new SimpleArea(2299, 2299, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-674), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1666), "round statistics for players and shots differ!", 4598, 4598);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "round statistics for players and shots differ!", characterClass, simpleWeapon, " aims at ");
BattleStatistics battleStatistics = new BattleStatistics((-674), 4598);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound((-3208));
battleStatistics.setRound(1191);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.percentAbleToShoot(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 1, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 1614, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(151, 151);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, characterClass);
SimpleArea simpleArea = new SimpleArea(151, 151, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 151, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(151, "", 0, 151);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 302, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, characterClass);
SimpleArea simpleArea = new SimpleArea(3, 3, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 6, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfFettesOil((CombatantSide) null);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1823), "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 258, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, characterClass);
SimpleArea simpleArea = new SimpleArea(2063, 2063, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2063, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "", 0, 2063);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4126, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(2, 58);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 1, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-45), "", characterClass, simpleWeapon, "E&~");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(17, true, false, (-106), (-619), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea((-2911), 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-106), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-4701), "RxUGwDk7", 1, 997);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 997, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
battleStatistics.setRound((-1));
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 32: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, " is now ", characterClass, (Weapon) null, "GxfdB");
BattleStatistics battleStatistics = new BattleStatistics(0, (-1));
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 33: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "fQ7<)o!-$G", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "&d{<r=l", characterClass, (Weapon) null, "Nachbedingung nicht erf\u00C3\u00BCllt: _minDamage >= 0");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-702), false, false, 10, 60, true, 4, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 1, "Qv#|;n>", characterClass, (Weapon) null, "Qv#|;n>");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.switchedPosList((CombatantSide) null);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
battleStatistics.critList((CombatantSide) null);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1999, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.criticalHitDamage(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(60, 60);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound(60);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(60, true, true, 60, 60, true, 60, characterClass);
SimpleArea simpleArea = new SimpleArea(60, 60, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 60, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(60, "", 0, 60);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 120, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound((-1));
battleStatistics.getNotShootersPerRound();
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 0, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, characterClass);
SimpleArea simpleArea = new SimpleArea(2030, 2030, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2030, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "", 0, 2030);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4060, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics((-18), (-18));
battleStatistics.combatantLifetime((Combatant) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(2, 922);
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHits(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.getFieldStatistics();
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 55: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, (-1), true, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 916, "", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.round((-7));
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
battleStatistics.round(3701);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(2383, 2383);
battleStatistics.round(0.0);
Test 59: 
TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 60: 
TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(100, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (-53), true, 483, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-53), "could not determine turn order for ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 601, "could not determine turn order for ", characterClass, simpleWeapon, ", maxDmg=");
battleStatistics.isHit(simpleCombatant, 0, 601);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashMap, hashMap);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(780, 17);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2346), true, true, (-58), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(780, 780, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
battleStatistics.isAlive(simpleCombatant);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfBayonets((CombatantSide) null);

Test 66: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), (CharacterClass) 0);
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
((BattleStatistics)2276).numberOfShinyOil((CombatantSide) null);

Test 68: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)20).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).amountOfAttackBonus((CombatantSide) null);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(10000, 1500);
((BattleStatistics)10000).numberOfGraphitLubricants((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.totalSwaps((CombatantSide) null);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 100);
((BattleStatistics)3701).numberOfHipFlasks((CombatantSide) null);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).getHitsPerRound();

Test 74: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).criticalHits((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

Test 75: 
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(5, 5);
int _int = 5;
SimpleSector simpleSector = new SimpleSector(5, true, true, 5, 5, true, 5, (CharacterClass) battleStatistics);
int _int = 5;
int _int = 5;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 5;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "M16";
int _int = 0;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4158;
String string = "Red";
String string = "M16";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 76: 
BattleStatistics battleStatistics = new BattleStatistics(50, 10);
((BattleStatistics)50).amountOfDefenseBonus((CombatantSide) null);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(371, 371);
((BattleStatistics)371).getShotsPerRound();

Test 78: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((int) (Integer) null);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);

Test 79: 
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
int _int = 4;
((BattleStatistics)4).setRound(4);
int _int = 4;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4;
int _int = 4;
boolean _boolean = false;
int _int = 4;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 4;
int _int = 4;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 4;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4;
String string = "";
int _int = 0;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 8;
String string = "Offline Combatant 1";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Offline Combatant 2";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Online Combatant 1";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 8;
String string = "Online Combatant 2";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 80: 
int _int = 2299;
SimpleArea simpleArea = new SimpleArea(2299, 2299, (Sector) 2299);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "a sharp sword";
int _int = 4598;
int _int = 4598;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 4598);
String string = "Gorthok the Unyielding";
String string = " swings his sword at ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, " aims at ");
int _int = 4598;
BattleStatistics battleStatistics = new BattleStatistics(_int, 4598);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = null;
((BattleStatistics) _int).setRound(_int);
int _int = 1191;
((BattleStatistics) _int).setRound(_int);

Test 81: 
int _int = 1234567890;
BattleStatistics battleStatistics = new BattleStatistics(1234567890, 1234567890);
int _int = 1234567890;
SimpleSector simpleSector = new SimpleSector(1234567890, true, true, 1234567890, 1234567890, true, 1234567890, (CharacterClass) battleStatistics);
int _int = 1234567890;
int _int = 1234567890;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234567890;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234567890;
String string = "M16A2";
double _double = 0.5;
int _int = 1234567890;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, _int);
int _int = 4158;
String string = "John Doe";
String string = "US";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 82: 
int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
SimpleSector simpleSector = new SimpleSector(15, false, false, 3, 6, true, 7, (CharacterClass) 20);
int _int = 25;
int _int = 4087;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 83: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 84: 
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2056;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2056;
String string = "";
int _int = 0;
int _int = 2056;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4112;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 85: 
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2056;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2056;
String string = "M16A2";
int _int = 2000;
int _int = 300;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4112;
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 86: 
int _int = 151;
BattleStatistics battleStatistics = new BattleStatistics(151, 151);
int _int = 151;
SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, (CharacterClass) battleStatistics);
int _int = 151;
int _int = 151;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 151;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 151;
String string = "Energy Blade";
int _int = 0;
int _int = 151;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 302;
String string = "Lord Zekk";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 87: 
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
int _int = 3;
SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, (CharacterClass) battleStatistics);
int _int = 3;
int _int = 3;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 3;
String string = "";
int _int = 0;
int _int = 3;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 6;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

Test 88: 
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
int _int = 2040;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, (CharacterClass) battleStatistics);
int _int = 2040;
int _int = 2040;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2040;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2040;
String string = "Gauss Rifle";
int _int = 500;
int _int = 2040;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1234567890;
String string = "Bob the Worker";
String string = "Red";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 89: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 30);
int _int = 7;
SimpleSector simpleSector = new SimpleSector(1823, true, true, 7, (int) true, (boolean) 258, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 7;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1823;
String string = "Heavy Crossbow";
int _int = 50;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 258;
String string = "Arthur";
String string = "Avenger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 90: 
int _int = 2056;
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
int _int = 2056;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, (CharacterClass) battleStatistics);
int _int = 2056;
int _int = 2056;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
String string = "M4 rifle";
String string = "Gun";
int _int = 100;
int _int = 2056;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
String string = "4112";
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) string, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 91: 
int _int = 2063;
BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
int _int = 2063;
SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, (CharacterClass) battleStatistics);
int _int = 2063;
int _int = 2063;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2063;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2063;
String string = "Assault Rifle";
int _int = 500;
int _int = 1000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4126;
String string = "John Doe";
String string = "USA";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 92: 
int _int = 100;
int _int = 58;
BattleStatistics battleStatistics = new BattleStatistics(100, 58);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(2, true, true, 1, (int) true, true, (-45), (CharacterClass) 58);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "i]Iv2";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "";
String string = "E&~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "E&~");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 93: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 17;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(17, true, false, (int) true, 1, true, 1, (CharacterClass) battleStatistics);
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "RxUGwDk7";
int _int = 1;
int _int = 997;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 997);
int _int = 997;
String string = "John Doe";
String string = "Heavy Blaster";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 94: 
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
int _int = 2040;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, (CharacterClass) battleStatistics);
int _int = 2040;
int _int = 2040;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2040;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2040;
String string = "Assault Rifle";
int _int = 100;
int _int = 2040;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4080;
String string = "John Doe";
String string = "123456789";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 95: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((int) (Integer) null);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _boolean);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = null;
battleStatistics.setRound(_int);
int _int = 2005;
String string = "M4A1";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "John Doe";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
battleStatistics.isOnline(simpleCombatant, _boolean);

Test 96: 
int _int = 0;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 0, 0, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = " is now ";
String string = "GxfdB";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "GxfdB");
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, (-1));
((BattleStatistics) simpleArea).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) simpleArea).targetNoOne(combatantSide);

Test 97: 
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "Greenhorn";
String string = "Greenhorn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 7;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "Barbarian";
String string = "Barbarian";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");

Test 98: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

Test 99: 
int _int = 4;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 10, 60, (int) true, (boolean) 4, 4, (CharacterClass) 4);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) battleStatistics);
int _int = 4;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Aragorn";
String string = "Aragorn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "Qv#|;n>");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);

Test 100: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).switchedPosList((CombatantSide) null);

Test 101: 
BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
((BattleStatistics)1192).critList((CombatantSide) null);

Test 102: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).criticalHitDamage((CombatantSide) null);

Test 103: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 1999;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1999;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 104: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
((BattleStatistics)0).setRound(0);
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 258, (CharacterClass) _int);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 105: 
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(50, 30);
int _int = 20;
((BattleStatistics)50).setRound(20);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 30;
int _int = 40;
boolean _boolean = true;
int _int = 60;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 20;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Wooden Sword";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 40;
String string = "Greenhorn";
String string = "Greenhorn's Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 106: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
((BattleStatistics)10).setRound(10);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 258;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-673), true, 258, (CharacterClass) _int);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 19;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "This is a sword with a silver handle and a sharp blade.";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 30);
String string = "Attacker1";
String string = "This is an attacker with a sword.";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 107: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).setRound(5);
((BattleStatistics) _int).getNotShootersPerRound();

Test 108: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2, true, true, 0, (int) true, true, (-45), (CharacterClass) 2);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "RxGwDk7";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "de.outstare.fortbattleplayer.statistics.RoundStatistics";
String string = "de.outstare.fortbattleplayer.statistics.RoundStatistics";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 109: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 20);
int _int = 50;
SimpleSector simpleSector = new SimpleSector(1823, true, true, 50, 673, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 110: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "{ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "}F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 111: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(10, false, false, 10, 10, false, 10, (CharacterClass) battleStatistics);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "";
int _int = 0;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 8;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 112: 
int _int = 2030;
BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
int _int = 2030;
SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, (CharacterClass) battleStatistics);
int _int = 2030;
int _int = 2030;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2030;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2030;
String string = "Awesome Sword";
int _int = 1000;
int _int = 2030;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4060;
String string = "Alex";
String string = "I am the best!";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 113: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).combatantLifetime((Combatant) null);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

Test 114: 
BattleStatistics battleStatistics = new BattleStatistics(2, 922);
((BattleStatistics)2).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 115: 
String string = "Large";
BattleStatistics battleStatistics = new BattleStatistics((int) "Large", (int) "Large");
Point point = new Point();
int _int = 2040;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1), (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "Assault Rifle";
String string = "de.outstare.fortbattleplayer.player.PlayerState";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
String string = "0lD[@Q#*|Q|Sf*b";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (int) string, (String) null, (CharacterClass) point, (Weapon) _int, "0lD[@Q#*|Q|Sf*b");
int _int = 1;
((BattleStatistics) string).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) string).critList(combatantSide);

Test 116: 
int _int = 2040;
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
Point point = new Point();
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 3258;
String string = "de.outstare.fortbattleplayer.player.PlayerState";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "0lD[@Q#*|Q|Sf*b";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (int) string, (String) null, (CharacterClass) point, (Weapon) _int, "0lD[@Q#*|Q|Sf*b");
int _int = 2;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

Test 117: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 258, true, 258, (CharacterClass) battleStatistics);
int _int = 258;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 2005;
String string = "ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 108, (-673), true, 258, (CharacterClass) true);
int _int = 108;
int _int = 30;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 45;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2005;
String string = "ZS@`tr?DfP5k26";
int _int = 0;
int _int = 30;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2005;
String string = "F";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

Test 119: 
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 0, (int) true, (-1), true, (-1), (CharacterClass) true);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 916;
String string = "Bob";
String string = "fQ7<)o!-$G";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _boolean, (Weapon) null, "fQ7<)o!-$G");
int _int = 13;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) combatantState).hasMoved(simpleCombatant, simpleArea);
CombatantSide combatantSide = null;
((BattleStatistics) combatantState).numberOfMovesPerPlayer(combatantSide);

Test 120: 
BattleStatistics battleStatistics = new BattleStatistics(42, 13);
((BattleStatistics)42).round(42);

Test 121: 
int _int = 3701;
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
((BattleStatistics)3701).round(3701);
int _int = 456;
int _int = 9876;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 456;
((BattleStatistics) _int).round(_int);

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321);
((BattleStatistics)123456789).round(3.14159);

Test 123: 
TransferHandler transferHandler = new TransferHandler("");
int _int = 360;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(360, true, true, 7, 0, false, 0, (CharacterClass) 360);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, 0);
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 124: 
TransferHandler transferHandler = new TransferHandler("");
int _int = 7;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 0, false, 0, (CharacterClass) 7);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 7;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 7;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
int _int = 0;
int _int = 123456;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 125: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 0);
int _int = 0;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (int) true, (boolean) 483, 483, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Could not determine turn order for ";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
int _int = 601;
String string = "Could not determine turn order for ";
String string = ", maxDmg=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ", maxDmg=");
int _int = 5;
int _int = 483;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);

Test 126: 
BattleStatistics battleStatistics = new BattleStatistics(50, 10);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
((BattleStatistics)50).addAndResetRoundCounter(hashMap, hashMap);

Test 127: 
int _int = 780;
BattleStatistics battleStatistics = new BattleStatistics(780, 17);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 0, (int) true, 0, true, 0, (CharacterClass) 17);
int _int = 780;
int _int = 780;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 17;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "RxUGwDk7";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.BattleStatistics";
String string = "de.outstare.fortbattleplayer.statistics.BattleStatistics";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
((BattleStatistics) _int).isAlive(simpleCombatant);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).isDead((Combatant) null);


* Minimizing test suite
* test suite isTestSuite: 68
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 0, 2, false, (-1422), characterClass);
SimpleArea simpleArea = new SimpleArea((-1422), 2, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1999, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1999, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.criticalHitDamage(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(100, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, (-53), true, 483, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-53), "could not determine turn order for ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 601, "could not determine turn order for ", characterClass, simpleWeapon, ", maxDmg=");
battleStatistics.isHit(simpleCombatant, 0, 601);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 5: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.totalSwaps((CombatantSide) null);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 1, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 1614, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-4778), (-4778));
battleStatistics.getFieldStatistics();
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(780, 17);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2346), true, true, (-58), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(780, 780, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxUGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
battleStatistics.isAlive(simpleCombatant);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(50, 50);
battleStatistics.getHitsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.round((-7));
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(371, 371);
battleStatistics.getShotsPerRound();
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
battleStatistics.setRound((-7));
battleStatistics.setRound((-1));
battleStatistics.setRound((-673));
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
Test 22: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2299, true, true, 2299, 2299, false, 2299, characterClass);
SimpleArea simpleArea = new SimpleArea(2299, 2299, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-674), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1666), "round statistics for players and shots differ!", 4598, 4598);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "round statistics for players and shots differ!", characterClass, simpleWeapon, " aims at ");
BattleStatistics battleStatistics = new BattleStatistics((-674), 4598);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound((-3208));
battleStatistics.setRound(1191);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(2030, 2030);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2030, false, false, 2030, 2030, false, 2030, characterClass);
SimpleArea simpleArea = new SimpleArea(2030, 2030, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2030, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2030, "", 0, 2030);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4060, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics((-18), (-18));
battleStatistics.combatantLifetime((Combatant) null);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 1, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 1614, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(151, 151);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(151, false, false, 151, 151, false, 151, characterClass);
SimpleArea simpleArea = new SimpleArea(151, 151, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 151, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(151, "", 0, 151);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 302, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(3, false, false, 3, 3, false, 3, characterClass);
SimpleArea simpleArea = new SimpleArea(3, 3, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3, "", 0, 3);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 6, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfFettesOil((CombatantSide) null);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1823), "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 258, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(2056, 2056);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2056, true, true, 2056, 2056, true, 2056, characterClass);
SimpleArea simpleArea = new SimpleArea(2056, 2056, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2056, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2056, "", 0, 2056);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4112, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(17, true, false, (-106), (-619), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea((-2911), 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-106), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-4701), "RxUGwDk7", 1, 997);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 997, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(2, 58);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 1, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i]Iv2", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-45), "", characterClass, simpleWeapon, "E&~");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(2063, 2063);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2063, true, true, 2063, 2063, true, 2063, characterClass);
SimpleArea simpleArea = new SimpleArea(2063, 2063, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2063, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2063, "", 0, 2063);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4126, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, false, false, 2040, 2040, false, 2040, characterClass);
SimpleArea simpleArea = new SimpleArea(2040, 2040, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2040, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2040, "", 0, 2040);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4080, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
battleStatistics.setRound((-1));
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 40: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, " is now ", characterClass, (Weapon) null, "GxfdB");
BattleStatistics battleStatistics = new BattleStatistics(0, (-1));
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 41: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "fQ7<)o!-$G", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "&d{<r=l", characterClass, (Weapon) null, "Nachbedingung nicht erf\u00C3\u00BCllt: _minDamage >= 0");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-702), false, false, 10, 60, true, 4, characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 1, "Qv#|;n>", characterClass, (Weapon) null, "Qv#|;n>");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 45: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.switchedPosList(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.switchedPosList((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(1192, 1);
battleStatistics.critList((CombatantSide) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.setRound(0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(60, 60);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound(60);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(60, true, true, 60, 60, true, 60, characterClass);
SimpleArea simpleArea = new SimpleArea(60, 60, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 60, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(60, "", 0, 60);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 120, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.setRound((-7));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound((-1));
battleStatistics.getNotShootersPerRound();
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, true, true, (-45), 0, true, (-45), characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "RxGwDk7", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.RoundStatistics");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics((-7), (-7));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, (-7), (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-7), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(4, false, false, 4, 4, false, 4, characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 0, 4);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(2, 922);
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(2040, 2040);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2040, true, false, 0, 1, false, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(3258, "de.outstare.fortbattleplayer.player.PlayerState", 1, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), (String) null, characterClass, simpleWeapon, "0lD[@Q#*|Q|Sf*b");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHits(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1823), true, true, 0, (-673), true, 258, characterClass);
SimpleArea simpleArea = new SimpleArea(258, 30, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-19), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2005, "{ZS@`tr?DfP5k26", 0, 30);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2005, "}F", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.getFieldStatistics();
Test 62: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, (-1), true, (-1), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 916, "", characterClass, (Weapon) null, "fQ7<)o!-$G");
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
battleStatistics.hasMoved(simpleCombatant, simpleArea);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(2079, 2079);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2079, true, true, 2079, 2079, true, 2079, characterClass);
SimpleArea simpleArea = new SimpleArea(2079, 2079, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2079, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(2079, "", 0, 2079);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4158, "", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.percentAbleToShoot(combatantSide);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(3701, 0);
battleStatistics.round(3701);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(2383, 2383);
battleStatistics.round(0.0);
Test 66: 
TransferHandler transferHandler = new TransferHandler("");
Point dragImageOffset = transferHandler.getDragImageOffset();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 7, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(dragImageOffset, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 7, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 7, "", characterClass, (Weapon) null, "");
BattleStatistics battleStatistics = new BattleStatistics((-2674), 0);
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 67: 
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
// Undeclared exception!
try { 
  ((BattleStatistics)50).addAndResetRoundCounter(hashMap, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 156
* Number of covered goals: 140
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 105
* Number of covered goals: 60
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 156
* Number of covered goals: 140
* Generated 68 tests with total length 482
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfBayonets = battleStatistics.numberOfBayonets(arg0);
assertEquals(0, numberOfBayonets);


** It was a parseable test case! 
refined test name is: testNumberOfBayonetsNoAttackerHasUsedABayonet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg2 = new SimpleSector(2, false, false, 0, 2, false, (-1422), arg7);
SimpleArea arg1 = new SimpleArea((-1422), 2, arg2);
battleStatistics.newDestination((Combatant) null, arg1);
assertEquals(2, arg1.getHeight());


** It was a parseable test case! 
refined test name is: testBattleStatisticsNewDestinationSetsHeight
* Compiling Tests
refined test name is: testNewDestinationSetsHeight
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2276, 2276);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0);
assertEquals(0, numberOfShinyOil);


** It was a parseable test case! 
refined test name is: testNumberOfShinyOilonDefenderSidewithNoShinyOil
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0);
assertEquals(0, numberOfLoadingChamerOrEnhancedPatrons);


** It was a parseable test case! 
* Computation finished
