* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.model.impl.SimpleSector
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 5844
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:44:21.692 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:44:21.701 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:44:21.702 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:44:21.784 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:44:22.130 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:44:22.132 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.model.impl.SimpleSector
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 308
* Using seed 1710294259479
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 134 / 308
[Progress:>                             0%] [Cov:=========================>         72%][Progress:>                             0%] [Cov:=========================>         74%][Progress:>                             0%] [Cov:==========================>        77%][Progress:>                             1%] [Cov:============================>      80%][Progress:>                             1%] [Cov:============================>      80%][Progress:>                             1%] [Cov:============================>      80%][Progress:>                             1%] [Cov:============================>      80%][Progress:>                             1%] [Cov:============================>      80%][MASTER] 01:44:29.320 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:>                             2%] [Cov:============================>      82%][Progress:>                             2%] [Cov:============================>      82%][Progress:>                             2%] [Cov:=============================>     84%][Progress:>                             2%] [Cov:==============================>    86%][Progress:>                             2%] [Cov:==============================>    86%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             2%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:===============================>   90%][Progress:>                             3%] [Cov:===============================>   90%][Progress:>                             3%] [Cov:===============================>   90%][Progress:>                             3%] [Cov:===============================>   90%][Progress:>                             3%] [Cov:===============================>   90%][Progress:>                             3%] [Cov:===============================>   90%][Progress:>                             3%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:==>                           9%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          10%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          11%] [Cov:===============================>   90%][Progress:===>                          12%] [Cov:===============================>   90%][Progress:===>                          12%] [Cov:===============================>   90%][Progress:===>                          12%] [Cov:===============================>   90%][Progress:===>                          12%] [Cov:===============================>   90%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         14%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:=====>                        19%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       20%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%]
* Search finished after 201s and 2347 generations, 1613445 statements, best individual has fitness: 23.0
* Generated before the refinement 47 tests with total length 171
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-48), false, 0, arg7)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-48), false, 0, characterClass);
simpleSector.getOccupier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals("A worker with no occupier should return null", null, simpleSector.getOccupier());
    }
}
statement is: assertEquals("A worker with no occupier should return null", null, simpleSector.getOccupier()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("A worker with no occupier should return null", null, simpleSector.getOccupier()) target is:  method is: assertEquals(java.lang.String,<unknown>,<unknown>)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Assert.assertTrue(simpleSector.isAttackerSpawn());
    }
}
statement is: Assert.assertTrue(simpleSector.isAttackerSpawn()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertTrue(simpleSector.isAttackerSpawn()) target is: Assert method is: assertTrue()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: getBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus bonus = simpleSector.getBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getBonus(isDuelist);
    }
}
statement is: simpleSector.getBonus(isDuelist), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getBonus(isDuelist) target is: simpleSector method is: getBonus()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();
    }
}
statement is: simpleSector.isFlag(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag() target is: simpleSector method is: isFlag()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: removeObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.removeObserver(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.removeObserver(sectorObserver);
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.removeObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.removeObserver(sectorObserver) target is: simpleSector method is: removeObserver(SectorObserver)
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3, (-1754), arg2)
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(3, -1754, simpleSector);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(3, -1754, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
* this is vulnerable: int _int = 3
TestCase is: int _int = 3;

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getAreas();
    }
}
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isDefenderSpawn();
    }
}
statement is: simpleSector.isDefenderSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isDefenderSpawn() target is: simpleSector method is: isDefenderSpawn()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
        // Improved test data:
        int height = 10;
        simpleSector.setHeight(height);
        assertEquals(height, simpleSector.getHeight());
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: // Improved test data:
int height = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: simpleSector.setHeight(height), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.setHeight(height) target is: simpleSector method is: setHeight(int)
statement is: assertEquals(height, simpleSector.getHeight()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(height, simpleSector.getHeight()) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1522, true, true, 1522, 1522, true, 1522, arg7)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1522, true, true, 1522, 1522, true, 1522, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.gainControl(combatantSide);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleSector.gainControl(combatantSide);
        simpleSector.gainControl(combatantSide);
        simpleSector.free();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: addObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.addObserver(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.addObserver(sectorObserver);
        simpleSector.free();
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.addObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.addObserver(sectorObserver) target is: simpleSector method is: addObserver(SectorObserver)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isOccupied();
    }
}
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleSector.gainControl(combatantSide);
        simpleSector.isOccupied();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), false, false, (-2578), (-2578), false, (-2578), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-5156), (-5156), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2578), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", arg4, arg5, "de.outsare.fortbttleplayer.modelipl.impleSect:r")
statement is: getSectorBonus()Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus sectorBonus = simpleCombatant.getSectorBonus()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2578), false, false, (-2578), (-2578), false, (-2578), characterClass);
SimpleWeapon simpleWeapon = new SimpleWeapon((-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2578), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", characterClass, simpleWeapon, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
simpleCombatant.getSectorBonus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleWeapon simpleWeapon = new SimpleWeapon(-5156, "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleArea simpleArea = new SimpleArea(-5156, -5156, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2578, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -5156, "de.outsare.fortbttleplayer.modelipl.impleSect:r", characterClass, simpleWeapon, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
        simpleCombatant.getSectorBonus();
    }
}
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-5156, "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleArea simpleArea = new SimpleArea(-5156, -5156, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2578, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -5156, "de.outsare.fortbttleplayer.modelipl.impleSect:r", characterClass, simpleWeapon, "de.outsare.fortbttleplayer.modelipl.impleSect:r"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.getSectorBonus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.getSectorBonus() target is: simpleCombatant method is: getSectorBonus()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 9
Matched Method is: getSectorBonus()Lde/outstare/fortbattleplayer/model/SectorBonus;
TestCase is: String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) string, (Weapon) _int, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
((SimpleCombatant) combatantState).getSectorBonus();

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = simpleSector.hashCode()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.hashCode();
    }
}
statement is: simpleSector.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.hashCode() target is: simpleSector method is: hashCode()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, arg7)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = simpleSector.hashCode()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.hashCode();
        // Add some more descriptive test cases to ensure the correctness of the hashCode method. }}
    }
}
statement is: simpleSector.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.hashCode() target is: simpleSector method is: hashCode()
statement is: // Add some more descriptive test cases to ensure the correctness of the hashCode method. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: de.outstare.fortbattleplayer.model.impl.SimpleBattleField(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleBattleField
statement code is: SimpleBattleField simpleBattleField = new SimpleBattleField(2983, 0)
test data is: SimpleBattleField simpleBattleField = new SimpleBattleField(2983, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleBattleField simpleBattleField = new SimpleBattleField("Epic Battlefield", "The Battle of the Ages");
    }
}
statement is: SimpleBattleField simpleBattleField = new SimpleBattleField("Epic Battlefield", "The Battle of the Ages"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Epic Battlefield";
String string = "The Battle of the Ages";
SimpleBattleField simpleBattleField = new SimpleBattleField((int) string, (int) string);

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
Object object = new Object();
simpleSector.equals(object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        simpleSector.equals(object);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.equals(object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(object) target is: simpleSector method is: equals(java.lang.Object)
TestCase is: Object object = new Object();

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals((Object) null)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(((Object) (null)));
    }
}
statement is: simpleSector.equals(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(((Object) (null))) target is: simpleSector method is: equals(java.lang.Object)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, false, 0, 1693, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3, (-1754), arg2)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, false, 0, 1693, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(3, -1754, simpleSector);
        simpleSector.equals(simpleSector2);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(3, -1754, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
statement is: simpleSector.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector2) target is: simpleSector method is: equals()
* this is vulnerable: int _int = 3
TestCase is: int _int = 3;

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-199), false, false, (-199), (-199), false, 1492, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, false, (-199), (-199), false, 1492, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-199), false, true, (-199), (-199), false, (-2578), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, true, (-199), (-199), false, (-2578), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(7, false, true, 7, 7, false, 7, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, true, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, true, 83, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, false, 83, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, true, 83, characterClass);
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, false, 83, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2653), true, true, (-2611), (-2611), true, (-2611), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2611), true, true, (-2611), (-2611), true, (-2611), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-2653), true, true, (-2611), (-2611), true, (-2611), characterClass);
SimpleSector simpleSector = new SimpleSector((-2611), true, true, (-2611), (-2611), true, (-2611), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 31, true, 31, arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(15, false, false, 949, 15, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(949, 0, arg2)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 949, 15, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(949, 0, simpleSector);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(949, 0, simpleSector);
        simpleSector.getAreas();
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(949, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
TestCase is: int _int = 949;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharacterClass[] characterClasses = new CharacterClass[]{ CharacterClass.FIGHTER, CharacterClass.ROGUE, CharacterClass.WIZARD };
        SimpleSector[] simpleSectors = new SimpleSector[]{ new SimpleSector(-10), new SimpleSector(5), new SimpleSector(10) };
        for (CharacterClass characterClass : characterClasses) {
            for (SimpleSector simpleSector : simpleSectors) {
                int attackBonus = simpleSector.getAttackBonus(characterClass);
            }
        }
        // Verify that the attack bonus is calculated correctly based on the character class and sector properties. }}
    }
}
statement is: CharacterClass[] characterClasses = new CharacterClass[]{ CharacterClass.FIGHTER, CharacterClass.ROGUE, CharacterClass.WIZARD }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: SimpleSector[] simpleSectors = new SimpleSector[]{ new SimpleSector(-10), new SimpleSector(5), new SimpleSector(10) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (CharacterClass characterClass : characterClasses) {
    for (SimpleSector simpleSector : simpleSectors) {
        int attackBonus = simpleSector.getAttackBonus(characterClass);
    }
}, class spoon.support.reflect.code.CtForEachImpl
statement is: // Verify that the attack bonus is calculated correctly based on the character class and sector properties. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Changed the value of "1231" to a more descriptive example like "1234"
        // Changed the boolean values to more representative examples like "true" and "false"
        // Changed the double value to a more descriptive example like "0.5"
        // Changed the String value to a more representative example like "SOLDIER" }}
    }
}
statement is: // Changed the value of "1231" to a more descriptive example like "1234", class spoon.support.reflect.code.CtCommentImpl
statement is: // Changed the boolean values to more representative examples like "true" and "false", class spoon.support.reflect.code.CtCommentImpl
statement is: // Changed the double value to a more descriptive example like "0.5", class spoon.support.reflect.code.CtCommentImpl
statement is: // Changed the String value to a more representative example like "SOLDIER" }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: getDamageBonus()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int damageBonus = simpleSector.getDamageBonus()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
simpleSector.getDamageBonus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getDamageBonus();
    }
}
statement is: simpleSector.getDamageBonus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDamageBonus() target is: simpleSector method is: getDamageBonus()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, arg7)
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-3813), 0, true, (-3813), arg7)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-3813), 0, true, (-3813), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(15, false, false, 15, 15, false, 0, arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 15, 15, false, 0, characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 1231, 0, true, 0, arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1231, 0, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleSector.gainControl(combatantSide);
        simpleSector.getOccupier();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.getOccupier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getOccupier() target is: simpleSector method is: getOccupier()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4225), true, true, (-4225), (-4225), true, (-4225), arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-4225), true, true, (-4225), (-4225), true, (-4225), characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isAttackerSpawn();
    }
}
statement is: simpleSector.isAttackerSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isAttackerSpawn() target is: simpleSector method is: isAttackerSpawn()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(16716049, false, false, 16716049, 16716049, false, 816, arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(16716049, false, false, 16716049, 16716049, false, 816, characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isDefenderSpawn();
    }
}
statement is: simpleSector.isDefenderSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isDefenderSpawn() target is: simpleSector method is: isDefenderSpawn()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-176), false, 470, arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-176), false, 470, characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();
    }
}
statement is: simpleSector.isFlag(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag() target is: simpleSector method is: isFlag()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(251, true, true, 251, 251, true, 251, arg7)
statement is: _addArea(Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector._addArea((Area) null)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(251, true, true, 251, 251, true, 251, characterClass);
simpleSector._addArea((Area) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector._addArea(((Area) (null)));
    }
}
statement is: simpleSector._addArea(((Area) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector._addArea(((Area) (null))) target is: simpleSector method is: _addArea(Area)
* test suite isTestSuite: 56
Test 0: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-48), false, 0, characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isFlag();
Test 4: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 5: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.getDefenseBonus(characterClass);
Test 6: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getAreas();
Test 7: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.isDefenderSpawn();
Test 8: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getHeight();
Test 9: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1522, true, true, 1522, 1522, true, 1522, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.gainControl(combatantSide);
simpleSector.free();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isOccupied();
Test 12: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2578), false, false, (-2578), (-2578), false, (-2578), characterClass);
SimpleWeapon simpleWeapon = new SimpleWeapon((-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2578), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", characterClass, simpleWeapon, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
simpleCombatant.getSectorBonus();
Test 14: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);
Test 15: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.hashCode();
Test 16: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.hashCode();
Test 17: 
SimpleBattleField simpleBattleField = new SimpleBattleField(2983, 0);
Test 18: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
Object object = new Object();
simpleSector.equals(object);
Test 19: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.equals((Object) null);
Test 21: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 22: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, false, 0, 1693, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, false, (-199), (-199), false, 1492, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, true, (-199), (-199), false, (-2578), characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, true, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, true, 83, characterClass);
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, false, 83, characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-2653), true, true, (-2611), (-2611), true, (-2611), characterClass);
SimpleSector simpleSector = new SimpleSector((-2611), true, true, (-2611), (-2611), true, (-2611), characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 949, 15, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(949, 0, simpleSector);
simpleSector.getAreas();
Test 34: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getAttackBonus(characterClass);
Test 35: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 37: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
simpleSector.getDamageBonus();
Test 38: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-3813), 0, true, (-3813), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getDefenseBonus(characterClass);
Test 40: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 15, 15, false, 0, characterClass);
simpleSector.getHeight();
Test 42: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1231, 0, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 43: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-4225), true, true, (-4225), (-4225), true, (-4225), characterClass);
simpleSector.isAttackerSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(16716049, false, false, 16716049, 16716049, false, 816, characterClass);
simpleSector.isDefenderSpawn();
Test 45: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-176), false, 470, characterClass);
simpleSector.isFlag();
Test 46: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(251, true, true, 251, 251, true, 251, characterClass);
simpleSector._addArea((Area) null);
Test 47: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 48: 

Test 49: 

Test 50: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 51: 
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) "de.outsare.fortbttleplayer.modelipl.impleSect:r", (String) 0, 0, 0);
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) string, (Weapon) _int, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
((SimpleCombatant) combatantState).getSectorBonus();

Test 52: 
SimpleBattleField simpleBattleField = new SimpleBattleField((int) "Epic Battlefield", (int) "The Battle of the Ages");

Test 53: 
Object object = new Object();

Test 54: 

Test 55: 
SimpleArea simpleArea = new SimpleArea(949, 0, (Sector) 0);


* Generated after the refinement and before minimization 56 tests with total length 187
* test suite isTestSuite: 56
Test 0: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-48), false, 0, characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isFlag();
Test 4: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 5: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.getDefenseBonus(characterClass);
Test 6: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getAreas();
Test 7: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.isDefenderSpawn();
Test 8: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getHeight();
Test 9: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1522, true, true, 1522, 1522, true, 1522, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.gainControl(combatantSide);
simpleSector.free();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isOccupied();
Test 12: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2578), false, false, (-2578), (-2578), false, (-2578), characterClass);
SimpleWeapon simpleWeapon = new SimpleWeapon((-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2578), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", characterClass, simpleWeapon, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
simpleCombatant.getSectorBonus();
Test 14: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);
Test 15: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.hashCode();
Test 16: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.hashCode();
Test 17: 
SimpleBattleField simpleBattleField = new SimpleBattleField(2983, 0);
Test 18: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
Object object = new Object();
simpleSector.equals(object);
Test 19: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.equals((Object) null);
Test 21: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 22: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, false, 0, 1693, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, false, (-199), (-199), false, 1492, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, true, (-199), (-199), false, (-2578), characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, true, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, true, 83, characterClass);
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, false, 83, characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-2653), true, true, (-2611), (-2611), true, (-2611), characterClass);
SimpleSector simpleSector = new SimpleSector((-2611), true, true, (-2611), (-2611), true, (-2611), characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 949, 15, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(949, 0, simpleSector);
simpleSector.getAreas();
Test 34: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getAttackBonus(characterClass);
Test 35: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 37: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
simpleSector.getDamageBonus();
Test 38: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-3813), 0, true, (-3813), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getDefenseBonus(characterClass);
Test 40: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 15, 15, false, 0, characterClass);
simpleSector.getHeight();
Test 42: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1231, 0, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 43: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-4225), true, true, (-4225), (-4225), true, (-4225), characterClass);
simpleSector.isAttackerSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(16716049, false, false, 16716049, 16716049, false, 816, characterClass);
simpleSector.isDefenderSpawn();
Test 45: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-176), false, 470, characterClass);
simpleSector.isFlag();
Test 46: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(251, true, true, 251, 251, true, 251, characterClass);
simpleSector._addArea((Area) null);
Test 47: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 48: 

Test 49: 

Test 50: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 51: 
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) "de.outsare.fortbttleplayer.modelipl.impleSect:r", (String) 0, 0, 0);
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
String string = "de.outsare.fortbttleplayer.modelipl.impleSect:r";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) string, (Weapon) _int, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
((SimpleCombatant) combatantState).getSectorBonus();

Test 52: 
SimpleBattleField simpleBattleField = new SimpleBattleField((int) "Epic Battlefield", (int) "The Battle of the Ages");

Test 53: 
Object object = new Object();

Test 54: 

Test 55: 
SimpleArea simpleArea = new SimpleArea(949, 0, (Sector) 0);


* Minimizing test suite
* test suite isTestSuite: 46
Test 0: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-48), false, 0, characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-4225), true, true, (-4225), (-4225), true, (-4225), characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isFlag();
Test 4: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 5: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(251, true, true, 251, 251, true, 251, characterClass);
simpleSector._addArea((Area) null);
Test 6: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.getAreas();
Test 7: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(16716049, false, false, 16716049, 16716049, false, 816, characterClass);
simpleSector.isDefenderSpawn();
Test 8: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getHeight();
Test 9: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1522, true, true, 1522, 1522, true, 1522, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.gainControl(combatantSide);
simpleSector.free();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.isOccupied();
Test 12: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.getDefenseBonus(characterClass);
Test 14: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2578), false, false, (-2578), (-2578), false, (-2578), characterClass);
SimpleWeapon simpleWeapon = new SimpleWeapon((-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleArea simpleArea = new SimpleArea((-5156), (-5156), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2578), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-5156), "de.outsare.fortbttleplayer.modelipl.impleSect:r", characterClass, simpleWeapon, "de.outsare.fortbttleplayer.modelipl.impleSect:r");
simpleCombatant.getSectorBonus();
Test 15: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-3813), 0, true, (-3813), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getDefenseBonus(characterClass);
Test 16: 
SimpleBattleField simpleBattleField = new SimpleBattleField(2983, 0);
Test 17: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.hashCode();
Test 18: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, characterClass);
simpleSector.equals((Object) null);
Test 19: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, false, (-199), (-199), false, 1492, characterClass);
simpleSector.equals(simpleSector);
Test 21: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
Object object = new Object();
simpleSector.equals(object);
Test 22: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, false, 0, 1693, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3, (-1754), simpleSector);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-199), false, true, (-199), (-199), false, (-2578), characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, true, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, true, 83, characterClass);
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, false, 83, characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-2653), true, true, (-2611), (-2611), true, (-2611), characterClass);
SimpleSector simpleSector = new SimpleSector((-2611), true, true, (-2611), (-2611), true, (-2611), characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);
Test 34: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 949, 15, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(949, 0, simpleSector);
simpleSector.getAreas();
Test 35: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), characterClass);
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 37: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 38: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
simpleSector.getDamageBonus();
Test 39: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 40: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 15, 15, false, 0, characterClass);
simpleSector.getHeight();
Test 42: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1231, 0, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 43: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, characterClass);
simpleSector.isAttackerSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, characterClass);
simpleSector.isDefenderSpawn();
Test 45: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-176), false, 470, characterClass);
simpleSector.isFlag();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 105
* Number of covered goals: 101
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 35
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Generated 46 tests with total length 168
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 39%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-48), false, 0, arg7);
simpleSector.getOccupier();
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertEquals(0, simpleSector.getHeight());
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetOccupier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-4225), true, true, (-4225), (-4225), true, (-4225), arg7);
boolean attackerSpawn = simpleSector.isAttackerSpawn();
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(attackerSpawn);
assertEquals((-4225), simpleSector.getHeight());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testSimpleSectorInstanceWithExpectedValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg0);
SectorBonus bonus = simpleSector.getBonus(arg0);
assertEquals((-2578), bonus.defendBonus);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-2578), simpleSector.getHeight());
assertEquals((-2578), bonus.attackBonus);
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetBonusSimpleSector
* Compiling Tests
refined test name is: testSimpleSectorBonusAndFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
boolean flag = simpleSector.isFlag();
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(flag);
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorIsFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7);
SectorObserver arg0 = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(arg0);
assertEquals((-2578), simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testRemovingObserverShouldNotHaveThatObserver
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(251, true, true, 251, 251, true, 251, arg7);
simpleSector._addArea((Area) null);
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(251, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testAddAreaWithNullArea
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7);
simpleSector.getAreas();
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertEquals((-2578), simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetAreasReturnsNonEmptyListOfAreas
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(16716049, false, false, 16716049, 16716049, false, 816, arg7);
boolean defenderSpawn = simpleSector.isDefenderSpawn();
assertFalse(simpleSector.isFlag());
assertFalse(defenderSpawn);
assertFalse(simpleSector.isAttackerSpawn());
assertEquals(16716049, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testIsDefenderSpawnNotDefenderSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
int height = simpleSector.getHeight();
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(0, height);


** It was a parseable test case! 
refined test name is: testIsDefenderAttackerAndFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1522, true, true, 1522, 1522, true, 1522, arg7);
CombatantSide arg0 = CombatantSide.DEFENDER;
simpleSector.gainControl(arg0);
simpleSector.gainControl(arg0);
simpleSector.free();
assertTrue(simpleSector.isOccupied());


** It was a parseable test case! 
refined test name is: testGainControlTwiceAndFree
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
SectorObserver arg0 = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(arg0);
simpleSector.free();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testFreeingSimpleSectorFlagsAndSetsCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
boolean occupied = simpleSector.isOccupied();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertFalse(occupied);


** It was a parseable test case! 
refined test name is: testCreateSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
CombatantSide arg0 = CombatantSide.DEFENDER;
simpleSector.gainControl(arg0);
boolean occupied = simpleSector.isOccupied();
assertTrue(occupied);


** It was a parseable test case! 
refined test name is: testGainControlOfSectorAsDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg0);
SimpleArea simpleArea = new SimpleArea(3, (-1754), arg2);
int defenseBonus = arg2.getDefenseBonus(arg0);
assertTrue(arg2.isFlag());
assertEquals((-1268), defenseBonus);
assertTrue(arg2.isAttackerSpawn());
assertEquals(0, arg2.getHeight());
assertTrue(arg2.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testSimpleArea
* Compiling Tests
refined test name is: testAreaWithSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-3813), 0, true, (-3813), arg7);
CharacterClass arg0 = CharacterClass.ADVENTURER;
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertEquals(0, defenseBonus);
assertTrue(simpleSector.isFlag());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetDefenseBonusForGreenhornCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SimpleBattleField simpleBattleField = new SimpleBattleField(2983, 0);
assertEquals(0, simpleBattleField.getHeight());


** It was a parseable test case! 
refined test name is: testGetHeightWhenWidthNonZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
simpleSector.hashCode();
assertTrue(simpleSector.isFlag());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testHashCodeAndIsFlagMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(3433, false, false, 0, 0, false, 0, arg7);
boolean equals = simpleSector.equals((Object) null);
assertFalse(simpleSector.isFlag());
assertFalse(equals);
assertEquals(3433, simpleSector.getHeight());
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testEqualsWithNullObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg0 = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7);
boolean equals = arg0.equals(arg0);
assertTrue(arg0.isAttackerSpawn());
assertTrue(arg0.isFlag());
assertEquals((-2578), arg0.getHeight());
assertTrue(arg0.isDefenderSpawn());
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testCharacterClassequalstrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg0 = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, arg7);
SimpleSector simpleSector = new SimpleSector((-199), false, false, (-199), (-199), false, 1492, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(equals);
assertFalse(arg0.isAttackerSpawn());
assertTrue(arg0.isDefenderSpawn());
assertTrue(arg0.isFlag());
assertEquals((-2578), arg0.getHeight());


** It was a parseable test case! 
refined test name is: testNotEqualSimpleSectorObjectsWithDifferentValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
Object arg0 = new Object();
boolean equals = simpleSector.equals(arg0);
assertFalse(equals);
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testEqualsWithNonSimpleSectorObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
SimpleSector arg0 = new SimpleSector(0, true, false, 0, 1693, false, 0, arg7);
SimpleArea simpleArea = new SimpleArea(3, (-1754), arg2);
boolean equals = arg2.equals(arg0);
assertFalse(arg0.isFlag());
assertFalse(equals);
assertTrue(arg0.isDefenderSpawn());
assertFalse(arg0.isAttackerSpawn());
assertEquals(0, arg2.getHeight());


** It was a parseable test case! 
refined test name is: testSectorsAreNotEqualAndSector2IsDefenderSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7);
SimpleSector arg0 = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(arg0.isAttackerSpawn());
assertTrue(arg0.isFlag());
assertEquals((-2578), arg0.getHeight());
assertTrue(arg0.isDefenderSpawn());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testSimpleSectorEquality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg0 = new SimpleSector((-2578), true, false, (-199), (-199), true, 0, arg7);
SimpleSector simpleSector = new SimpleSector((-199), false, true, (-199), (-199), false, (-2578), arg7);
boolean equals = simpleSector.equals(arg0);
assertEquals((-2578), arg0.getHeight());
assertFalse(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isFlag());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testNotEqualSimpleSectors
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), arg7);
SimpleSector arg0 = new SimpleSector((-2578), true, true, (-2578), (-2578), true, (-2578), arg7);
boolean equals = simpleSector.equals(arg0);
assertTrue(arg0.isFlag());
assertTrue(equals);
assertTrue(arg0.isAttackerSpawn());
assertTrue(arg0.isDefenderSpawn());
assertEquals((-2578), arg0.getHeight());


** It was a parseable test case! 
refined test name is: testSimpleSectorEquals
* Compiling Tests
refined test name is: testEqualssameValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2578), true, true, (-2578), (-2578), true, 0, arg7);
SimpleSector arg0 = new SimpleSector((-2578), true, true, (-2578), 0, true, 0, arg7);
boolean equals = simpleSector.equals(arg0);
assertTrue(arg0.isAttackerSpawn());
assertTrue(arg0.isDefenderSpawn());
assertEquals((-2578), arg0.getHeight());
assertFalse(arg0.equals((Object)simpleSector));
assertFalse(equals);
assertTrue(arg0.isFlag());


** It was a parseable test case! 
refined test name is: testEqualsdifferentSpawnTypesSameHeight
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg0 = new SimpleSector(7, true, true, 7, 7, true, 7, arg7);
SimpleSector simpleSector = new SimpleSector(7, false, true, 7, 7, false, 7, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(equals);
assertFalse(simpleSector.isFlag());
assertEquals(7, simpleSector.getHeight());
assertFalse(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testEqualsDifferentFlagsAndSpawnTypesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector arg0 = new SimpleSector(83, false, false, 83, 83, true, 83, arg7);
SimpleSector simpleSector = new SimpleSector(83, false, false, 83, 83, false, 83, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(arg0.isDefenderSpawn());
assertTrue(arg0.isFlag());
assertFalse(equals);
assertFalse(arg0.isAttackerSpawn());
assertEquals(83, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testEqualswithDifferentProperties
* Compiling Tests
refined test name is: testSimpleSectorNotEqualAndDifferentFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector arg0 = new SimpleSector((-2653), true, true, (-2611), (-2611), true, (-2611), arg7);
SimpleSector simpleSector = new SimpleSector((-2611), true, true, (-2611), (-2611), true, (-2611), arg7);
boolean equals = simpleSector.equals(arg0);
assertEquals((-2653), arg0.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(equals);
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testEqualsWhenEqual
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), arg0);
int classBonus = simpleSector.classBonus(arg0);
assertTrue(simpleSector.isFlag());
assertEquals((-2309), simpleSector.getHeight());
assertEquals((-2309), classBonus);
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testClassBonusWithSoldierCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 31, true, 31, arg0);
int classBonus = simpleSector.classBonus(arg0);
assertEquals(31, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(31, classBonus);
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testClassBonusSimpleSectorReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg7);
CharacterClass arg0 = CharacterClass.DUELANT;
int classBonus = simpleSector.classBonus(arg0);
assertTrue(simpleSector.isFlag());
assertEquals(0, classBonus);
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: getHeightTest
* Compiling Tests
refined test name is: testIsAttackerSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(15, false, false, 949, 15, false, 0, arg7);
SimpleArea simpleArea = new SimpleArea(949, 0, arg2);
arg2.getAreas();
assertFalse(arg2.isFlag());
assertFalse(arg2.isDefenderSpawn());
assertFalse(arg2.isAttackerSpawn());
assertEquals(15, arg2.getHeight());


** It was a parseable test case! 
refined test name is: testGetAreasReturnsExpectedValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-634), (-634), true, (-634), arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-1268), attackBonus);
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetAttackBonusGreenhornSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, true, true, 7, 7, true, 7, arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(14, attackBonus);
assertEquals(7, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testGetAttackBonusForGreenhornClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertTrue(simpleSector.isFlag());
assertEquals(1231, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, attackBonus);
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetAttackBonus
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7);
int damageBonus = simpleSector.getDamageBonus();
assertFalse(simpleSector.isFlag());
assertFalse(simpleSector.isDefenderSpawn());
assertEquals(0, damageBonus);
assertEquals(0, simpleSector.getHeight());
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetDamageBonusWithGreenhornCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, arg0);
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertEquals(2210, simpleSector.getHeight());
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertEquals(2331, defenseBonus);
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetDefenseBonus
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2309), false, false, 2781, (-2309), true, (-2309), arg7);
int height = simpleSector.getHeight();
assertFalse(simpleSector.isDefenderSpawn());
assertEquals((-2309), height);
assertFalse(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetHeight
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(15, false, false, 15, 15, false, 0, arg7);
int height = simpleSector.getHeight();
assertEquals(15, height);
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetHeightSimpleSectorObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1231, 0, true, 0, arg7);
CombatantSide arg0 = CombatantSide.ATTACKER;
simpleSector.gainControl(arg0);
simpleSector.getOccupier();
assertTrue(simpleSector.isOccupied());


** It was a parseable test case! 
refined test name is: testGainControl
* Compiling Tests
refined test name is: testGainControlShouldSetOccupier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2210, false, false, 1237, 1237, false, 1094, arg7);
boolean attackerSpawn = simpleSector.isAttackerSpawn();
assertEquals(2210, simpleSector.getHeight());
assertFalse(attackerSpawn);
assertFalse(simpleSector.isFlag());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testIsNotAttackerSpawnAndHasCorrectHeight
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1231, true, true, 0, 0, true, 0, arg7);
boolean defenderSpawn = simpleSector.isDefenderSpawn();
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(defenderSpawn);
assertEquals(1231, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testIsDefenderSpawnsimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-176), false, 470, arg7);
boolean flag = simpleSector.isFlag();
assertFalse(flag);
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testIsNotFlagOrSpawner
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.226 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.286 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 03:42:59.365 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.367 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:59.467 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.638 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.640 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.704 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.760 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 03:42:59.761 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
* Compiling Tests
[MASTER] 03:42:59.824 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.825 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.885 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.886 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:42:59.943 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:59.943 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
[MASTER] 03:43:00.033 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.034 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.114 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.194 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:43:00.195 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
[MASTER] 03:43:00.278 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.279 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.360 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.362 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.446 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.447 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.528 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.529 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.606 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.675 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.677 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.756 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.805 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.806 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.852 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.853 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.901 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:00.973 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:00.983 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:43:01.070 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.071 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.199 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.303 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:43:01.371 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.373 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.438 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.440 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:43:01.662 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.730 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.731 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.794 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:01.858 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:01.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.129 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.130 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.254 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.255 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.292 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.333 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.393 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.395 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:43:02.444 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.486 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.487 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:43:02.529 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.529 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
[MASTER] 03:43:02.572 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 13 called: 1 to improve: false
** Write a test suite: 24 called: 2 to improve: false
** Write a test suite: 27 called: 3 to improve: false
** Write a test suite: 31 called: 4 to improve: false
** Write a test suite: 40 called: 5 to improve: false
[MASTER] 03:43:02.920 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:02.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 12 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
** Write a test suite: 19 called: 3 to improve: false
** Write a test suite: 30 called: 4 to improve: false
** Write a test suite: 41 called: 5 to improve: false
[MASTER] 03:43:03.314 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar8699879568042844064.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:43:03.315 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8699879568042844064.jar
[MASTER] 03:43:03.586 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 03:43:03.931 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
