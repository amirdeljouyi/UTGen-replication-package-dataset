* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.model.impl.SimpleSector
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 4797
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:55:01.807 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:55:01.815 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:55:01.819 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:55:01.882 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 05:55:02.152 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 05:55:02.153 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.model.impl.SimpleSector
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 308
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709272499633
* Starting evolution
* Initial Number of Goals in DynaMOSA = 134 / 308
[Progress:>                             1%] [Cov:===========================>       79%][Progress:>                             2%] [Cov:============================>      81%][Progress:>                             2%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:======>                       21%] [Cov:==============================>    88%][Progress:======>                       21%] [Cov:==============================>    88%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][Progress:=======>                      26%] [Cov:===============================>   89%][MASTER] 05:55:31.109 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:========>                     27%] [Cov:===============================>   89%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    32%] [Cov:===============================>   90%][Progress:=========>                    33%] [Cov:===============================>   90%][Progress:=========>                    33%] [Cov:===============================>   90%][Progress:=========>                    33%] [Cov:===============================>   90%][Progress:=========>                    33%] [Cov:===============================>   90%][Progress:=========>                    33%] [Cov:===============================>   90%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][MASTER] 05:56:21.761 [logback-1] WARN  TestCluster - Failed to check cache for javax.swing.JComboBox<E> : Type points to itself
[Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%]
* Search finished after 102s and 438 generations, 313641 statements, best individual has fitness: 26.0
* Generated before the refinement 47 tests with total length 176
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertFalse(simpleSector.isAttackerSpawn());
    }
}
statement is: assertFalse(simpleSector.isAttackerSpawn()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(simpleSector.isAttackerSpawn()) target is:  method is: assertFalse(<unknown>)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharacterClass[] characterClasses = new CharacterClass[]{ CharacterClass.ARTIFICER, CharacterClass.WARRIOR, CharacterClass.ROGUE };
        for (CharacterClass cc : characterClasses) {
            SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, cc);
            int attackBonus = simpleSector.getAttackBonus(cc);
            assertEquals(expectedAttackBonus, attackBonus);
        }
    }
}
statement is: CharacterClass[] characterClasses = new CharacterClass[]{ CharacterClass.ARTIFICER, CharacterClass.WARRIOR, CharacterClass.ROGUE }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (CharacterClass cc : characterClasses) {
    SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, cc);
    int attackBonus = simpleSector.getAttackBonus(cc);
    assertEquals(expectedAttackBonus, attackBonus);
}, class spoon.support.reflect.code.CtForEachImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();
    }
}
statement is: simpleSector.isFlag(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag() target is: simpleSector method is: isFlag()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: removeObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.removeObserver(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.removeObserver(sectorObserver);
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.removeObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.removeObserver(sectorObserver) target is: simpleSector method is: removeObserver(SectorObserver)
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 1773, arg2)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 1773, simpleSector);
simpleArea.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(0, 1773, simpleSector);
        simpleArea.free();
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(0, 1773, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 2, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 2
Matched Method is: free()V
TestCase is: int _int = 0;
int _int = 1773;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
simpleArea.free();

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getAreas();
    }
}
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isDefenderSpawn();
    }
}
statement is: simpleSector.isDefenderSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isDefenderSpawn() target is: simpleSector method is: isDefenderSpawn()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getFloorHeight();
    }
}
statement is: simpleSector.getFloorHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getFloorHeight() target is: simpleSector method is: getFloorHeight()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
CombatantSide occupier = simpleSector.getOccupier();
simpleSector.gainControl(occupier);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide occupier = new CombatantSide("Greenhorns");
        simpleSector.gainControl(occupier);
        simpleSector.free();
    }
}
statement is: CombatantSide occupier = new CombatantSide("Greenhorns"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.gainControl(occupier), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(occupier) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl((CombatantSide) null)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
CombatantSide occupier = simpleSector.getOccupier();
simpleSector.gainControl(occupier);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide occupier = simpleSector.getOccupier();
        simpleSector.gainControl(occupier);
        simpleSector.gainControl(((CombatantSide) (null)));
        simpleSector.free();
    }
}
statement is: CombatantSide occupier = simpleSector.getOccupier(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getOccupier() target is: simpleSector method is: getOccupier()
statement is: simpleSector.gainControl(occupier), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(occupier) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.gainControl(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(((CombatantSide) (null))) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: addObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.addObserver(sectorObserver);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleSector.gainControl(combatantSide);
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.addObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.addObserver(sectorObserver) target is: simpleSector method is: addObserver(SectorObserver)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, arg7)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isOccupied();
    }
}
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, arg7)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;// Changed to a more descriptive value

        simpleSector.gainControl(combatantSide);
        simpleSector.isOccupied();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1237, (-1), arg2)
statement is: getBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus bonus = simpleSector.getBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
simpleSector.getBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(1237, -1, simpleSector);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(1237, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
* this is vulnerable: int _int = 1237
TestCase is: int _int = 1237;

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2935, 100, arg2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 100, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 100, "", arg4, arg5, "de.outstare.fortbattleplayer.model.impl.SimpleSector")
statement is: getSectorBonus(Lde/outstare/fortbattleplayer/model/Combatant;)Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus sectorBonus = simpleArea.getSectorBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleArea simpleArea = new SimpleArea(2935, 100, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(2935, 100, simpleSector);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
        simpleArea.getSectorBonus(simpleCombatant);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(2935, 100, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.impl.SimpleSector"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.getSectorBonus(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.getSectorBonus(simpleCombatant) target is: simpleArea method is: getSectorBonus(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 2, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 2
Matched Method is: getSectorBonus(Lde/outstare/fortbattleplayer/model/Combatant;)Lde/outstare/fortbattleplayer/model/SectorBonus;
TestCase is: int _int = 2935;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "";
String string = "de.outstare.fortbattleplayer.model.impl.SimpleSector";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), arg7)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: getBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus bonus = simpleSector.getBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, arg7)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = simpleSector.hashCode()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.hashCode();
    }
}
statement is: simpleSector.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.hashCode() target is: simpleSector method is: hashCode()
statement is: de.outstare.fortbattleplayer.model.impl.SimpleBattleField(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleBattleField
statement code is: SimpleBattleField simpleBattleField = new SimpleBattleField(8, 12)
test data is: SimpleBattleField simpleBattleField = new SimpleBattleField(8, 12);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleBattleField.setCellValue(0, 0, -1);
        simpleBattleField.setCellValue(1, 0, 2);
        simpleBattleField.setCellValue(2, 0, 3);
        simpleBattleField.setCellValue(0, 1, 4);
        simpleBattleField.setCellValue(1, 1, -5);
        simpleBattleField.setCellValue(2, 1, 6);
        simpleBattleField.setCellValue(0, 2, 7);
        simpleBattleField.setCellValue(1, 2, -8);
        simpleBattleField.setCellValue(2, 2, 9);
        simpleBattleField.setCellValue(0, 3, 10);
        simpleBattleField.setCellValue(1, 3, -11);
        simpleBattleField.setCellValue(2, 3, 12);
    }
}
statement is: simpleBattleField.setCellValue(0, 0, -1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(0, 0, -1) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(1, 0, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(1, 0, 2) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(2, 0, 3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(2, 0, 3) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(0, 1, 4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(0, 1, 4) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(1, 1, -5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(1, 1, -5) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(2, 1, 6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(2, 1, 6) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(0, 2, 7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(0, 2, 7) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(1, 2, -8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(1, 2, -8) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(2, 2, 9), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(2, 2, 9) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(0, 3, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(0, 3, 10) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(1, 3, -11), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(1, 3, -11) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: simpleBattleField.setCellValue(2, 3, 12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleBattleField.setCellValue(2, 3, 12) target is: simpleBattleField method is: setCellValue(int,int,int)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.equals(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals((Object) null)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(((Object) (null)));
    }
}
statement is: simpleSector.equals(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(((Object) (null))) target is: simpleSector method is: equals(java.lang.Object)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (-3710), true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (-3710), true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1237, (-1), arg2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, 0, false, 1364, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, 0, false, 1364, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(1237, -1, simpleSector);
        SimpleSector simpleSector = new SimpleSector(-1, false, true, 0, 0, false, 1364, characterClass);
        simpleSector.equals(simpleSector);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(1237, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
statement is: SimpleSector simpleSector = new SimpleSector(-1, false, true, 0, 0, false, 1364, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals(SimpleSector)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 7
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 1237;
boolean _boolean = false;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 1364;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 1237, (CharacterClass) _int);
((SimpleSector) _boolean).equals(simpleSector);

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2780, true, true, 2780, 2, true, 399, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
SimpleSector simpleSector = new SimpleSector(2780, true, true, 2780, 2, true, 399, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector2);
    }
}
statement is: simpleSector.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector2) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1578, false, false, 1584, 1584, false, 1584, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1584, false, false, 1584, 1584, false, 1584, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1578, false, false, 1584, 1584, false, 1584, characterClass);
SimpleSector simpleSector = new SimpleSector(1584, false, false, 1584, 1584, false, 1584, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, arg7)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector2);
    }
}
statement is: simpleSector.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector2) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(7, false, false, 7, (-21), false, 7, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 7, false, 7, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, (-21), false, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4), true, true, (-4), (-4), false, (-4), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4), false, true, (-4), (-4), true, (-4), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-4), true, true, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, true, (-4), (-4), true, (-4), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals(sector.getLevel(), 3);
        assertTrue(sector.isHazard());
    }
}
statement is: assertEquals(sector.getLevel(), 3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(sector.getLevel(), 3) target is:  method is: assertEquals(<unknown>,int)
statement is: assertTrue(sector.isHazard()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(sector.isHazard()) target is:  method is: assertTrue(<unknown>)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(982, false, true, 100, 982, true, 100, arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(982, false, true, 100, 982, true, 100, characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, arg7)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int expectedBonus = 4;
        CharacterClass characterClass = CharacterClass.ROGUE;
        int actualBonus = simpleSector.classBonus(characterClass);
        assertEquals(expectedBonus, actualBonus);
    }
}
statement is: int expectedBonus = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: CharacterClass characterClass = CharacterClass.ROGUE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ROGUE is CharacterClass
statement is: int actualBonus = simpleSector.classBonus(characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.classBonus(characterClass) target is: simpleSector method is: classBonus(CharacterClass)
statement is: assertEquals(expectedBonus, actualBonus), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedBonus, actualBonus) target is:  method is: assertEquals(int,int)
* this is vulnerable: int _int = 4
TestCase is: int _int = 4;

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-2871), 1, arg2)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea((-2871), 1, simpleSector);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(-2871, 1, simpleSector);
        simpleSector.getAreas();
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(-2871, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
* this is vulnerable: int _int = 1
TestCase is: int _int = 1;

statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Changed the primitive values and strings to more illustrative examples:
        CharacterClass characterClass2 = CharacterClass.REDHORN;
        SimpleSector simpleSector2 = new SimpleSector(-1, true, false, 0, -3710, false, -3710, characterClass2);
        simpleSector2.getAttackBonus(characterClass2);
        // Added a test case for the scenario where the sector has no attack bonus: }}
    }
}
statement is: // Changed the primitive values and strings to more illustrative examples:
CharacterClass characterClass2 = CharacterClass.REDHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.REDHORN is CharacterClass
statement is: SimpleSector simpleSector2 = new SimpleSector(-1, true, false, 0, -3710, false, -3710, characterClass2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector2.getAttackBonus(characterClass2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector2.getAttackBonus(characterClass2) target is: simpleSector2 method is: getAttackBonus(CharacterClass)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 4
Matched Method is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Added a test case for the scenario where the sector has no attack bonus: }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, (-3710), false, (-3710), (CharacterClass) _boolean);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getAttackBonus(characterClass);

statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), arg7)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-11), true, true, (-11), (-11), true, (-11), arg7)
statement is: getDamageBonus()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int damageBonus = simpleSector.getDamageBonus()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-11), true, true, (-11), (-11), true, (-11), characterClass);
simpleSector.getDamageBonus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getDamageBonus();
    }
}
statement is: simpleSector.getDamageBonus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDamageBonus() target is: simpleSector method is: getDamageBonus()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-5265), true, 159, arg7)
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-5265), true, 159, characterClass);
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data improved:
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, -5265, true, 159, characterClass);
        simpleSector.getDefenseBonus(characterClass);
        // The test data has been improved by changing the primitive values and strings to more descriptive and representative examples. }}
    }
}
statement is: // Test data improved:
CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, -5265, true, 159, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getDefenseBonus(characterClass), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDefenseBonus(characterClass) target is: simpleSector method is: getDefenseBonus(CharacterClass)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 6
Matched Method is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // The test data has been improved by changing the primitive values and strings to more descriptive and representative examples. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
boolean _boolean = true;
int _int = 159;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 159, (CharacterClass) _int);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getDefenseBonus(characterClass);

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, arg7)
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Changed the input to a more descriptive value }}
    }
}
statement is: // Changed the input to a more descriptive value }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), arg7)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for a Duelant character in a SimpleSector
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, -3466, characterClass);
        // Test data for a Worker character in the same SimpleSector }}
    }
}
statement is: // Test data for a Duelant character in a SimpleSector
CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, -3466, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Test data for a Worker character in the same SimpleSector }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 2115;
boolean _boolean = false;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-3466), (CharacterClass) _int);

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1753), true, false, 0, (-1753), true, (-1170), arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1753), true, false, 0, (-1753), true, (-1170), characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, (-2419), true, 0, arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, (-2419), true, 0, characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        simpleSector.gainControl(combatantSide);
        simpleSector.getOccupier();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.getOccupier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getOccupier() target is: simpleSector method is: getOccupier()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 1118719, 0, false, 0, arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1118719, 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isAttackerSpawn();
    }
}
statement is: simpleSector.isAttackerSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isAttackerSpawn() target is: simpleSector method is: isAttackerSpawn()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertTrue(simpleSector.isDefenderSpawn());
    }
}
statement is: assertTrue(simpleSector.isDefenderSpawn()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(simpleSector.isDefenderSpawn()) target is:  method is: assertTrue(<unknown>)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2422), false, false, (-2422), (-2422), false, (-2422), arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2422), false, false, (-2422), (-2422), false, (-2422), characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();
    }
}
statement is: simpleSector.isFlag(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag() target is: simpleSector method is: isFlag()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1338, false, true, (-1971), (-1971), true, 1338, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, (-1), arg2)
statement is: _addArea(Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector._addArea(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1338, false, true, (-1971), (-1971), true, 1338, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
simpleSector._addArea(simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(0, -1, simpleSector);
        simpleSector._addArea(simpleArea);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(0, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
statement is: simpleSector._addArea(simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector._addArea(simpleArea) target is: simpleSector method is: _addArea(SimpleArea)
* this is vulnerable: int _int = 0
TestCase is: int _int = 0;

* test suite isTestSuite: 59
Test 0: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
simpleSector.isAttackerSpawn();
Test 1: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 2: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isFlag();
Test 3: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 4: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 1773, simpleSector);
simpleArea.free();
Test 5: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAreas();
Test 6: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.isDefenderSpawn();
Test 7: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getHeight();
Test 8: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.getOccupier();
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
Test 9: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.getOccupier();
simpleSector.gainControl((CombatantSide) null);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
Test 11: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isOccupied();
Test 12: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
simpleSector.getBonus(characterClass);
Test 14: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleArea simpleArea = new SimpleArea(2935, 100, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);
Test 15: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getBonus(characterClass);
Test 16: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.hashCode();
Test 17: 
SimpleBattleField simpleBattleField = new SimpleBattleField(8, 12);
Test 18: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.equals(characterClass);
Test 19: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.equals((Object) null);
Test 21: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (-3710), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 22: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, 0, false, 1364, characterClass);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
SimpleSector simpleSector = new SimpleSector(2780, true, true, 2780, 2, true, 399, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1578, false, false, 1584, 1584, false, 1584, characterClass);
SimpleSector simpleSector = new SimpleSector(1584, false, false, 1584, 1584, false, 1584, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, (-21), false, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-4), true, true, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, true, (-4), (-4), true, (-4), characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.classBonus(characterClass);
Test 31: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(982, false, true, 100, 982, true, 100, characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea((-2871), 1, simpleSector);
simpleSector.getAreas();
Test 34: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.getAttackBonus(characterClass);
Test 35: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-11), true, true, (-11), (-11), true, (-11), characterClass);
simpleSector.getDamageBonus();
Test 37: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-5265), true, 159, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 38: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getDefenseBonus(characterClass);
Test 40: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1753), true, false, 0, (-1753), true, (-1170), characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, (-2419), true, 0, characterClass);
simpleSector.getHeight();
Test 42: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 43: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1118719, 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.isDefenderSpawn();
Test 45: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2422), false, false, (-2422), (-2422), false, (-2422), characterClass);
simpleSector.isFlag();
Test 46: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1338, false, true, (-1971), (-1971), true, 1338, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
simpleSector._addArea(simpleArea);
Test 47: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 48: 
SimpleArea simpleArea = new SimpleArea(0, 1773, (Sector) 1773);
simpleArea.free();

Test 49: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 50: 

Test 51: 
SimpleArea simpleArea = new SimpleArea(2935, 100, (Sector) 100);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "";
String string = "de.outstare.fortbattleplayer.model.impl.SimpleSector";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);

Test 52: 
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 0, 0, (int) false, (boolean) 1364, 1237, (CharacterClass) 1237);
((SimpleSector) _boolean).equals(simpleSector);

Test 53: 

Test 54: 

Test 55: 
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) true, false, (boolean) 0, (int) false, (-3710), false, (-3710), (CharacterClass) true);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getAttackBonus(characterClass);

Test 56: 
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (int) true, (boolean) 159, 159, (CharacterClass) 0);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getDefenseBonus(characterClass);

Test 57: 
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), (CharacterClass) 2115);

Test 58: 


* Generated after the refinement and before minimization 59 tests with total length 206
* test suite isTestSuite: 59
Test 0: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
simpleSector.isAttackerSpawn();
Test 1: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 2: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isFlag();
Test 3: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 4: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 1773, simpleSector);
simpleArea.free();
Test 5: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAreas();
Test 6: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.isDefenderSpawn();
Test 7: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getHeight();
Test 8: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.getOccupier();
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
Test 9: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.getOccupier();
simpleSector.gainControl((CombatantSide) null);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
Test 11: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isOccupied();
Test 12: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
simpleSector.getBonus(characterClass);
Test 14: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleArea simpleArea = new SimpleArea(2935, 100, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);
Test 15: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
CharacterClass characterClass = CharacterClass.ADVENTURER;
simpleSector.getBonus(characterClass);
Test 16: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.hashCode();
Test 17: 
SimpleBattleField simpleBattleField = new SimpleBattleField(8, 12);
Test 18: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.equals(characterClass);
Test 19: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.equals((Object) null);
Test 21: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (-3710), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 22: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, 0, false, 1364, characterClass);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
SimpleSector simpleSector = new SimpleSector(2780, true, true, 2780, 2, true, 399, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1578, false, false, 1584, 1584, false, 1584, characterClass);
SimpleSector simpleSector = new SimpleSector(1584, false, false, 1584, 1584, false, 1584, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, (-21), false, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-4), true, true, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, true, (-4), (-4), true, (-4), characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.classBonus(characterClass);
Test 31: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(982, false, true, 100, 982, true, 100, characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea((-2871), 1, simpleSector);
simpleSector.getAreas();
Test 34: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.getAttackBonus(characterClass);
Test 35: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-11), true, true, (-11), (-11), true, (-11), characterClass);
simpleSector.getDamageBonus();
Test 37: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-5265), true, 159, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 38: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getDefenseBonus(characterClass);
Test 40: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1753), true, false, 0, (-1753), true, (-1170), characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, (-2419), true, 0, characterClass);
simpleSector.getHeight();
Test 42: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 43: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1118719, 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.isDefenderSpawn();
Test 45: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2422), false, false, (-2422), (-2422), false, (-2422), characterClass);
simpleSector.isFlag();
Test 46: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1338, false, true, (-1971), (-1971), true, 1338, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
simpleSector._addArea(simpleArea);
Test 47: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 48: 
SimpleArea simpleArea = new SimpleArea(0, 1773, (Sector) 1773);
simpleArea.free();

Test 49: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 50: 

Test 51: 
SimpleArea simpleArea = new SimpleArea(2935, 100, (Sector) 100);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "";
String string = "de.outstare.fortbattleplayer.model.impl.SimpleSector";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);

Test 52: 
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 0, 0, (int) false, (boolean) 1364, 1237, (CharacterClass) 1237);
((SimpleSector) _boolean).equals(simpleSector);

Test 53: 

Test 54: 

Test 55: 
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) true, false, (boolean) 0, (int) false, (-3710), false, (-3710), (CharacterClass) true);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getAttackBonus(characterClass);

Test 56: 
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (int) true, (boolean) 159, 159, (CharacterClass) 0);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getDefenseBonus(characterClass);

Test 57: 
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), (CharacterClass) 2115);

Test 58: 


* Minimizing test suite
* test suite isTestSuite: 47
Test 0: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1118719, 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.getAttackBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2422), false, false, (-2422), (-2422), false, (-2422), characterClass);
simpleSector.isFlag();
Test 4: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 5: 
SimpleBattleField simpleBattleField = new SimpleBattleField(8, 12);
Test 6: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAreas();
Test 7: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.isDefenderSpawn();
Test 8: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, (-2419), true, 0, characterClass);
simpleSector.getHeight();
Test 9: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 1773, simpleSector);
simpleArea.free();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
simpleSector.gainControl((CombatantSide) null);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
Test 12: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
Test 13: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isOccupied();
Test 14: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleSector.gainControl(combatantSide);
simpleSector.isOccupied();
Test 15: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
simpleSector.getBonus(characterClass);
Test 16: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleArea simpleArea = new SimpleArea(2935, 100, simpleSector);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.impl.SimpleSector");
simpleArea.getSectorBonus(simpleCombatant);
Test 17: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
CharacterClass characterClass = CharacterClass.DUELANT;
simpleSector.classBonus(characterClass);
Test 18: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.hashCode();
Test 19: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.equals((Object) null);
Test 20: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
simpleSector.equals(simpleSector);
Test 21: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, characterClass);
simpleSector.equals(characterClass);
Test 22: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), characterClass);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, characterClass);
SimpleArea simpleArea = new SimpleArea(1237, (-1), simpleSector);
SimpleSector simpleSector = new SimpleSector((-1), false, true, 0, 0, false, 1364, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
SimpleSector simpleSector = new SimpleSector(2780, true, true, 2780, 2, true, 399, characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (-3710), true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1587, true, true, 1587, 1587, true, 1587, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, (-21), false, 7, characterClass);
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 7, false, 7, characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-4), true, true, (-4), (-4), false, (-4), characterClass);
SimpleSector simpleSector = new SimpleSector((-4), false, true, (-4), (-4), true, (-4), characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1578, false, false, 1584, 1584, false, 1584, characterClass);
SimpleSector simpleSector = new SimpleSector(1584, false, false, 1584, 1584, false, 1584, characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(982, false, true, 100, 982, true, 100, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea((-2871), 1, simpleSector);
simpleSector.getAreas();
Test 34: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 35: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-11), true, true, (-11), (-11), true, (-11), characterClass);
simpleSector.getDamageBonus();
Test 37: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-5265), true, 159, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 38: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
simpleSector.getDefenseBonus(characterClass);
Test 40: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1753), true, false, 0, (-1753), true, (-1170), characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, characterClass);
simpleSector.getHeight();
Test 42: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 43: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), characterClass);
simpleSector.isAttackerSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, characterClass);
simpleSector.isDefenderSpawn();
Test 45: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, characterClass);
simpleSector.isFlag();
Test 46: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1338, false, true, (-1971), (-1971), true, 1338, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
simpleSector._addArea(simpleArea);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 74
* Number of covered goals: 66
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 105
* Number of covered goals: 100
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 35
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 74
* Number of covered goals: 66
* Generated 47 tests with total length 173
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), arg7);
simpleSector.getOccupier();
assertEquals((-1), simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertFalse(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorConstructionAndGetters
* Compiling Tests
refined test name is: testGettersAndSetters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 1118719, 0, false, 0, arg7);
boolean attackerSpawn = simpleSector.isAttackerSpawn();
assertFalse(simpleSector.isFlag());
assertTrue(attackerSpawn);
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(0, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testIsAttackerSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertEquals((-1), simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isAttackerSpawn());
assertEquals((-3710), attackBonus);
assertFalse(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetAttackBonusForGreenhorn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-2422), false, false, (-2422), (-2422), false, (-2422), arg7);
boolean flag = simpleSector.isFlag();
assertFalse(flag);
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isDefenderSpawn());
assertEquals((-2422), simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testCreateSimpleSectorAndVerifyProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7);
SectorObserver arg0 = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(arg0);
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testRemoveObservershouldModifySectorState
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SimpleBattleField simpleBattleField = new SimpleBattleField(8, 12);
assertEquals(12, simpleBattleField.getHeight());


** It was a parseable test case! 
refined test name is: testGetHeightReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7);
simpleSector.getAreas();
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetAreas
* Compiling Tests
refined test name is: testGetAreas
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7);
boolean defenderSpawn = simpleSector.isDefenderSpawn();
assertEquals(1237, simpleSector.getHeight());
assertTrue(defenderSpawn);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testIsDefenderSpawnWithGreenhornCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, (-2419), true, 0, arg7);
int height = simpleSector.getHeight();
assertFalse(simpleSector.isDefenderSpawn());
assertEquals(1231, height);
assertFalse(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testCreateSimpleSectorWithCorrectParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector arg2 = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), arg7);
SimpleArea simpleArea = new SimpleArea(0, 1773, arg2);
simpleArea.free();
assertFalse(arg2.isAttackerSpawn());
assertFalse(arg2.isDefenderSpawn());
assertEquals(756, simpleArea.getHeight());
assertFalse(arg2.isFlag());


** It was a parseable test case! 
refined test name is: testFree
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(1237, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testGainControlWithNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7);
simpleSector.gainControl((CombatantSide) null);
simpleSector.gainControl((CombatantSide) null);
simpleSector.free();
assertEquals(1237, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGainControlAndFree
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, arg7);
boolean occupied = simpleSector.isOccupied();
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertFalse(occupied);


** It was a parseable test case! 
refined test name is: testSimpleSectorProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, arg7);
CombatantSide arg0 = CombatantSide.DEFENDER;
simpleSector.gainControl(arg0);
boolean occupied = simpleSector.isOccupied();
assertTrue(occupied);


** It was a parseable test case! 
refined test name is: testOccupySectorWithDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg0);
SimpleArea simpleArea = new SimpleArea(1237, (-1), arg2);
SectorBonus bonus = arg2.getBonus(arg0);
assertTrue(arg2.isFlag());
assertTrue(arg2.isAttackerSpawn());
assertEquals(2474, bonus.defendBonus);
assertEquals(2474, bonus.attackBonus);
assertEquals(1237, arg2.getHeight());
assertTrue(arg2.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetBonusReturnsCorrectValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, arg7);
CharacterClass arg0 = CharacterClass.DUELANT;
int classBonus = simpleSector.classBonus(arg0);
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, classBonus);
assertTrue(simpleSector.isFlag());
assertEquals(1768, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testClassBonusreturnsZeroForDuelant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, arg7);
simpleSector.hashCode();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(2117, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorHashCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, arg7);
boolean equals = simpleSector.equals((Object) null);
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertEquals(1, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg0 = new SimpleSector(0, true, true, 0, 0, false, 0, arg7);
boolean equals = arg0.equals(arg0);
assertTrue(arg0.isDefenderSpawn());
assertEquals(0, arg0.getHeight());
assertTrue(equals);
assertFalse(arg0.isFlag());
assertTrue(arg0.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorIsEqualToItself
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2117, true, true, 2117, 2, true, 2, arg0);
boolean equals = simpleSector.equals(arg0);
assertFalse(equals);
assertEquals(2117, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testEqualsCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), arg7);
SimpleSector arg0 = new SimpleSector((-4), false, false, (-4), (-4), false, (-4), arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(arg0.isDefenderSpawn());
assertFalse(arg0.isAttackerSpawn());
assertFalse(arg0.isFlag());
assertEquals((-4), arg0.getHeight());
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testCreateSimpleSectorObjectsWithTheSameValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(1237, true, true, 1237, 1237, true, 1237, arg7);
SimpleArea simpleArea = new SimpleArea(1237, (-1), arg2);
SimpleSector arg0 = new SimpleSector((-1), false, true, 0, 0, false, 1364, arg7);
boolean equals = arg2.equals(arg0);
assertFalse(arg0.isDefenderSpawn());
assertTrue(arg0.isAttackerSpawn());
assertFalse(equals);
assertEquals((-1), arg0.getHeight());
assertFalse(arg0.isFlag());


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentSectorValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, arg7);
SimpleSector arg0 = new SimpleSector(2780, true, true, 2780, 2, true, 399, arg7);
boolean equals = simpleSector.equals(arg0);
assertTrue(arg0.isFlag());
assertFalse(equals);
assertEquals(2780, arg0.getHeight());
assertTrue(arg0.isDefenderSpawn());
assertTrue(arg0.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: equalswithDifferentPropertiesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, false, 0, arg7);
SimpleSector arg0 = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), arg7);
boolean equals = simpleSector.equals(arg0);
assertEquals((-1), arg0.getHeight());
assertTrue(arg0.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(arg0.isAttackerSpawn());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testSimpleSectorsAreEqualWhenPropertiesMatch
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7);
SimpleSector arg0 = new SimpleSector(0, true, true, 0, (-3710), true, 0, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(equals);
assertTrue(arg0.isFlag());
assertTrue(arg0.isAttackerSpawn());
assertEquals(0, arg0.getHeight());
assertTrue(arg0.isDefenderSpawn());
assertEquals(0, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testNotEqualWhenDifferentFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg0 = new SimpleSector(7, false, false, 7, (-21), false, 7, arg7);
SimpleSector simpleSector = new SimpleSector(7, false, false, 7, 7, false, 7, arg7);
boolean equals = simpleSector.equals(arg0);
assertEquals(7, arg0.getHeight());
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(equals);
assertFalse(arg0.equals((Object)simpleSector));
assertFalse(simpleSector.isFlag());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentObjects
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-4), true, true, (-4), (-4), false, (-4), arg7);
SimpleSector arg0 = new SimpleSector((-4), false, true, (-4), (-4), true, (-4), arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(arg0.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertFalse(equals);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(arg0.isAttackerSpawn());
assertEquals((-4), arg0.getHeight());


** It was a parseable test case! 
refined test name is: testEqualsDifferentFields
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg0 = new SimpleSector(1578, false, false, 1584, 1584, false, 1584, arg7);
SimpleSector simpleSector = new SimpleSector(1584, false, false, 1584, 1584, false, 1584, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isFlag());
assertFalse(equals);
assertEquals(1578, arg0.getHeight());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testEqualsDifferentValuesForPropertiesReturnsFalse
* Compiling Tests
refined test name is: testEqualsDifferentValuesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, (-3710), false, (-3710), arg0);
int classBonus = simpleSector.classBonus(arg0);
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-1), simpleSector.getHeight());
assertEquals((-3710), classBonus);
assertFalse(simpleSector.isFlag());
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testClassBonusGREENHORNSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(982, false, true, 100, 982, true, 100, arg0);
int classBonus = simpleSector.classBonus(arg0);
assertEquals(100, classBonus);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(982, simpleSector.getHeight());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testClassBonusForWorker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(0, true, true, 0, 0, false, 0, arg7);
SimpleArea simpleArea = new SimpleArea((-2871), 1, arg2);
arg2.getAreas();
assertTrue(arg2.isDefenderSpawn());
assertEquals(0, arg2.getHeight());
assertFalse(arg2.isFlag());
assertTrue(arg2.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetAreasIsAttackerSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(2935, attackBonus);
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testCalculateAttackBonusForWorkerClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), arg7);
CharacterClass arg0 = CharacterClass.WORKER;
int attackBonus = simpleSector.getAttackBonus(arg0);
assertFalse(simpleSector.isFlag());
assertEquals(0, attackBonus);
assertEquals(2115, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetAttackBonusWorker
* Compiling Tests
refined test name is: testGetAttackBonusForWorkerInSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-11), true, true, (-11), (-11), true, (-11), arg7);
int damageBonus = simpleSector.getDamageBonus();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-11), simpleSector.getHeight());
assertEquals(0, damageBonus);


** It was a parseable test case! 
refined test name is: testGetDamageBonusSimpleSectorReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (-5265), true, 159, arg0);
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertEquals((-5106), defenseBonus);
assertFalse(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertFalse(simpleSector.isAttackerSpawn());
assertEquals(0, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testGetDefenseBonus
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1768, true, true, 1768, 1768, true, 2025, arg0);
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertEquals(1768, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(3793, defenseBonus);


** It was a parseable test case! 
refined test name is: testCalculateDefenseBonusForSimpleSector
* Compiling Tests
refined test name is: testCalculateDefenseBonusSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2115, false, true, 0, 0, false, (-3466), arg7);
CharacterClass arg0 = CharacterClass.WORKER;
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertEquals(0, defenseBonus);
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isFlag());
assertEquals(2115, simpleSector.getHeight());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetDefenseBonusWorkerClassReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1753), true, false, 0, (-1753), true, (-1170), arg7);
int height = simpleSector.getHeight();
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertEquals((-1753), height);
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetHeightCorrectHeightReturned
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2935, arg7);
int height = simpleSector.getHeight();
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, height);
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testSimpleSectorProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, false, 0, 0, true, (-1), arg7);
CombatantSide arg0 = CombatantSide.ATTACKER;
simpleSector.gainControl(arg0);
simpleSector.getOccupier();
assertTrue(simpleSector.isOccupied());


** It was a parseable test case! 
refined test name is: testGainControlOfCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(756, false, false, 1773, 1773, false, (-1803), arg7);
boolean attackerSpawn = simpleSector.isAttackerSpawn();
assertEquals(756, simpleSector.getHeight());
assertFalse(attackerSpawn);
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testCreateSimpleSectorWithCorrectValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1, false, true, 0, 982, false, 1237, arg7);
boolean defenderSpawn = simpleSector.isDefenderSpawn();
assertEquals(1, simpleSector.getHeight());
assertFalse(defenderSpawn);
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testSimpleSectorIsDefenderAttackerFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 2780, arg7);
boolean flag = simpleSector.isFlag();
assertEquals(0, simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());
assertTrue(flag);
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testIsFlagSimpleSectorWithGreenhornReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg2 = new SimpleSector(1338, false, true, (-1971), (-1971), true, 1338, arg7);
SimpleArea arg0 = new SimpleArea(0, (-1), arg2);
arg2._addArea(arg0);
assertEquals(1338, arg0.getHeight());
assertTrue(arg2.isAttackerSpawn());
assertTrue(arg2.isFlag());
assertFalse(arg2.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testAddArea
* Compiling Tests
refined test name is: testAddAreaAndGetHeight
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:10:51.543 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:10:51.585 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:51.667 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:10:51.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:51.749 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:51.751 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:51.829 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:51.831 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:51.921 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:51.923 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:51.996 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:10:51.998 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.070 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.153 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.155 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.217 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.219 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.315 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.407 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.499 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.586 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.588 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.676 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:10:52.679 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.770 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.772 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.863 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:52.957 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:52.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.046 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.048 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.136 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.229 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.234 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.319 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.320 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.404 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.406 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.489 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.573 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.660 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.662 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.745 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.747 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.833 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:10:53.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:53.926 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:53.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.007 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.009 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.085 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.086 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.181 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.183 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.276 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:10:54.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:10:54.365 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.368 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.452 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.454 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.535 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:10:54.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.613 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.614 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.693 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.694 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.753 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.754 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.832 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:54.947 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:54.951 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:55.039 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:55.041 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:55.132 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:55.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:55.218 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:10:55.220 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
[MASTER] 06:10:55.310 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:10:55.312 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 6 called: 1 to improve: false
** Write a test suite: 27 called: 2 to improve: false
** Write a test suite: 32 called: 3 to improve: false
** Write a test suite: 35 called: 4 to improve: false
** Write a test suite: 43 called: 5 to improve: false
[MASTER] 06:10:56.189 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:10:56.190 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 16 called: 3 to improve: false
** Write a test suite: 37 called: 4 to improve: false
** Write a test suite: 43 called: 5 to improve: false
[MASTER] 06:10:57.068 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4464832783224569167.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:10:57.070 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4464832783224569167.jar
* Writing tests to file
* Writing JUnit test case 'SimpleSector_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 16 called: 3 to improve: false
** Write a test suite: 37 called: 4 to improve: false
** Write a test suite: 43 called: 5 to improve: false
* Done!

* Computation finished
