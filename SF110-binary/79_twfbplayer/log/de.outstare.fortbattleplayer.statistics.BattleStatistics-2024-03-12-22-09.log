* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.statistics.BattleStatistics
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 5605
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:09:13.472 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:09:13.489 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:09:13.491 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:09:13.540 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntBinaryOperator
[MASTER] 22:09:13.542 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntUnaryOperator
[MASTER] 22:09:13.599 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:09:13.600 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:09:13.602 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 22:09:17.782 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.statistics.BattleStatistics
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 693
* Using seed 1710281350434
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 327 / 693
[Progress:>                             0%] [Cov:===================>               55%][Progress:>                             1%] [Cov:===================>               57%][Progress:>                             2%] [Cov:====================>              58%][Progress:>                             2%] [Cov:====================>              59%][Progress:>                             2%] [Cov:====================>              59%][Progress:>                             2%] [Cov:====================>              59%][MASTER] 22:09:25.475 [logback-1] WARN  TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:09:25.475 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:=>                            4%] [Cov:=====================>             62%][Progress:=>                            4%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           68%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][MASTER] 22:09:31.423 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:==========================>        76%][Progress:==>                           7%] [Cov:===========================>       78%][Progress:==>                           7%] [Cov:===========================>       78%][Progress:==>                           7%] [Cov:===========================>       78%][Progress:==>                           7%] [Cov:===========================>       78%][Progress:==>                           7%] [Cov:===========================>       78%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][MASTER] 22:09:39.048 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:=============================>     83%][Progress:====>                         14%] [Cov:=============================>     83%][Progress:====>                         14%] [Cov:=============================>     83%][Progress:====>                         14%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    86%] [Cov:=============================>     84%][Progress:=========================>    86%] [Cov:=============================>     84%][Progress:=========================>    86%] [Cov:=============================>     84%][Progress:=========================>    86%] [Cov:=============================>     84%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%]
* Search finished after 201s and 945 generations, 583446 statements, best individual has fitness: 90.0
* Generated before the refinement 65 tests with total length 439
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfBayonets = battleStatistics.numberOfBayonets(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private int numberOfBayonetsAttacker = 0;

    private int numberOfBayonetsDefender = 0;

    public  BattleStatistics(int numberOfBayonetsAttacker, int numberOfBayonetsDefender) {
        this.numberOfBayonetsAttacker = numberOfBayonetsAttacker;
        this.numberOfBayonetsDefender = numberOfBayonetsDefender;
    }

    public void numberOfBayonets(CombatantSide combatantSide) {
        if (combatantSide == CombatantSide.ATTACKER) {
            this.numberOfBayonetsAttacker++;
        } else {
            this.numberOfBayonetsDefender++;
        }
    }
}
statement is: this.numberOfBayonetsAttacker = numberOfBayonetsAttacker, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.numberOfBayonetsDefender = numberOfBayonetsDefender, class spoon.support.reflect.code.CtAssignmentImpl
statement is: if (combatantSide == CombatantSide.ATTACKER) {
    this.numberOfBayonetsAttacker++;
} else {
    this.numberOfBayonetsDefender++;
}, class spoon.support.reflect.code.CtIfImpl
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 0)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(25, 157, arg2)
statement is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.newDestination((Combatant) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), characterClass);
SimpleArea simpleArea = new SimpleArea(25, 157, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 100);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, -1123, characterClass);
        SimpleArea simpleArea = new SimpleArea(100, 100, simpleSector);
        battleStatistics.newDestination(((Combatant) (null)), simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, -1123, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(100, 100, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.newDestination(((Combatant) (null)), simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.newDestination(((Combatant) (null)), simpleArea) target is: battleStatistics method is: newDestination(Combatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 100;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
boolean _boolean = true;
boolean _boolean = true;
int _int = 25;
int _int = 25;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-1123), (CharacterClass) _int);
int _int = 100;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "StatusPanel.playerCount", arg4, arg5, "STOP")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, (-1))
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-1));
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(0, 0);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Falcon", 150, 20);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, -1);
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Falcon", 150, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, -1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, -1) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 2986;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
int _int = 0;
Point point = new Point(_int, _int);
int _int = 2986;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 10;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Falcon";
int _int = 150;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "StatusPanel.playerCount";
String string = "STOP";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "STOP");
int _int = null;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfShinyOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 2986;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
        int expectedNumberOfLoadingChambers = 10;// This value is just an example, it can be any positive integer

        assertEquals(expectedNumberOfLoadingChambers, battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(ATTACKER));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide) target is: battleStatistics method is: numberOfLoadingChamerOrEnhancedPatrons(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: int expectedNumberOfLoadingChambers = 10// This value is just an example, it can be any positive integer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedNumberOfLoadingChambers, battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(ATTACKER)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedNumberOfLoadingChambers, battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(ATTACKER)) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: int _int = 10
TestCase is: int _int = 1980;
int _int = 1980;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
int _int = 10;

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "U", arg4, arg5, "U")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Uther the Lightbringer", characterClass, simpleWeapon, "King of the North");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Uther the Lightbringer", characterClass, simpleWeapon, "King of the North"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Uther the Lightbringer";
String string = "King of the North";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(15, 20);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(15, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 15;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 23456);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfFettesOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 23456), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
int _int = 23456;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfSchmierOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfSchmierOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(combatantSide) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(17, 17)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(17, 17);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfHipFlasks(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(17, 17), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfHipFlasks(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(combatantSide) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 17;
int _int = 17;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: getHitsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 45);
        battleStatistics.getHitsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 45), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getHitsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getHitsPerRound() target is: battleStatistics method is: getHitsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getHitsPerRound()Ljava/util/Map;
TestCase is: int _int = 100;
int _int = 45;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getHitsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(20, 15);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(20, 15), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 20;
int _int = 15;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "_mN", arg4, arg5, "_mN")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(123456789, true, true, 987654321, 987654321, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(123456789, 987654321, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 987654321, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "The Great Sword of Light", 987654321, 987654321);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "Arthur", characterClass, simpleWeapon, "The Great Sword of Light");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(123456789, true, true, 987654321, 987654321, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(123456789, 987654321, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 987654321, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "The Great Sword of Light", 987654321, 987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "Arthur", characterClass, simpleWeapon, "The Great Sword of Light"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 123456789;
boolean _boolean = true;
boolean _boolean = true;
int _int = 987654321;
int _int = 987654321;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 123456789;
int _int = 987654321;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 987654321;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "The Great Sword of Light";
int _int = 987654321;
int _int = 987654321;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
String string = "Arthur";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: getShotsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getShotsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        battleStatistics.getShotsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getShotsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getShotsPerRound() target is: battleStatistics method is: getShotsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getShotsPerRound()Ljava/util/Map;
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getShotsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1980)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1980)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1980)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(JANUARY_ROUND, JANUARY_ROUND);
        battleStatistics.setRound(JANUARY_ROUND);
        battleStatistics.setRound(FEBRUARY_ROUND);
        battleStatistics.setRound(MARCH_ROUND);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(JANUARY_ROUND, JANUARY_ROUND), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(JANUARY_ROUND), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(JANUARY_ROUND) target is: battleStatistics method is: setRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.setRound(FEBRUARY_ROUND), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(FEBRUARY_ROUND) target is: battleStatistics method is: setRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.setRound(MARCH_ROUND), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(MARCH_ROUND) target is: battleStatistics method is: setRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4, 4)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point((-1042), (-3600))
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 289, "F", arg4, arg5, "F")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(4)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1297)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(4);
battleStatistics.setRound(1297);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4, 4);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(-1042, -3600);
        SimpleSector simpleSector = new SimpleSector(4, false, true, 60, -1259, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.setRound(4);
        battleStatistics.setRound(1297);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(-1042, -3600), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleSector simpleSector = new SimpleSector(4, false, true, 60, -1259, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.setRound(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(1297), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1297) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 4;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 4;
String string = "";
int _int = 4;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
Point point = new Point((-1042), (-3600));
int _int = 4;
boolean _boolean = false;
boolean _boolean = true;
int _int = 60;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 2, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 289;
String string = "F";
String string = "F";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "F");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 1297;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1073741824, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1073741824, "", arg4, arg5, "")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1073741824)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1073741824)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1073741824);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
        SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "MP5", 1073741824, 1073741824);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "John Doe", characterClass, simpleWeapon, "USA");
        battleStatistics.setRound(1073741824);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.setRound(1073741824);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "MP5", 1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "John Doe", characterClass, simpleWeapon, "USA"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(1073741824), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1073741824) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.setRound(1073741824), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1073741824) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1073741824;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1073741824;
int _int = 1073741824;
boolean _boolean = true;
int _int = 1073741824;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "MP5";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "John Doe";
String string = "USA";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "_mN", arg4, arg5, "_mN")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleWeapon simpleWeapon = new SimpleWeapon("Laser Rifle", 10, 5, 2);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "John Doe", characterClass, simpleWeapon, "Sniper");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.combatantLifetime(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("Laser Rifle", 10, 5, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "John Doe", characterClass, simpleWeapon, "Sniper"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: battleStatistics.combatantLifetime(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(simpleCombatant) target is: battleStatistics method is: combatantLifetime(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Laser Rifle";
int _int = 10;
int _int = 5;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, _int);
boolean _boolean = false;
boolean _boolean = null;
((BattleStatistics) _int).isOnline((Combatant) _boolean, _boolean);
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-556), (-556))
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(4, 4, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-556), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-556), "uHu{FHwnR/d", arg4, arg5, "uHu{FHwnR/d")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-556), (-556));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-556), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-556), "uHu{FHwnR/d", characterClass, simpleWeapon, "uHu{FHwnR/d");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(4, true, true, 4, 500, true, 600, characterClass);
        SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(4, "Wooden Sword", 2, 4);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Ash Ketchum", characterClass, simpleWeapon, "Leaf Green");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(4, true, true, 4, 500, true, 600, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(4, "Wooden Sword", 2, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Ash Ketchum", characterClass, simpleWeapon, "Leaf Green"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 4;
boolean _boolean = true;
boolean _boolean = true;
int _int = 4;
int _int = 500;
boolean _boolean = true;
int _int = 600;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 4;
int _int = 4;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4;
String string = "Wooden Sword";
int _int = 2;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Ash Ketchum";
String string = "Leaf Green";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "uHu{FHwnR/d");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2792, 5)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(4895, 10);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(4895, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4895;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "_mN", arg4, arg5, "_mN")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Laser Pistol", 10, 20);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Grigory", characterClass, simpleWeapon, "Grigory");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Laser Pistol", 10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Grigory", characterClass, simpleWeapon, "Grigory"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Laser Pistol";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Grigory";
String string = "Grigory";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "_mN", arg4, arg5, "_mN")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(25, "Iron Sword", 35, 100);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Ghoul", characterClass, simpleWeapon, "Wizard");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "Iron Sword", 35, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Ghoul", characterClass, simpleWeapon, "Wizard"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Iron Sword";
int _int = 35;
int _int = 100;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Ghoul";
String string = "Wizard";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(17, 17)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(17, 17, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 17, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 17, "bn#;", arg4, arg5, "bn#;")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "bn#;", characterClass, simpleWeapon, "bn#;");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(17, 17);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
        SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(17, "Rifle", 17, 17);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "Alice", characterClass, simpleWeapon, "Alice");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(17, 17), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(17, "Rifle", 17, 17), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "Alice", characterClass, simpleWeapon, "Alice"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 17;
int _int = 17;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 17;
boolean _boolean = false;
boolean _boolean = false;
int _int = 17;
int _int = 17;
boolean _boolean = false;
int _int = 17;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 17;
int _int = 17;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 17;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 17;
String string = "Rifle";
int _int = 17;
int _int = 17;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 17;
String string = "Alice";
String string = "Alice";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "bn#;");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfGraphitLubricants(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfGraphitLubricants(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(((CombatantSide) (null))) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1980, 1980, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1980, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1980, "u32kwIf)%HgHu*\"j?", arg4, arg5, "u32kwIf)%HgHu*\"j?")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
        SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon("dagger", 1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("dagger", 1980, "u32kwIf)%HgHu*\"j?", 1980, 1980), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1980;
int _int = 1980;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1980;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1980;
int _int = 1980;
boolean _boolean = false;
int _int = 1980;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1980;
int _int = 1980;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1980;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1980;
String string = "u32kwIf)%HgHu*\"j?";
String string = "u32kwIf)%HgHu*\"j?";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _boolean, "u32kwIf)%HgHu*\"j?");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "d", arg4, arg5, "d")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "d", characterClass, simpleWeapon, "d");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Electric sword", 1, 1);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Saruman the White", characterClass, simpleWeapon, "Saruman the White");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Electric sword", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Saruman the White", characterClass, simpleWeapon, "Saruman the White"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 1;
boolean _boolean = true;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Electric sword";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Saruman the White";
String string = "Saruman the White";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "_mN", arg4, arg5, "_mN")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 2);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(3, true, true, 4, 5, true, 6, characterClass);
        SimpleArea simpleArea = new SimpleArea(7, 8, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 9, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Mortar", 11, 12);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, "Sniper", characterClass, simpleWeapon, "Rifle");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(3, true, true, 4, 5, true, 6, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(7, 8, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 9, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Mortar", 11, 12), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, "Sniper", characterClass, simpleWeapon, "Rifle"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3;
boolean _boolean = true;
boolean _boolean = true;
int _int = 4;
int _int = 5;
boolean _boolean = true;
int _int = 6;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 7;
int _int = 8;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 9;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Mortar";
int _int = 11;
int _int = 12;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = "Sniper";
String string = "Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1073741824, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1073741824, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
        SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "M16A2", 1073741824, 1073741824);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "John Doe", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "M16A2", 1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "John Doe", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1073741824;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1073741824;
int _int = 1073741824;
boolean _boolean = true;
int _int = 1073741824;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "M16A2";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(14, 14)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(14, 14, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 14, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 14, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(14, 14);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(14, 14);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
        SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(14, "Laser Cannon", 14, 14);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "Defender");
        battleStatistics.isOnline(simpleCombatant, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(14, 14), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(14, "Laser Cannon", 14, 14), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "Defender"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 14;
int _int = 14;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 14;
boolean _boolean = false;
boolean _boolean = false;
int _int = 14;
int _int = 14;
boolean _boolean = false;
int _int = 14;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 14;
int _int = 14;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 14;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 14;
String string = "Laser Cannon";
int _int = 14;
int _int = 14;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 14;
String string = "";
String string = "Defender";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "U", arg4, arg5, "U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "U", arg4, arg5, "U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
        battleStatistics.isOnline(simpleCombatant, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1980, 1980, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1980, arg2, true)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1980)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1980, "u32kwIf)%HgHu*\"j?", arg4, arg5, "u32kwIf)%HgHu*\"j?")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1980)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, true);
battleStatistics.setRound(1980);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.setRound(1980);
battleStatistics.isOnline(simpleCombatant, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2023, 2045);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(2023, true, true, 2045, 2045, true, 2023, characterClass);
        SimpleArea simpleArea = new SimpleArea(2023, 2045, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2023, simpleArea, true);
        battleStatistics.setRound(2045);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2045, "LASER_CUTTER", 2023, 2045);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2045, "LASER_CUTTER", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
        battleStatistics.setRound(2045);
        battleStatistics.isOnline(simpleCombatant, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2023, 2045), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2023, true, true, 2045, 2045, true, 2023, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2023, 2045, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2023, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(2045), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2045) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2045, "LASER_CUTTER", 2023, 2045), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2045, "LASER_CUTTER", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(2045), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2045) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 2023;
int _int = 2045;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2023;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2045;
int _int = 2045;
boolean _boolean = true;
int _int = 2023;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 2023;
int _int = 2045;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2023;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2045;
((BattleStatistics) _int).setRound(_int);
int _int = 2045;
String string = "LASER_CUTTER";
int _int = 2023;
int _int = 2045;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2045;
String string = "LASER_CUTTER";
String string = "u32kwIf)%HgHu*\"j?";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "u32kwIf)%HgHu*\"j?");
int _int = 2045;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(13, 13)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(13, 13, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 13, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 13, " switched position with ", arg4, arg5, " switched position with ")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " switched position with ", characterClass, simpleWeapon, " switched position with ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(13, 13);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
        SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(13, " a sword ", 13, 13);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " a sword ", characterClass, simpleWeapon, " a shield ");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(13, 13), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, " a sword ", 13, 13), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " a sword ", characterClass, simpleWeapon, " a shield "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 13;
int _int = 13;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 13;
boolean _boolean = true;
boolean _boolean = true;
int _int = 13;
int _int = 13;
boolean _boolean = true;
int _int = 13;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 13;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 13;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = " a sword ";
int _int = 13;
int _int = 13;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = " a sword ";
String string = " a shield ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, " switched position with ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(873, 873)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(873, 873, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 873, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 873, "", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 873, (String) null, arg4, arg5, "c")
statement is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.aimAt(arg0)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(873, 873);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, (String) null, characterClass, simpleWeapon, "c");
simpleCombatant.aimAt(simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(873, 873);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
        SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(873, "M16A2", 873, 873);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "US Army", characterClass, simpleWeapon, "John Doe");
        simpleCombatant.addObserver(battleStatistics);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, ((String) (null)), characterClass, simpleWeapon, "c");
        simpleCombatant.aimAt(simpleCombatant);
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(873, 873), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(873, "M16A2", 873, 873), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "US Army", characterClass, simpleWeapon, "John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, ((String) (null)), characterClass, simpleWeapon, "c"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.aimAt(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.aimAt(simpleCombatant) target is: simpleCombatant method is: aimAt(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 29
Matched Method is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 873;
int _int = 873;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 873;
boolean _boolean = true;
boolean _boolean = true;
int _int = 873;
int _int = 873;
boolean _boolean = true;
int _int = 873;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 873;
int _int = 873;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 873;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 873;
String string = "M16A2";
int _int = 873;
int _int = 873;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 873;
String string = "US Army";
String string = "John Doe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 873;
String string = "c";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) simpleWeapon, string, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "U", arg4, arg5, "U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfGraphitLubricants(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfGraphitLubricants(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(combatantSide) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "uH{u{]FH<w5Rd", arg4, arg5, "uH{u{]FH<w5Rd")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantStateA = new CombatantState(simpleArea, "combatantA", simpleArea, false);
        CombatantState combatantStateB = new CombatantState(simpleArea, "combatantB", simpleArea, false);
        SimpleWeapon simpleWeaponA = new SimpleWeapon(0, "SWORD_OF_LIGHT", 0, 0);
        CombatantSide combatantSideA = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatantA = new SimpleCombatant(combatantSideA, combatantStateA, "combatantA", characterClass, simpleWeaponA, "Combatant A");
        SimpleWeapon simpleWeaponB = new SimpleWeapon(0, "WAND_OF_MAGIC", 0, 0);
        CombatantSide combatantSideB = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatantB = new SimpleCombatant(combatantSideB, combatantStateB, "combatantB", characterClass, simpleWeaponB, "Combatant B");
        battleStatistics.hasSwappedPosition(simpleCombatantA, simpleCombatantB);
        battleStatistics.switchedPosList(combatantSideA);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantStateA = new CombatantState(simpleArea, "combatantA", simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantStateB = new CombatantState(simpleArea, "combatantB", simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeaponA = new SimpleWeapon(0, "SWORD_OF_LIGHT", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSideA = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatantA = new SimpleCombatant(combatantSideA, combatantStateA, "combatantA", characterClass, simpleWeaponA, "Combatant A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeaponB = new SimpleWeapon(0, "WAND_OF_MAGIC", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSideB = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatantB = new SimpleCombatant(combatantSideB, combatantStateB, "combatantB", characterClass, simpleWeaponB, "Combatant B"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatantA, simpleCombatantB), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatantA, simpleCombatantB) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: battleStatistics.switchedPosList(combatantSideA), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSideA) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
String string = "combatantA";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
String string = "combatantB";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
int _int = 0;
String string = "SWORD_OF_LIGHT";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "WAND_OF_MAGIC";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
SimpleCombatant simpleCombatant = null;
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.switchedPosList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-3), (-3))
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
battleStatistics.switchedPosList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the 'BattleStatistics' class
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        battleStatistics.switchedPosList(ATTACKER);
    }
}
statement is: // Improved test data for the 'BattleStatistics' class
BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(ATTACKER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(ATTACKER) target is: battleStatistics method is: switchedPosList()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.critList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 2);
        battleStatistics.critList("Blue");
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.critList("Blue"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList("Blue") target is: battleStatistics method is: critList(java.lang.String)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
TestCase is: int _int = 10;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
String string = "Blue";
((BattleStatistics) _int).critList((CombatantSide) string);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.criticalHitDamage(combatantSide);
        // Test data for the critical hit damage method.
        int[] expectedCriticalHitDamage = new int[]{ 10, 15, 20, 25 };
        String[] expectedCriticalHitType = new String[]{ "CRIT", "CRIT", "CRIT", "CRIT" };
        // Test data for the non-critical hit damage method.
        int[] expectedNonCriticalHitDamage = new int[]{ 10, 20, 30, 40 };
        String[] expectedNonCriticalHitType = new String[]{ "NORMAL", "NORMAL", "NORMAL", "NORMAL" };
        // Test data for the total damage method.
        int[] expectedTotalDamage = new int[]{ 10, 35, 70, 115 };
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Test data for the critical hit damage method.
int[] expectedCriticalHitDamage = new int[]{ 10, 15, 20, 25 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] expectedCriticalHitType = new String[]{ "CRIT", "CRIT", "CRIT", "CRIT" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Test data for the non-critical hit damage method.
int[] expectedNonCriticalHitDamage = new int[]{ 10, 20, 30, 40 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] expectedNonCriticalHitType = new String[]{ "NORMAL", "NORMAL", "NORMAL", "NORMAL" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Test data for the total damage method.
int[] expectedTotalDamage = new int[]{ 10, 35, 70, 115 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
TestCase is: int _int = 10;
int _int = 2986;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "U", arg4, arg5, "U")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.setRound(1);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
        battleStatistics.setRound(1);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.turnOrder(combatantSide);
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
        battleStatistics.setRound(1);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.turnOrder(combatantSide);
        // Descriptive test data examples: }}
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 34
Matched Method is: setRound(I)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 34
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 34
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Descriptive test data examples: }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1073741824, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1073741824, "a*xR!cgJSqC1JTtW", arg4, arg5, "a*xR!cgJSqC1JTtW")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1073741824)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "a*xR!cgJSqC1JTtW", characterClass, simpleWeapon, "a*xR!cgJSqC1JTtW");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
        SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "Ak-47", 1073741824, 1073741824);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "Gennady", characterClass, simpleWeapon, "Gennady");
        battleStatistics.setRound(1073741824);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.turnOrder(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "Ak-47", 1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "Gennady", characterClass, simpleWeapon, "Gennady"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(1073741824), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1073741824) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(((CombatantSide) (null))) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1073741824;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1073741824;
int _int = 1073741824;
boolean _boolean = true;
int _int = 1073741824;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "Ak-47";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "Gennady";
String string = "Gennady";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "a*xR!cgJSqC1JTtW");
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "", arg4, arg5, "")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(35)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(35);
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.SOLDIER;// Changed to a more representative class for testing

        SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);// Changed to a more representative weapon for testing

        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
        battleStatistics.setRound(35);
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide attackerSide = CombatantSide.ATTACKER;// Added to represent the attacker side in the test data

        battleStatistics.turnOrder(attackerSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER// Changed to a more representative class for testing
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0)// Changed to a more representative weapon for testing
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(35), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(35) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER// Added to represent the attacker side in the test data
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.turnOrder(attackerSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(attackerSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 35;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 35;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{WFY<wBRV";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 35;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1)
statement is: getNotShootersPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
battleStatistics.getNotShootersPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        battleStatistics.setRound(3);
        battleStatistics.getNotShootersPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.getNotShootersPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getNotShootersPerRound() target is: battleStatistics method is: getNotShootersPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getNotShootersPerRound()Ljava/util/Map;
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3;
((BattleStatistics) _int).setRound(_int);
((BattleStatistics) _int).getNotShootersPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1073741824, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1073741824, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
        SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "Awesome Sword", 1073741824, 1073741824);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "Sir Reginald", characterClass, simpleWeapon, "Red");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "Awesome Sword", 1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "Sir Reginald", characterClass, simpleWeapon, "Red"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1073741824;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1073741824;
int _int = 1073741824;
boolean _boolean = true;
int _int = 1073741824;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "Awesome Sword";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "Sir Reginald";
String string = "Red";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(75, 75)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(75, 75, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 50, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-3248), "(L", arg4, arg5, "*")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(75, 75);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, characterClass);
SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3248), "(L", characterClass, simpleWeapon, "*");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(75, 75);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, -3248, true, 903, characterClass);
        SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -3248, "(L", characterClass, simpleWeapon, "*");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(75, 75), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, -3248, true, 903, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -3248, "(L", characterClass, simpleWeapon, "*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 75;
int _int = 75;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 4924;
boolean _boolean = true;
boolean _boolean = true;
int _int = 75;
boolean _boolean = true;
int _int = 903;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 903, (CharacterClass) battleStatistics);
int _int = 75;
int _int = 75;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 75;
String string = "OgoHvWvu`";
int _int = 4924;
int _int = 4924;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "(L";
String string = "*";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "*");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3325, 13, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2792, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-6), "7v8z( 0v", arg4, arg5, "Ru*}")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2792, 5)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6), "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);// This line is unchanged

        CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);// This line is unchanged

        CombatantSide combatantSide = CombatantSide.DEFENDER;// This line is unchanged

        SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);// This line is unchanged

        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -6, "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");// This line is unchanged

        BattleStatistics battleStatistics = new BattleStatistics(2792, 5);// This line is unchanged

        battleStatistics.isOnline(simpleCombatant, false);// This line is changed to use more descriptive values for the test data

        battleStatistics.amountOfDefenseBonus(combatantSide);// This line is changed to use more descriptive values for the test data }}

    }
}
statement is: SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector)// This line is unchanged
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false)// This line is unchanged
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER// This line is unchanged
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824)// This line is unchanged
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -6, "7v8z( 0v", characterClass, simpleWeapon, "Ru*}")// This line is unchanged
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(2792, 5)// This line is unchanged
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false)// This line is changed to use more descriptive values for the test data
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false)// This line is changed to use more descriptive values for the test data
 target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 16
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide)// This line is changed to use more descriptive values for the test data }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide)// This line is changed to use more descriptive values for the test data }}
 target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 16
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3325;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 2792;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "_mN?";
int _int = 13;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "7v8z( 0v";
String string = "Ru*}";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, "Ru*}");
int _int = 2792;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = false;
((BattleStatistics) string).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) string).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(13, 13)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(13, 13, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 13, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 13, ";#C8M", arg4, arg5, ";#C8M")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, ";#C8M", characterClass, simpleWeapon, ";#C8M");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 100);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 100, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, ";#C8M", characterClass, simpleWeapon, ";#C8M");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 100, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, ";#C8M", characterClass, simpleWeapon, ";#C8M"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 50;
int _int = 100;
boolean _boolean = true;
int _int = 50;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = ";#C8M";
int _int = 13;
int _int = 13;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 50;
String string = ";#C8M";
String string = ";#C8M";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ";#C8M");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.combatantLifetime(new Combatant("Falcon", 50, 100));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.combatantLifetime(new Combatant("Falcon", 50, 100)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Falcon", 50, 100)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2792, 5)
statement is: de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter
statement code is: WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter()
statement is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(1000, 5);
        WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
        battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter) target is: battleStatistics method is: countWeaponMods(CombatantSide,WeaponModCounter.SchmierOilCounter)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 1000;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = null;
((BattleStatistics) _int).countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point((-487), (-487))
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", arg4, arg5, "")
statement is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isHit(arg0, 258, 2)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 258, 2);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
        Point point = new Point(-487, -487);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(-487, true, true, 2, 1, false, -487, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
        battleStatistics.isHit(simpleCombatant, 258, 2);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(-487, -487), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-487, true, true, 2, 1, false, -487, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isHit(simpleCombatant, 258, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isHit(simpleCombatant, 258, 2) target is: battleStatistics method is: isHit(SimpleCombatant,int,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 0;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
String string = "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !";
int _int = 0;
int _int = 2116;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
Point point = new Point((-487), (-487));
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, false, (-487), (CharacterClass) string);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
int _int = 258;
int _int = 2;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(788, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1682, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1682, "U", arg4, arg5, "uH{u{]FH<w5Rd")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(788, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(788, 1);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-651, "uH{u{]FH<w5Rd", 788, 788);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.aimsAt(simpleCombatant, new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd"));
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(788, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-651, "uH{u{]FH<w5Rd", 788, 788), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.aimsAt(simpleCombatant, new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd")) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 788;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1682;
boolean _boolean = true;
boolean _boolean = false;
int _int = 788;
int _int = 1624;
boolean _boolean = true;
int _int = 1682;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1682;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "uH{u{]FH<w5Rd";
int _int = 788;
int _int = 788;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 788);
int _int = 1682;
String string = "U";
String string = "uH{u{]FH<w5Rd";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "uH{u{]FH<w5Rd");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 1682;
String string = "U";
String string = "uH{u{]FH<w5Rd";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "uH{u{]FH<w5Rd");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1965, 1136)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round((-2999.0))
test data is: BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
battleStatistics.round((-2999.0));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int year = 1965;
        int month = 10;
        double temperature = -30.0;
    }
}
statement is: int year = 1965, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int month = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double temperature = -30.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -30.0
* this is vulnerable: int _int = 1965
* this is vulnerable: int _int = 10
TestCase is: int _int = 1965;
int _int = 10;

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(50)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(50);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Refined test data for the BattleStatistics class
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.round(75);
    }
}
statement is: // Refined test data for the BattleStatistics class
BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(75), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(75) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 75;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100000, 50000);
        battleStatistics.round(1);
        BattleStatistics battleStatistics2 = new BattleStatistics(200000, 100000);
        battleStatistics2.round(2);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100000, 50000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(1) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
statement is: BattleStatistics battleStatistics2 = new BattleStatistics(200000, 100000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics2.round(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics2.round(2) target is: battleStatistics2 method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: round(D)I
TestCase is: int _int = 100000;
int _int = 50000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
((BattleStatistics) _int).round(_int);
int _int = 200000;
int _int = 100000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "uH{u{]FH<w5Rd", arg4, arg5, "")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(13, 0)
statement is: java.util.Hashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Hashtable<de.outstare.fortbattleplayer.model.CombatantSide, java.util.concurrent.atomic.AtomicInteger>
statement code is: Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>()
statement is: java.util.Hashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Hashtable<de.outstare.fortbattleplayer.model.CombatantSide, de.outstare.fortbattleplayer.statistics.RoundStatistics>
statement code is: Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>()
statement is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.addAndResetRoundCounter(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(13, 0);
        Hashtable<CombatantSide, AtomicInteger> attackerHashtable = new Hashtable<CombatantSide, AtomicInteger>();
        attackerHashtable.put(ATTACKER, new AtomicInteger(5));
        Hashtable<CombatantSide, RoundStatistics> roundStats = new Hashtable<CombatantSide, RoundStatistics>();
        roundStats.put(ATTACKER, new RoundStatistics(5, 2, 3));
        battleStatistics.addAndResetRoundCounter(attackerHashtable, roundStats);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(13, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Hashtable<CombatantSide, AtomicInteger> attackerHashtable = new Hashtable<CombatantSide, AtomicInteger>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: attackerHashtable.put(ATTACKER, new AtomicInteger(5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: attackerHashtable.put(ATTACKER, new AtomicInteger(5)) target is: attackerHashtable method is: put(AtomicInteger)
statement is: Hashtable<CombatantSide, RoundStatistics> roundStats = new Hashtable<CombatantSide, RoundStatistics>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: roundStats.put(ATTACKER, new RoundStatistics(5, 2, 3)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: roundStats.put(ATTACKER, new RoundStatistics(5, 2, 3)) target is: roundStats method is: put(RoundStatistics)
statement is: battleStatistics.addAndResetRoundCounter(attackerHashtable, roundStats), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.addAndResetRoundCounter(attackerHashtable, roundStats) target is: battleStatistics method is: addAndResetRoundCounter(Hashtable,Hashtable)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V
TestCase is: int _int = 13;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
((BattleStatistics) _int).addAndResetRoundCounter(hashtable, hashtable);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-6), (-6))
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved((Combatant) null, (Area) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
battleStatistics.hasMoved((Combatant) null, (Area) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3, 5);
        battleStatistics.hasMoved(new Combatant("Goku", 100), new Area("Forest"));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(new Combatant("Goku", 100), new Area("Forest")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(new Combatant("Goku", 100), new Area("Forest")) target is: battleStatistics method is: hasMoved(Combatant,Area)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 3;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
Area area = null;
((BattleStatistics) _int).hasMoved(combatant, area);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2377, 2377)
statement is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isAlive((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
        battleStatistics.isAlive(((Combatant) (null)));
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.isAlive(new Combatant("John Doe", 50, 30));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2377, 2377), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive(((Combatant) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive(((Combatant) (null))) target is: battleStatistics method is: isAlive(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive(new Combatant("John Doe", 50, 30)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive(new Combatant("John Doe", 50, 30)) target is: battleStatistics method is: isAlive(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2377;
int _int = 2377;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isAlive(combatant);
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isAlive(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isDead((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.isDead(new Combatant("Goku", "Saiyan", 9000));
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isDead(new Combatant("Goku", "Saiyan", 9000)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isDead(new Combatant("Goku", "Saiyan", 9000)) target is: battleStatistics method is: isDead(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isDead(combatant);

* test suite isTestSuite: 129
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), characterClass);
SimpleArea simpleArea = new SimpleArea(25, 157, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-1));
battleStatistics.criticalHitDamage(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
battleStatistics.getFieldStatistics();
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getShotsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(4);
battleStatistics.setRound(1297);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1073741824);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics((-556), (-556));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-556), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-556), "uHu{FHwnR/d", characterClass, simpleWeapon, "uHu{FHwnR/d");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 23: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "bn#;", characterClass, simpleWeapon, "bn#;");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "d", characterClass, simpleWeapon, "d");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, true);
battleStatistics.setRound(1980);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.setRound(1980);
battleStatistics.isOnline(simpleCombatant, true);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " switched position with ", characterClass, simpleWeapon, " switched position with ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, (String) null, characterClass, simpleWeapon, "c");
simpleCombatant.aimAt(simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.switchedPosList(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
battleStatistics.switchedPosList((CombatantSide) null);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.critList((CombatantSide) null);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.setRound(1);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "a*xR!cgJSqC1JTtW", characterClass, simpleWeapon, "a*xR!cgJSqC1JTtW");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(35);
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
battleStatistics.getNotShootersPerRound();
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, characterClass);
SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3248), "(L", characterClass, simpleWeapon, "*");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 51: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6), "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, ";#C8M", characterClass, simpleWeapon, ";#C8M");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 54: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 258, 2);
battleStatistics.getFieldStatistics();
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
battleStatistics.round((-2999.0));
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(50);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 65: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), (CharacterClass) 100);
int _int = 100;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 66: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
Point point = new Point(0, 0);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Falcon";
int _int = 150;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "StatusPanel.playerCount";
String string = "STOP";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "STOP");
int _int = null;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
((BattleStatistics)10).numberOfShinyOil((CombatantSide) null);

Test 68: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
((BattleStatistics)1980).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 69: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Uther the Lightbringer";
String string = "King of the North";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
((BattleStatistics)1073741824).amountOfAttackBonus((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(15, 20);
((BattleStatistics)15).totalSwaps((CombatantSide) null);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
((BattleStatistics)1073741824).getFieldStatistics();

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(50, 23456);
((BattleStatistics)50).numberOfFettesOil((CombatantSide) null);

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfSchmierOil((CombatantSide) null);

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
((BattleStatistics)17).numberOfHipFlasks((CombatantSide) null);

Test 76: 
BattleStatistics battleStatistics = new BattleStatistics(100, 45);
((BattleStatistics)100).getHitsPerRound();

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(20, 15);
((BattleStatistics)20).criticalHits((CombatantSide) null);

Test 78: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 987654321;
SimpleSector simpleSector = new SimpleSector(123456789, true, true, 987654321, 987654321, true, 0, (CharacterClass) 0);
int _int = 123456789;
int _int = 987654321;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 987654321;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "The Great Sword of Light";
int _int = 987654321;
int _int = 987654321;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
String string = "Arthur";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 79: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).amountOfDefenseBonus((CombatantSide) null);

Test 80: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).getShotsPerRound();

Test 81: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound((int) (Integer) null);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);

Test 82: 
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (int) false, (boolean) 2, 2, (CharacterClass) 4);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 289;
String string = "F";
String string = "F";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "F");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 1297;
((BattleStatistics) _int).setRound(_int);

Test 83: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "MP5";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "John Doe";
String string = "USA";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);

Test 84: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Laser Rifle";
int _int = 10;
int _int = 5;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, _int);
boolean _boolean = false;
boolean _boolean = null;
((BattleStatistics) _int).isOnline((Combatant) _boolean, _boolean);
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 85: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, 500, true, 600, (CharacterClass) 50);
int _int = 4;
int _int = 4;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4;
String string = "Wooden Sword";
int _int = 2;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Ash Ketchum";
String string = "Leaf Green";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "uHu{FHwnR/d");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 86: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 87: 
BattleStatistics battleStatistics = new BattleStatistics(4895, 10);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 88: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Laser Pistol";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Grigory";
String string = "Grigory";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 89: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Iron Sword";
int _int = 35;
int _int = 100;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Ghoul";
String string = "Wizard";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 90: 
int _int = 17;
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, (CharacterClass) 17);
int _int = 17;
int _int = 17;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 17;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 17;
String string = "Rifle";
int _int = 17;
int _int = 17;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 17;
String string = "Alice";
String string = "Alice";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "bn#;");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 91: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

Test 92: 
int _int = 1980;
int _int = 1980;
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, (CharacterClass) 1980);
int _int = 1980;
int _int = 1980;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1980;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1980;
String string = "u32kwIf)%HgHu*\"j?";
String string = "u32kwIf)%HgHu*\"j?";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _boolean, "u32kwIf)%HgHu*\"j?");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 93: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, (CharacterClass) 1);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Electric sword";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Saruman the White";
String string = "Saruman the White";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 94: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 2);
int _int = 4;
SimpleSector simpleSector = new SimpleSector(3, true, true, 4, 5, true, 6, (CharacterClass) 2);
int _int = 7;
int _int = 8;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 9;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Mortar";
int _int = 11;
int _int = 12;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = "Sniper";
String string = "Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 95: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "M16A2";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 96: 
int _int = 14;
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, (CharacterClass) 14);
int _int = 14;
int _int = 14;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 14;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 14;
String string = "Laser Cannon";
int _int = 14;
int _int = 14;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 14;
String string = "";
String string = "Defender";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 97: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 98: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 99: 
int _int = 2023;
BattleStatistics battleStatistics = new BattleStatistics(2023, 2045);
int _int = 2045;
SimpleSector simpleSector = new SimpleSector(2023, true, true, 2045, 2045, true, 2023, (CharacterClass) 2045);
int _int = 2023;
int _int = 2045;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2023;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2045;
((BattleStatistics) _int).setRound(_int);
int _int = 2045;
String string = "LASER_CUTTER";
int _int = 2023;
int _int = 2045;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2045;
String string = "LASER_CUTTER";
String string = "u32kwIf)%HgHu*\"j?";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "u32kwIf)%HgHu*\"j?");
int _int = 2045;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 100: 
int _int = 13;
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
int _int = 13;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, (CharacterClass) 13);
int _int = 13;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 13;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = " a sword ";
int _int = 13;
int _int = 13;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = " a sword ";
String string = " a shield ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, " switched position with ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 101: 
int _int = 873;
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
boolean _boolean = true;
int _int = 873;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, (CharacterClass) 873);
int _int = 873;
int _int = 873;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 873;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 873;
String string = "M16A2";
int _int = 873;
int _int = 873;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 873;
String string = "US Army";
String string = "John Doe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 873;
String string = "c";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) simpleWeapon, string, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 102: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

Test 103: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
String string = "combatantA";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
String string = "combatantB";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
int _int = 0;
String string = "SWORD_OF_LIGHT";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "WAND_OF_MAGIC";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
SimpleCombatant simpleCombatant = null;
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 104: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).switchedPosList((CombatantSide) null);

Test 105: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).switchedPosList((CombatantSide) null);

Test 106: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).critList((CombatantSide) null);

Test 107: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2);
((BattleStatistics)10).critList((CombatantSide) "Blue");

Test 108: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
((BattleStatistics)10).criticalHitDamage((CombatantSide) null);

Test 109: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 110: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "Ak-47";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "Gennady";
String string = "Gennady";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "a*xR!cgJSqC1JTtW");
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 111: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, (CharacterClass) 0);
int _int = 35;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{WFY<wBRV";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 35;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 112: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).setRound(3);
((BattleStatistics) _int).getNotShootersPerRound();

Test 113: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "Awesome Sword";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "Sir Reginald";
String string = "Red";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 114: 
int _int = 75;
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
int _int = 75;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (int) true, (boolean) 903, 903, (CharacterClass) battleStatistics);
int _int = 75;
int _int = 75;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 75;
String string = "OgoHvWvu`";
int _int = 4924;
int _int = 4924;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "(L";
String string = "*";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "*");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 115: 
int _int = 3325;
SimpleArea simpleArea = new SimpleArea(3325, 13, (Sector) 13);
int _int = 2792;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "_mN?";
int _int = 13;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "7v8z( 0v";
String string = "Ru*}";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, "Ru*}");
int _int = 2792;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = false;
((BattleStatistics) string).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) string).amountOfDefenseBonus(combatantSide);

Test 116: 
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(50, 100);
int _int = 50;
SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, (CharacterClass) 100);
int _int = 50;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = ";#C8M";
int _int = 13;
int _int = 13;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 50;
String string = ";#C8M";
String string = ";#C8M";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ";#C8M");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 117: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).combatantLifetime((Combatant) null);

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 5);
((BattleStatistics)5).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 119: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 2, 1, (int) false, false, (-487), (CharacterClass) "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !");
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
int _int = 258;
int _int = 2;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 120: 
int _int = 788;
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
int _int = 788;
int _int = 1624;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1682;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "uH{u{]FH<w5Rd";
int _int = 788;
int _int = 788;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 788);
int _int = 1682;
String string = "U";
String string = "uH{u{]FH<w5Rd";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "uH{u{]FH<w5Rd");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 1682;
String string = "U";
String string = "uH{u{]FH<w5Rd";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "uH{u{]FH<w5Rd");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 121: 

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(75);

Test 123: 
int _int = 100000;
BattleStatistics battleStatistics = new BattleStatistics(100000, 50000);
((BattleStatistics)100000).round(1);
int _int = 200000;
int _int = 100000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
((BattleStatistics) _int).round(_int);

Test 124: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 125: 
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
((BattleStatistics)13).addAndResetRoundCounter(hashtable, hashtable);

Test 126: 
BattleStatistics battleStatistics = new BattleStatistics(3, 5);
((BattleStatistics)3).hasMoved((Combatant) null, (Area) null);

Test 127: 
int _int = 2377;
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
((BattleStatistics)2377).isAlive((Combatant) null);
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isAlive(combatant);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).isDead((Combatant) null);


* Generated after the refinement and before minimization 129 tests with total length 1309
* test suite isTestSuite: 129
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), characterClass);
SimpleArea simpleArea = new SimpleArea(25, 157, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-1));
battleStatistics.criticalHitDamage(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
battleStatistics.getFieldStatistics();
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getShotsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(4);
battleStatistics.setRound(1297);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1073741824);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics((-556), (-556));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-556), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-556), "uHu{FHwnR/d", characterClass, simpleWeapon, "uHu{FHwnR/d");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 23: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "bn#;", characterClass, simpleWeapon, "bn#;");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "d", characterClass, simpleWeapon, "d");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, true);
battleStatistics.setRound(1980);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.setRound(1980);
battleStatistics.isOnline(simpleCombatant, true);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " switched position with ", characterClass, simpleWeapon, " switched position with ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, (String) null, characterClass, simpleWeapon, "c");
simpleCombatant.aimAt(simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.switchedPosList(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
battleStatistics.switchedPosList((CombatantSide) null);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.critList((CombatantSide) null);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.setRound(1);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "a*xR!cgJSqC1JTtW", characterClass, simpleWeapon, "a*xR!cgJSqC1JTtW");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(35);
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
battleStatistics.getNotShootersPerRound();
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, characterClass);
SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3248), "(L", characterClass, simpleWeapon, "*");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 51: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6), "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, ";#C8M", characterClass, simpleWeapon, ";#C8M");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 54: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 258, 2);
battleStatistics.getFieldStatistics();
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
battleStatistics.round((-2999.0));
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(50);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 65: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), (CharacterClass) 100);
int _int = 100;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 66: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
Point point = new Point(0, 0);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Falcon";
int _int = 150;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "StatusPanel.playerCount";
String string = "STOP";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "STOP");
int _int = null;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
((BattleStatistics)10).numberOfShinyOil((CombatantSide) null);

Test 68: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
((BattleStatistics)1980).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 69: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Uther the Lightbringer";
String string = "King of the North";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
((BattleStatistics)1073741824).amountOfAttackBonus((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(15, 20);
((BattleStatistics)15).totalSwaps((CombatantSide) null);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
((BattleStatistics)1073741824).getFieldStatistics();

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(50, 23456);
((BattleStatistics)50).numberOfFettesOil((CombatantSide) null);

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfSchmierOil((CombatantSide) null);

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
((BattleStatistics)17).numberOfHipFlasks((CombatantSide) null);

Test 76: 
BattleStatistics battleStatistics = new BattleStatistics(100, 45);
((BattleStatistics)100).getHitsPerRound();

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(20, 15);
((BattleStatistics)20).criticalHits((CombatantSide) null);

Test 78: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 987654321;
SimpleSector simpleSector = new SimpleSector(123456789, true, true, 987654321, 987654321, true, 0, (CharacterClass) 0);
int _int = 123456789;
int _int = 987654321;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 987654321;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "The Great Sword of Light";
int _int = 987654321;
int _int = 987654321;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
String string = "Arthur";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 79: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).amountOfDefenseBonus((CombatantSide) null);

Test 80: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).getShotsPerRound();

Test 81: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound((int) (Integer) null);
int _int = null;
battleStatistics.setRound(_int);
int _int = null;
battleStatistics.setRound(_int);

Test 82: 
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (int) false, (boolean) 2, 2, (CharacterClass) 4);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 289;
String string = "F";
String string = "F";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "F");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 1297;
((BattleStatistics) _int).setRound(_int);

Test 83: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "MP5";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "John Doe";
String string = "USA";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);

Test 84: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Laser Rifle";
int _int = 10;
int _int = 5;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, _int);
boolean _boolean = false;
boolean _boolean = null;
((BattleStatistics) _int).isOnline((Combatant) _boolean, _boolean);
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 85: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, 500, true, 600, (CharacterClass) 50);
int _int = 4;
int _int = 4;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4;
String string = "Wooden Sword";
int _int = 2;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Ash Ketchum";
String string = "Leaf Green";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "uHu{FHwnR/d");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 86: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 87: 
BattleStatistics battleStatistics = new BattleStatistics(4895, 10);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 88: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Laser Pistol";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Grigory";
String string = "Grigory";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 89: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Iron Sword";
int _int = 35;
int _int = 100;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Ghoul";
String string = "Wizard";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 90: 
int _int = 17;
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, (CharacterClass) 17);
int _int = 17;
int _int = 17;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 17;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 17;
String string = "Rifle";
int _int = 17;
int _int = 17;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 17;
String string = "Alice";
String string = "Alice";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "bn#;");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 91: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

Test 92: 
int _int = 1980;
int _int = 1980;
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, (CharacterClass) 1980);
int _int = 1980;
int _int = 1980;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1980;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1980;
String string = "u32kwIf)%HgHu*\"j?";
String string = "u32kwIf)%HgHu*\"j?";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _boolean, "u32kwIf)%HgHu*\"j?");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 93: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, (CharacterClass) 1);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Electric sword";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Saruman the White";
String string = "Saruman the White";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 94: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 2);
int _int = 4;
SimpleSector simpleSector = new SimpleSector(3, true, true, 4, 5, true, 6, (CharacterClass) 2);
int _int = 7;
int _int = 8;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 9;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Mortar";
int _int = 11;
int _int = 12;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = "Sniper";
String string = "Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "_mN");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 95: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "M16A2";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 96: 
int _int = 14;
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, (CharacterClass) 14);
int _int = 14;
int _int = 14;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 14;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 14;
String string = "Laser Cannon";
int _int = 14;
int _int = 14;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 14;
String string = "";
String string = "Defender";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 97: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 98: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 99: 
int _int = 2023;
BattleStatistics battleStatistics = new BattleStatistics(2023, 2045);
int _int = 2045;
SimpleSector simpleSector = new SimpleSector(2023, true, true, 2045, 2045, true, 2023, (CharacterClass) 2045);
int _int = 2023;
int _int = 2045;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2023;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2045;
((BattleStatistics) _int).setRound(_int);
int _int = 2045;
String string = "LASER_CUTTER";
int _int = 2023;
int _int = 2045;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2045;
String string = "LASER_CUTTER";
String string = "u32kwIf)%HgHu*\"j?";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "u32kwIf)%HgHu*\"j?");
int _int = 2045;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 100: 
int _int = 13;
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
int _int = 13;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, (CharacterClass) 13);
int _int = 13;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 13;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = " a sword ";
int _int = 13;
int _int = 13;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = " a sword ";
String string = " a shield ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, " switched position with ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 101: 
int _int = 873;
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
boolean _boolean = true;
int _int = 873;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, (CharacterClass) 873);
int _int = 873;
int _int = 873;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 873;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 873;
String string = "M16A2";
int _int = 873;
int _int = 873;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 873;
String string = "US Army";
String string = "John Doe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 873;
String string = "c";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) simpleWeapon, string, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 102: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

Test 103: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
String string = "combatantA";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
String string = "combatantB";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
int _int = 0;
String string = "SWORD_OF_LIGHT";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "WAND_OF_MAGIC";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
SimpleCombatant simpleCombatant = null;
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 104: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).switchedPosList((CombatantSide) null);

Test 105: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).switchedPosList((CombatantSide) null);

Test 106: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).critList((CombatantSide) null);

Test 107: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2);
((BattleStatistics)10).critList((CombatantSide) "Blue");

Test 108: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
((BattleStatistics)10).criticalHitDamage((CombatantSide) null);

Test 109: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "U";
String string = "U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "U");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 110: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "Ak-47";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "Gennady";
String string = "Gennady";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "a*xR!cgJSqC1JTtW");
int _int = 1073741824;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 111: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, (CharacterClass) 0);
int _int = 35;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{WFY<wBRV";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 35;
((BattleStatistics) _int).setRound(_int);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 112: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).setRound(3);
((BattleStatistics) _int).getNotShootersPerRound();

Test 113: 
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, (CharacterClass) 1073741824);
int _int = 1073741824;
int _int = 1073741824;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1073741824;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1073741824;
String string = "Awesome Sword";
int _int = 1073741824;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1073741824;
String string = "Sir Reginald";
String string = "Red";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 114: 
int _int = 75;
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
int _int = 75;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (int) true, (boolean) 903, 903, (CharacterClass) battleStatistics);
int _int = 75;
int _int = 75;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 75;
String string = "OgoHvWvu`";
int _int = 4924;
int _int = 4924;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "(L";
String string = "*";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "*");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 115: 
int _int = 3325;
SimpleArea simpleArea = new SimpleArea(3325, 13, (Sector) 13);
int _int = 2792;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "_mN?";
int _int = 13;
int _int = 1073741824;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "7v8z( 0v";
String string = "Ru*}";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, "Ru*}");
int _int = 2792;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = false;
((BattleStatistics) string).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) string).amountOfDefenseBonus(combatantSide);

Test 116: 
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(50, 100);
int _int = 50;
SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, (CharacterClass) 100);
int _int = 50;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = ";#C8M";
int _int = 13;
int _int = 13;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 50;
String string = ";#C8M";
String string = ";#C8M";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ";#C8M");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 117: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).combatantLifetime((Combatant) null);

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 5);
((BattleStatistics)5).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 119: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 2, 1, (int) false, false, (-487), (CharacterClass) "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !");
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
int _int = 258;
int _int = 2;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 120: 
int _int = 788;
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
int _int = 788;
int _int = 1624;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1682;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "uH{u{]FH<w5Rd";
int _int = 788;
int _int = 788;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 788);
int _int = 1682;
String string = "U";
String string = "uH{u{]FH<w5Rd";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "uH{u{]FH<w5Rd");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 1682;
String string = "U";
String string = "uH{u{]FH<w5Rd";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "uH{u{]FH<w5Rd");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 121: 

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(75);

Test 123: 
int _int = 100000;
BattleStatistics battleStatistics = new BattleStatistics(100000, 50000);
((BattleStatistics)100000).round(1);
int _int = 200000;
int _int = 100000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
((BattleStatistics) _int).round(_int);

Test 124: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "uH{u{]FH<w5Rd";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 125: 
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
((BattleStatistics)13).addAndResetRoundCounter(hashtable, hashtable);

Test 126: 
BattleStatistics battleStatistics = new BattleStatistics(3, 5);
((BattleStatistics)3).hasMoved((Combatant) null, (Area) null);

Test 127: 
int _int = 2377;
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
((BattleStatistics)2377).isAlive((Combatant) null);
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isAlive(combatant);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).isDead((Combatant) null);


* Minimizing test suite
* test suite isTestSuite: 64
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), characterClass);
SimpleArea simpleArea = new SimpleArea(25, 157, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-1));
battleStatistics.criticalHitDamage(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 258, 2);
battleStatistics.getFieldStatistics();
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
battleStatistics.getFieldStatistics();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getShotsPerRound();
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1073741824);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(4);
battleStatistics.setRound(1297);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics((-556), (-556));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-556), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-556), "uHu{FHwnR/d", characterClass, simpleWeapon, "uHu{FHwnR/d");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "bn#;", characterClass, simpleWeapon, "bn#;");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "d", characterClass, simpleWeapon, "d");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, true);
battleStatistics.setRound(1980);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.setRound(1980);
battleStatistics.isOnline(simpleCombatant, true);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " switched position with ", characterClass, simpleWeapon, " switched position with ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, (String) null, characterClass, simpleWeapon, "c");
simpleCombatant.aimAt(simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
battleStatistics.switchedPosList((CombatantSide) null);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.critList((CombatantSide) null);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.setRound(1);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "a*xR!cgJSqC1JTtW", characterClass, simpleWeapon, "a*xR!cgJSqC1JTtW");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(35);
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
battleStatistics.getNotShootersPerRound();
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, characterClass);
SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3248), "(L", characterClass, simpleWeapon, "*");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 55: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6), "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, ";#C8M", characterClass, simpleWeapon, ";#C8M");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
battleStatistics.round((-2999.0));
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(50);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 63: 
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
// Undeclared exception!
try { 
  ((BattleStatistics)13).addAndResetRoundCounter(hashtable, hashtable);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 105
* Number of covered goals: 56
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Generated 64 tests with total length 434
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfBayonets = battleStatistics.numberOfBayonets(arg0);
assertEquals(0, numberOfBayonets);


** It was a parseable test case! 
refined test name is: testNumberOfBayonetsWhenZeroWinsAndLosses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector arg2 = new SimpleSector(25, true, true, 25, 25, true, (-1123), arg7);
SimpleArea arg1 = new SimpleArea(25, 157, arg2);
battleStatistics.newDestination((Combatant) null, arg1);
assertEquals(25, arg1.getHeight());


** It was a parseable test case! 
refined test name is: testBattleStatisticsWithNewDestination
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0);
assertEquals(0, numberOfShinyOil);


** It was a parseable test case! 
refined test name is: testNumberOfShinyOilOnDefenderSideReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0);
assertEquals(0, numberOfLoadingChamerOrEnhancedPatrons);


** It was a parseable test case! 
refined test name is: testNumberOfLoadingChamberOrEnhancedPatron
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsDeadWithNullCombatant
* Compiling Tests
refined test name is: testIsDeadWithNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide arg0 = CombatantSide.ATTACKER;
int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0);
assertEquals(0, amountOfAttackBonus);


** It was a parseable test case! 
refined test name is: testAmountOfAttackBonusWhenCombatantSideIsAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int totalSwaps = battleStatistics.totalSwaps(arg0);
assertEquals(0, totalSwaps);


** It was a parseable test case! 
refined test name is: testTotalSwapsWithNoSwaps
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics();
assertEquals(0, fieldStatistics.size());


** It was a parseable test case! 
refined test name is: testGetFieldStatisticsSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0);
assertEquals(0, numberOfFettesOil);


** It was a parseable test case! 
refined test name is: testNumberOfFettesOilForDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0);
assertEquals(0, numberOfSchmierOil);


** It was a parseable test case! 
refined test name is: testNumberOfSchmirOilInitialValueIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0);
assertEquals(0, numberOfHipFlasks);


** It was a parseable test case! 
refined test name is: testNumberOfHipFlasksForAttackerSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsAliveWithNullArgument
* Compiling Tests
refined test name is: testIsAliveWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}


** It was a parseable test case! 
refined test name is: testHasMovedWithNullParametersThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound();
assertFalse(hitsPerRound.isEmpty());


** It was a parseable test case! 
refined test name is: testGetHitsPerRoundNotEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int criticalHits = battleStatistics.criticalHits(arg0);
assertEquals(0, criticalHits);


** It was a parseable test case! 
refined test name is: testCriticalHitsForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int round = battleStatistics.round(0);
assertEquals(0, round);


** It was a parseable test case! 
refined test name is: testZeroRoundsNoWinsOrLosses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0);
assertEquals(0, amountOfDefenseBonus);


** It was a parseable test case! 
refined test name is: testAmountOfDefenseBonusWithNoBonusForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound();
assertFalse(shotsPerRound.isEmpty());


** It was a parseable test case! 
refined test name is: testGetShotsPerRoundIsNotEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);

** It was a parseable test case! 
refined test name is: testBattleStatisticsIncrementRoundCount
* Compiling Tests
refined test name is: testSetRoundThreeTimes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null);
assertEquals(0, combatantLifetime);


** It was a parseable test case! 
refined test name is: testCombatantLifetimeWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(Double.NaN, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerWithUninitializedObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerWithDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null);
assertTrue(switchedPosList.isEmpty());


** It was a parseable test case! 
refined test name is: testEmptySwitchedPosListForNullCombatantSide
* Compiling Tests
refined test name is: testEmptySwitchedPositionsForNullSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
List<CriticalHit> critList = battleStatistics.critList(arg0);
assertEquals(0, critList.size());


** It was a parseable test case! 
refined test name is: testBattleStatisticscritListemptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null);
assertEquals(0, critList.size());


** It was a parseable test case! 
refined test name is: testCritListWithNullSideShouldReturnEmptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide arg0 = CombatantSide.DEFENDER;
long criticalHitDamage = battleStatistics.criticalHitDamage(arg0);
assertEquals(0L, criticalHitDamage);


** It was a parseable test case! 
refined test name is: testCriticalHitDamageUnderMaximumThreshold
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound();
assertEquals(2, notShootersPerRound.size());


** It was a parseable test case! 
refined test name is: testGetNotShootersPerRoundReturnsMapOfCorrectSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter arg1 = new WeaponModCounter.SchmierOilCounter();
int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1);
assertEquals(0, countWeaponMods);


** It was a parseable test case! 
refined test name is: testCountWeaponModsForSchmierOil
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
int round = battleStatistics.round((-2999.0));
assertEquals((-2999), round);


** It was a parseable test case! 
refined test name is: testRoundMethodWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int round = battleStatistics.round(50);
assertEquals(50, round);


** It was a parseable test case! 
refined test name is: testIncreaseNumberOfRounds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.391 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.427 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.505 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.506 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.570 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.637 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.638 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:43:39.703 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.704 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.764 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.765 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.824 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.824 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.881 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.882 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:39.946 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:39.951 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.006 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.008 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.066 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:43:40.127 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.129 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.191 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.252 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.254 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.316 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.317 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.382 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.510 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.511 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:43:40.573 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.649 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.654 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.714 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.775 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:43:40.836 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.894 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.895 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:40.953 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:40.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:41.010 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:41.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:41.066 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:41.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
[MASTER] 01:43:41.121 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:41.122 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:41.179 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:41.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:43:41.246 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:41.247 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
** Write a test suite: 4 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 18 called: 2 to improve: false
** Write a test suite: 22 called: 3 to improve: false
[MASTER] 01:43:42.123 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:42.124 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 18 called: 2 to improve: false
** Write a test suite: 25 called: 3 to improve: false
[MASTER] 01:43:43.219 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:43:43.220 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
[MASTER] 01:43:45.326 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 65
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), characterClass);
SimpleArea simpleArea = new SimpleArea(25, 157, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-1));
battleStatistics.criticalHitDamage(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
battleStatistics.getFieldStatistics();
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getShotsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(4);
battleStatistics.setRound(1297);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1073741824);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics((-556), (-556));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-556), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-556), "uHu{FHwnR/d", characterClass, simpleWeapon, "uHu{FHwnR/d");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 23: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "bn#;", characterClass, simpleWeapon, "bn#;");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "d", characterClass, simpleWeapon, "d");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, true);
battleStatistics.setRound(1980);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.setRound(1980);
battleStatistics.isOnline(simpleCombatant, true);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " switched position with ", characterClass, simpleWeapon, " switched position with ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, (String) null, characterClass, simpleWeapon, "c");
simpleCombatant.aimAt(simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.switchedPosList(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
battleStatistics.switchedPosList((CombatantSide) null);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.critList((CombatantSide) null);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.setRound(1);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "a*xR!cgJSqC1JTtW", characterClass, simpleWeapon, "a*xR!cgJSqC1JTtW");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(35);
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
battleStatistics.getNotShootersPerRound();
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, characterClass);
SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3248), "(L", characterClass, simpleWeapon, "*");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 51: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6), "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, ";#C8M", characterClass, simpleWeapon, ";#C8M");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 54: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 258, 2);
battleStatistics.getFieldStatistics();
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
battleStatistics.round((-2999.0));
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(50);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

* Minimizing test suite
[MASTER] 01:44:03.262 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 64
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, (-1123), characterClass);
SimpleArea simpleArea = new SimpleArea(25, 157, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2986, false, false, 0, 10, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ":doCFxTP'0", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "StatusPanel.playerCount", characterClass, simpleWeapon, "STOP");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-1));
battleStatistics.criticalHitDamage(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", 0, 2116);
Point point = new Point((-487), (-487));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-487), true, true, 2, 1, false, (-487), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 258, 2);
battleStatistics.getFieldStatistics();
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(1073741798, 1073741798);
battleStatistics.getFieldStatistics();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(2377, 2377);
battleStatistics.isAlive((Combatant) null);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-6), (-6));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getShotsPerRound();
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
battleStatistics.setRound(1980);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1073741824);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(4, 4);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "", 4, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point((-1042), (-3600));
SimpleSector simpleSector = new SimpleSector(4, false, true, 60, (-1259), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 289, "F", characterClass, simpleWeapon, "F");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(4);
battleStatistics.setRound(1297);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.combatantLifetime(simpleCombatant);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics((-556), (-556));
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4, true, true, 4, (-556), true, (-556), characterClass);
SimpleArea simpleArea = new SimpleArea(4, 4, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-556), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(4, "uHu{FHwnR/d", 2, 4);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-556), "uHu{FHwnR/d", characterClass, simpleWeapon, "uHu{FHwnR/d");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(17, 17);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(17, false, false, 17, 17, false, 17, characterClass);
SimpleArea simpleArea = new SimpleArea(17, 17, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 17, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(17, "bn#;", 17, 17);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 17, "bn#;", characterClass, simpleWeapon, "bn#;");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "_mN", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "_mN", characterClass, simpleWeapon, "_mN");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "d", 1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "d", characterClass, simpleWeapon, "d");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, false, false, 1980, 1980, false, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.roundsTillOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(14, 14);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(14, false, false, 14, 14, false, 14, characterClass);
SimpleArea simpleArea = new SimpleArea(14, 14, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 14, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(14, "", 14, 14);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 14, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(1980, 1980);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1980, true, true, 1980, 1980, true, 1980, characterClass);
SimpleArea simpleArea = new SimpleArea(1980, 1980, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1980, simpleArea, true);
battleStatistics.setRound(1980);
SimpleWeapon simpleWeapon = new SimpleWeapon(1980, "u32kwIf)%HgHu*\"j?", 1980, 1980);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1980, "u32kwIf)%HgHu*\"j?", characterClass, simpleWeapon, "u32kwIf)%HgHu*\"j?");
battleStatistics.setRound(1980);
battleStatistics.isOnline(simpleCombatant, true);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, " switched position with ", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, " switched position with ", characterClass, simpleWeapon, " switched position with ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(873, 873);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(873, true, true, 873, 873, true, 873, characterClass);
SimpleArea simpleArea = new SimpleArea(873, 873, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 873, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(873, "", 873, 873);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 873, (String) null, characterClass, simpleWeapon, "c");
simpleCombatant.aimAt(simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-3), (-3));
battleStatistics.switchedPosList((CombatantSide) null);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.critList((CombatantSide) null);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(10, 2986);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
battleStatistics.setRound(1);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "a*xR!cgJSqC1JTtW", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "a*xR!cgJSqC1JTtW", characterClass, simpleWeapon, "a*xR!cgJSqC1JTtW");
battleStatistics.setRound(1073741824);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder((CombatantSide) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{WFY<wBRV", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(35);
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(1);
battleStatistics.getNotShootersPerRound();
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1073741824, true, true, 1073741824, 1073741824, true, 1073741824, characterClass);
SimpleArea simpleArea = new SimpleArea(1073741824, 1073741824, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1073741824, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(1073741824, "", 1073741824, 1073741824);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1073741824, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(75, 75);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(4924, true, true, 75, (-3248), true, 903, characterClass);
SimpleArea simpleArea = new SimpleArea(75, 75, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(75, "OgoHvWvu`", 4924, 4924);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3248), "(L", characterClass, simpleWeapon, "*");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 55: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2792, false, false, (-798), (-798), false, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(3325, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2792, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "_mN?", 13, 1073741824);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6), "7v8z( 0v", characterClass, simpleWeapon, "Ru*}");
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(13, 13);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass);
SimpleArea simpleArea = new SimpleArea(13, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 13, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleWeapon simpleWeapon = new SimpleWeapon(13, ";#C8M", 13, 13);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, ";#C8M", characterClass, simpleWeapon, ";#C8M");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(2792, 5);
WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter = new WeaponModCounter.SchmierOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_SchmierOilCounter);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "U", characterClass, simpleWeapon, "U");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(788, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1682, true, false, 788, 1624, true, 1682, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1682, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-651), "uH{u{]FH<w5Rd", 788, 788);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1682, "U", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(1965, 1136);
battleStatistics.round((-2999.0));
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(50);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "uH{u{]FH<w5Rd", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "uH{u{]FH<w5Rd", characterClass, simpleWeapon, "uH{u{]FH<w5Rd");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(13, 0);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 105
* Number of covered goals: 56
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Generated 64 tests with total length 436
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 01:44:03.510 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
[MASTER] 01:44:09.377 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.112 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.165 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.167 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.222 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.281 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.282 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.333 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.391 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.393 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.437 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.439 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.490 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.492 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.558 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.560 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.623 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.624 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.680 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.681 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.798 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.859 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.860 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.914 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.916 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:12.969 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:12.971 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.027 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.079 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.130 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.131 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.216 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.295 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.297 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.377 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.438 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.440 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.495 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.496 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.552 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.619 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.620 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.676 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.677 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.734 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.735 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.782 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.783 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.833 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:13.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:44:13.896 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:44:13.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
[MASTER] 01:44:14.634 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:14.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
[MASTER] 01:44:15.349 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4296276730912548635.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:44:15.350 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4296276730912548635.jar
[MASTER] 01:44:15.352 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing tests to file
* Writing JUnit test case 'BattleStatistics_ESTest' to evosuite-tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 18 called: 2 to improve: false
** Write a test suite: 25 called: 3 to improve: false
* Writing JUnit test case 'BattleStatistics_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
* Done!

* Computation finished
