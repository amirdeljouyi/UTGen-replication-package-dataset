* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.model.impl.SimpleSector
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 10919
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 17:06:14.947 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 17:06:14.954 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 17:06:14.956 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 17:06:15.056 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 17:06:15.431 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 17:06:15.432 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.model.impl.SimpleSector
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 308
* Using seed 1710263172381
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 134 / 308
[Progress:>                             1%] [Cov:===========================>       79%][Progress:>                             2%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:================================>  92%][Progress:==>                           7%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%]
* Search finished after 101s and 512 generations, 363331 statements, best individual has fitness: 23.0
* Generated before the refinement 46 tests with total length 173
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getOccupier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getOccupier();
    }
}
statement is: simpleSector.getOccupier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getOccupier() target is: simpleSector method is: getOccupier()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isAttackerSpawn();
    }
}
statement is: simpleSector.isAttackerSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isAttackerSpawn() target is: simpleSector method is: isAttackerSpawn()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data }}
    }
}
statement is: // Test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: getBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)Lde/outstare/fortbattleplayer/model/SectorBonus; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.SectorBonus
statement code is: SectorBonus bonus = simpleSector.getBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(9384, true, false, -2771, -2771, true, 1125, characterClass);
        simpleSector.getBonus(characterClass);
        // Improved test data }}
    }
}
statement is: // Improved test data
CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(9384, true, false, -2771, -2771, true, 1125, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getBonus(characterClass), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getBonus(characterClass) target is: simpleSector method is: getBonus(CharacterClass)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 5
Matched Method is: getBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)Lde/outstare/fortbattleplayer/model/SectorBonus;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 9384;
boolean _boolean = true;
boolean _boolean = false;
boolean _boolean = true;
int _int = 1125;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) _boolean, _int, true, 1125, (CharacterClass) _int);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getBonus(characterClass);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();// Test that the sector has a flag }}

    }
}
statement is: simpleSector.isFlag()// Test that the sector has a flag }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag()// Test that the sector has a flag }}
 target is: simpleSector method is: isFlag()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: removeObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.removeObserver(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.removeObserver(sectorObserver);
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.removeObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.removeObserver(sectorObserver) target is: simpleSector method is: removeObserver(SectorObserver)
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 887, arg2)
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 887, simpleSector);
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(35, 887, simpleSector);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(35, 887, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 35;
int _int = 887;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getAreas();
    }
}
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isDefenderSpawn();
    }
}
statement is: simpleSector.isDefenderSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isDefenderSpawn() target is: simpleSector method is: isDefenderSpawn()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1545, true, true, 1545, 1545, true, 1545, arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1545, 1545, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1545, arg2, true)
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "t)UF:.b4X{`jDW3Gkd{", 1545, 1545)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1545, "t)UF:.b4X{`jDW3Gkd{", arg4, arg5, "t)UF:.b4X{`jDW3Gkd{")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1545, true, true, 1545, 1545, true, 1545, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(1545, 1545, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1545, simpleArea, true);
simpleSector.gainControl(combatantSide);
SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "t)UF:.b4X{`jDW3Gkd{", 1545, 1545);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1545, "t)UF:.b4X{`jDW3Gkd{", characterClass, simpleWeapon, "t)UF:.b4X{`jDW3Gkd{");
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleArea simpleArea = new SimpleArea(1545, 1545, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1545, simpleArea, true);
        simpleSector.gainControl(combatantSide);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "Energy Rifle", 1545, 1545);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1545, "Elite Ranger", characterClass, simpleWeapon, "Energy Rifle");
        simpleSector.free();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleArea simpleArea = new SimpleArea(1545, 1545, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1545, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "Energy Rifle", 1545, 1545), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1545, "Elite Ranger", characterClass, simpleWeapon, "Energy Rifle"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
TestCase is: int _int = 1545;
int _int = 1545;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 1545;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1545;
String string = "Energy Rifle";
int _int = 1545;
int _int = 1545;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1545;
String string = "Elite Ranger";
String string = "Energy Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "t)UF:.b4X{`jDW3Gkd{");

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, arg7)
statement is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface de.outstare.fortbattleplayer.model.SectorObserver
statement code is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer())
statement is: addObserver(Lde/outstare/fortbattleplayer/model/SectorObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.addObserver(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.free()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
        simpleSector.addObserver(sectorObserver);
        simpleSector.free();
    }
}
statement is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(SectorObserver.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: SectorObserver argument is: SectorObserver.class
Matched Method is: mock(interface de.outstare.fortbattleplayer.model.SectorObserver)
statement is: simpleSector.addObserver(sectorObserver), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.addObserver(sectorObserver) target is: simpleSector method is: addObserver(SectorObserver)
statement is: simpleSector.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.free() target is: simpleSector method is: free()
TestCase is: SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7)
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isOccupied();
        // Improved test data:
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(50, true, true, 10, 20, false, 30, characterClass);
        simpleSector.isOccupied();
        // Explanation:
        The test;
        has been;
        by changing;
        primitive values;
        Strings to;
        illustrative examples;
        For example;
        For the;
        value of;
        has been;
        to a;
        descriptive value;
        such as;
    }
}
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
statement is: // Improved test data:
CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, true, true, 10, 20, false, 30, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 7
Matched Method is: isOccupied()Z
statement is: // Explanation:
The test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: has been, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings to, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: illustrative examples, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: For example, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: For the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: value of, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: has been, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: to a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: descriptive value, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: such as, class spoon.support.reflect.code.CtLocalVariableImpl
TestCase is: int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 10;
int _int = 20;
boolean _boolean = false;
int _int = 30;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
((SimpleSector) _boolean).isOccupied();

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(645, 645, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2471, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 3450, "aG{", arg4, arg5, "xc-Ol=6=j1ODGn")
statement is: isOccupied()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean occupied = simpleSector.isOccupied()
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2471, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.isOccupied();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2471, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
        simpleSector.isOccupied();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2471, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.isOccupied(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isOccupied() target is: simpleSector method is: isOccupied()
TestCase is: int _int = 645;
int _int = 645;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 2471;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "aG{";
int _int = 2;
int _int = 645;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 3450;
String string = "aG{";
String string = "xc-Ol=6=j1ODGn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "xc-Ol=6=j1ODGn");

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(645, 645, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1231, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1936), " crits (", 2, 645)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 3450, "aG{", arg4, arg5, "xc-Ol=6=j1ODGn")
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1231, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1936), " crits (", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1231, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1936, " crits (", 2, 645);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
        simpleSector.getDefenseBonus(characterClass);
        // Returns the defense bonus for a warrior combatant in a SimpleSector with ID 2471 that is defending against an attacker. }}
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1231, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1936, " crits (", 2, 645), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.getDefenseBonus(characterClass), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDefenseBonus(characterClass) target is: simpleSector method is: getDefenseBonus()
statement is: // Returns the defense bonus for a warrior combatant in a SimpleSector with ID 2471 that is defending against an attacker. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 645;
int _int = 645;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 1231;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = " crits (";
int _int = 2;
int _int = 645;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 645);
int _int = 3450;
String string = "aG{";
String string = "xc-Ol=6=j1ODGn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "xc-Ol=6=j1ODGn");

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
CharacterClass characterClass = CharacterClass.GREENHORN;
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: de.outstare.fortbattleplayer.model.impl.SimpleBattleField(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleBattleField
statement code is: SimpleBattleField simpleBattleField = new SimpleBattleField((-45), (-45))
test data is: SimpleBattleField simpleBattleField = new SimpleBattleField((-45), (-45));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleBattleField simpleBattleField = new SimpleBattleField(10, 20);
    }
}
statement is: SimpleBattleField simpleBattleField = new SimpleBattleField(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 10;
int _int = 20;
SimpleBattleField simpleBattleField = new SimpleBattleField(_int, _int);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = simpleSector.hashCode()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.hashCode();
    }
}
statement is: simpleSector.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.hashCode() target is: simpleSector method is: hashCode()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 362, true, 31, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 362, true, 31, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(12, false, false, 12, 12, false, 12, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals((Object) null)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, false, false, 12, 12, false, 12, characterClass);
simpleSector.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(((Object) (null)));
    }
}
statement is: simpleSector.equals(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(((Object) (null))) target is: simpleSector method is: equals(java.lang.Object)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.equals(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertTrue(simpleSector1.equals(simpleSector2));
    }
}
statement is: assertTrue(simpleSector1.equals(simpleSector2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(simpleSector1.equals(simpleSector2)) target is:  method is: assertTrue(<unknown>)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(645, 645, arg2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 2471, (-2485), false, 31, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
SimpleSector simpleSector = new SimpleSector(0, true, true, 2471, (-2485), false, 31, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
        SimpleSector simpleSector = new SimpleSector(1234, false, true, 5678, -2485, false, 31, characterClass);
        simpleSector.equals(simpleSector);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleSector simpleSector = new SimpleSector(1234, false, true, 5678, -2485, false, 31, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals(SimpleSector)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 9
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 645;
int _int = 645;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
int _int = 1234;
boolean _boolean = false;
boolean _boolean = true;
int _int = 5678;
boolean _boolean = false;
int _int = 31;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
((SimpleSector) _int).equals(simpleSector);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), 31, true, (-556), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), 31, true, (-556), characterClass);
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(710, false, false, 710, 710, false, 710, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(710, false, true, 710, 710, false, 710, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(710, false, false, 710, 710, false, 710, characterClass);
SimpleSector simpleSector = new SimpleSector(710, false, true, 710, 710, false, 710, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector2);
    }
}
statement is: simpleSector.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector2) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1502, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1526, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1502, characterClass);
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1526, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.equals(simpleSector);
    }
}
statement is: simpleSector.equals(simpleSector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.equals(simpleSector) target is: simpleSector method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, arg7)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.setSectorName("Aurora");
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector2 = new SimpleSector(1256, true, true, 1256, 1256, true, 1256, characterClass);
        simpleSector2.setSectorName("Vega");
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.setSectorName("Aurora"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.setSectorName("Aurora") target is: simpleSector1 method is: setSectorName(java.lang.String)
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector2 = new SimpleSector(1256, true, true, 1256, 1256, true, 1256, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector2.setSectorName("Vega"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector2.setSectorName("Vega") target is: simpleSector2 method is: setSectorName(java.lang.String)
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals(SimpleSector)
TestCase is: int _int = 1256;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1256;
int _int = 1256;
boolean _boolean = true;
int _int = 1256;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);

statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, true, 0, (-1), true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, (-1), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, true, false, 1231, 1231, true, 1231, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, true, false, 1231, 1231, true, 1231, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(720, false, false, 720, 720, false, 720, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(731, false, false, 720, 720, false, 720, arg7)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = simpleSector.equals(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(720, false, false, 720, 720, false, 720, characterClass);
SimpleSector simpleSector = new SimpleSector(731, false, false, 720, 720, false, 720, characterClass);
simpleSector.equals(simpleSector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector1.equals(simpleSector2);
    }
}
statement is: simpleSector1.equals(simpleSector2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector1.equals(simpleSector2) target is: simpleSector1 method is: equals()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, (-757), (-757), false, (-1464), arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, (-757), (-757), false, (-1464), characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(33, true, false, 0, 1212, true, 33, arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(33, true, false, 0, 1212, true, 33, characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(30, true, false, 0, 1212, true, 30, characterClass);
        simpleSector.classBonus(characterClass);
        // Improved test data: }}
    }
}
statement is: // Improved test data:
CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(30, true, false, 0, 1212, true, 30, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector.classBonus(characterClass), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.classBonus(characterClass) target is: simpleSector method is: classBonus(CharacterClass)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.model.impl.SimpleSectorindex is: 7
Matched Method is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 30;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 1212;
boolean _boolean = true;
int _int = 30;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
CharacterClass characterClass = null;
((SimpleSector) _boolean).classBonus(characterClass);

statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, arg7)
statement is: classBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int classBonus = simpleSector.classBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.classBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // This test case ensures that the class bonus is calculated correctly when the sector has a high population and the character is a soldier. }}
    }
}
statement is: // This test case ensures that the class bonus is calculated correctly when the sector has a high population and the character is a soldier. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, false, (-1304), (-993), false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3000, (-3474), arg2)
statement is: getAreas()Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.model.Area>
statement code is: Set<Area> areas = simpleSector.getAreas()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, false, (-1304), (-993), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3000, (-3474), simpleSector);
simpleSector.getAreas();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(3000, -3474, simpleSector);
        simpleSector.getAreas();
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(3000, -3474, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V
statement is: simpleSector.getAreas(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getAreas() target is: simpleSector method is: getAreas()
* this is vulnerable: int _int = 3000
TestCase is: int _int = 3000;

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-256), true, false, 635, 3, true, 31, arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-256), true, false, 635, 3, true, 31, characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals(attackBonus, 31);
    }
}
statement is: assertEquals(attackBonus, 31), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(attackBonus, 31) target is:  method is: assertEquals(<unknown>,int)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 2, false, 0, arg7)
statement is: getAttackBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int attackBonus = simpleSector.getAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 2, false, 0, characterClass);
simpleSector.getAttackBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals(10, attackBonus);
    }
}
statement is: assertEquals(10, attackBonus), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(10, attackBonus) target is:  method is: assertEquals(int,<unknown>)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7)
statement is: getDamageBonus()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int damageBonus = simpleSector.getDamageBonus()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.getDamageBonus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getDamageBonus();
    }
}
statement is: simpleSector.getDamageBonus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDamageBonus() target is: simpleSector method is: getDamageBonus()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), arg7)
statement is: getDefenseBonus(Lde/outstare/fortbattleplayer/model/CharacterClass;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int defenseBonus = simpleSector.getDefenseBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getDefenseBonus(characterClass);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data
        int defenseBonus = simpleSector.getDefenseBonus(GREENHORN);
        assertEquals(defenseBonus, 50);
    }
}
statement is: // Test data
int defenseBonus = simpleSector.getDefenseBonus(GREENHORN), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getDefenseBonus(GREENHORN) target is: simpleSector method is: getDefenseBonus()
statement is: assertEquals(defenseBonus, 50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(defenseBonus, 50) target is:  method is: assertEquals(int,int)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-1629), 1237, true, 0, arg7)
statement is: getHeight()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int height = simpleSector.getHeight()
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1629), 1237, true, 0, characterClass);
simpleSector.getHeight();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.getHeight();
    }
}
statement is: simpleSector.getHeight(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getHeight() target is: simpleSector method is: getHeight()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1159), false, true, (-1159), (-1159), true, (-1159), arg7)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: gainControl(Lde/outstare/fortbattleplayer/model/CombatantSide;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector.gainControl(arg0)
statement is: getOccupier()Lde/outstare/fortbattleplayer/model/CombatantSide; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide occupier = simpleSector.getOccupier()
test data is: CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1159), false, true, (-1159), (-1159), true, (-1159), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleSector.gainControl(combatantSide);
        simpleSector.getOccupier();
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleSector.gainControl(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.gainControl(combatantSide) target is: simpleSector method is: gainControl(CombatantSide)
statement is: simpleSector.getOccupier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.getOccupier() target is: simpleSector method is: getOccupier()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, (-1), 0, false, 0, arg7)
statement is: isAttackerSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean attackerSpawn = simpleSector.isAttackerSpawn()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-1), 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isAttackerSpawn();
    }
}
statement is: simpleSector.isAttackerSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isAttackerSpawn() target is: simpleSector method is: isAttackerSpawn()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), arg7)
statement is: isDefenderSpawn()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean defenderSpawn = simpleSector.isDefenderSpawn()
test data is: CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.isDefenderSpawn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isDefenderSpawn();
    }
}
statement is: simpleSector.isDefenderSpawn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isDefenderSpawn() target is: simpleSector method is: isDefenderSpawn()
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(122, false, false, 122, 122, false, 122, arg7)
statement is: isFlag()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean flag = simpleSector.isFlag()
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(122, false, false, 122, 122, false, 122, characterClass);
simpleSector.isFlag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        simpleSector.isFlag();
        // This test data is more descriptive and representative of the situation being tested. }}
    }
}
statement is: simpleSector.isFlag(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector.isFlag() target is: simpleSector method is: isFlag()
statement is: // This test data is more descriptive and representative of the situation being tested. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1539, true, true, 1539, 1539, true, 1539, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1539, 1539, arg2)
statement is: _addArea(Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleSector._addArea(arg0)
test data is: CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1539, true, true, 1539, 1539, true, 1539, characterClass);
SimpleArea simpleArea = new SimpleArea(1539, 1539, simpleSector);
simpleSector._addArea(simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(1539, 1539, simpleSector);
        simpleSector._addArea(simpleArea);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(1539, 1539, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleSector._addArea(simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleSector._addArea(simpleArea) target is: simpleSector method is: _addArea(SimpleArea)
TestCase is: int _int = 1539;
int _int = 1539;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);

* test suite isTestSuite: 60
Test 0: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getBonus(characterClass);
Test 4: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isFlag();
Test 5: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 6: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 887, simpleSector);
simpleSector.getDefenseBonus(characterClass);
Test 7: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAreas();
Test 8: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
simpleSector.isDefenderSpawn();
Test 9: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getHeight();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1545, true, true, 1545, 1545, true, 1545, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(1545, 1545, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1545, simpleArea, true);
simpleSector.gainControl(combatantSide);
SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "t)UF:.b4X{`jDW3Gkd{", 1545, 1545);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1545, "t)UF:.b4X{`jDW3Gkd{", characterClass, simpleWeapon, "t)UF:.b4X{`jDW3Gkd{");
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();
Test 12: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2471, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.isOccupied();
Test 14: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1231, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1936), " crits (", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.getDefenseBonus(characterClass);
Test 15: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
CharacterClass characterClass = CharacterClass.GREENHORN;
simpleSector.getDefenseBonus(characterClass);
Test 16: 
SimpleBattleField simpleBattleField = new SimpleBattleField((-45), (-45));
Test 17: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.hashCode();
Test 18: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 19: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 362, true, 31, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, false, false, 12, 12, false, 12, characterClass);
simpleSector.equals((Object) null);
Test 21: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.equals(characterClass);
Test 22: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
SimpleSector simpleSector = new SimpleSector(0, true, true, 2471, (-2485), false, 31, characterClass);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), 31, true, (-556), characterClass);
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(710, false, false, 710, 710, false, 710, characterClass);
SimpleSector simpleSector = new SimpleSector(710, false, true, 710, 710, false, 710, characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1502, characterClass);
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1526, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, (-1), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, true, false, 1231, 1231, true, 1231, characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(720, false, false, 720, 720, false, 720, characterClass);
SimpleSector simpleSector = new SimpleSector(731, false, false, 720, 720, false, 720, characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, (-757), (-757), false, (-1464), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(33, true, false, 0, 1212, true, 33, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.classBonus(characterClass);
Test 34: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, false, (-1304), (-993), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3000, (-3474), simpleSector);
simpleSector.getAreas();
Test 35: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-256), true, false, 635, 3, true, 31, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 2, false, 0, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 37: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.getDamageBonus();
Test 38: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getHeight();
Test 40: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1629), 1237, true, 0, characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1159), false, true, (-1159), (-1159), true, (-1159), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 42: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-1), 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();
Test 43: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.isDefenderSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(122, false, false, 122, 122, false, 122, characterClass);
simpleSector.isFlag();
Test 45: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1539, true, true, 1539, 1539, true, 1539, characterClass);
SimpleArea simpleArea = new SimpleArea(1539, 1539, simpleSector);
simpleSector._addArea(simpleArea);
Test 46: 
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(9384, true, false, (int) true, 1125, true, 1125, (CharacterClass) 9384);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getBonus(characterClass);

Test 47: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 48: 
SimpleArea simpleArea = new SimpleArea(35, 887, (Sector) 887);

Test 49: 
SimpleArea simpleArea = new SimpleArea(1545, 1545, (Sector) 1545);
int _int = 1545;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1545;
String string = "Energy Rifle";
int _int = 1545;
int _int = 1545;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1545;
String string = "Elite Ranger";
String string = "Energy Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "t)UF:.b4X{`jDW3Gkd{");

Test 50: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 51: 
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(50, true, true, 10, 20, false, 30, (CharacterClass) 50);
((SimpleSector) _boolean).isOccupied();

Test 52: 
SimpleArea simpleArea = new SimpleArea(645, 645, (Sector) 645);
int _int = 2471;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "aG{";
int _int = 2;
int _int = 645;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 3450;
String string = "aG{";
String string = "xc-Ol=6=j1ODGn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "xc-Ol=6=j1ODGn");

Test 53: 
SimpleArea simpleArea = new SimpleArea(645, 645, (Sector) 645);
int _int = 1231;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = " crits (";
int _int = 2;
int _int = 645;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 645);
int _int = 3450;
String string = "aG{";
String string = "xc-Ol=6=j1ODGn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "xc-Ol=6=j1ODGn");

Test 54: 
SimpleBattleField simpleBattleField = new SimpleBattleField(10, 20);

Test 55: 
int _int = 645;
int _int = 645;
SimpleArea simpleArea = new SimpleArea(645, 645, (Sector) 645);
int _int = 1234;
boolean _boolean = false;
boolean _boolean = true;
int _int = 5678;
boolean _boolean = false;
int _int = 31;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
((SimpleSector) _int).equals(simpleSector);

Test 56: 
SimpleSector simpleSector = new SimpleSector(1256, true, true, 1256, 1256, true, 1256, (CharacterClass) 1256);

Test 57: 
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(30, true, false, 0, 1212, true, 30, (CharacterClass) 30);
CharacterClass characterClass = null;
((SimpleSector) _boolean).classBonus(characterClass);

Test 58: 

Test 59: 
SimpleArea simpleArea = new SimpleArea(1539, 1539, (Sector) 1539);


* Generated after the refinement and before minimization 60 tests with total length 239
* test suite isTestSuite: 60
Test 0: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getBonus(characterClass);
Test 4: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isFlag();
Test 5: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 6: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 887, simpleSector);
simpleSector.getDefenseBonus(characterClass);
Test 7: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAreas();
Test 8: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
simpleSector.isDefenderSpawn();
Test 9: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getHeight();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1545, true, true, 1545, 1545, true, 1545, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(1545, 1545, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1545, simpleArea, true);
simpleSector.gainControl(combatantSide);
SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "t)UF:.b4X{`jDW3Gkd{", 1545, 1545);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1545, "t)UF:.b4X{`jDW3Gkd{", characterClass, simpleWeapon, "t)UF:.b4X{`jDW3Gkd{");
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();
Test 12: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2471, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.isOccupied();
Test 14: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1231, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1936), " crits (", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.getDefenseBonus(characterClass);
Test 15: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
CharacterClass characterClass = CharacterClass.GREENHORN;
simpleSector.getDefenseBonus(characterClass);
Test 16: 
SimpleBattleField simpleBattleField = new SimpleBattleField((-45), (-45));
Test 17: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.hashCode();
Test 18: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 19: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 362, true, 31, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, false, false, 12, 12, false, 12, characterClass);
simpleSector.equals((Object) null);
Test 21: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.equals(characterClass);
Test 22: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
SimpleSector simpleSector = new SimpleSector(0, true, true, 2471, (-2485), false, 31, characterClass);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), 31, true, (-556), characterClass);
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(710, false, false, 710, 710, false, 710, characterClass);
SimpleSector simpleSector = new SimpleSector(710, false, true, 710, 710, false, 710, characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1502, characterClass);
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1526, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, (-1), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, true, false, 1231, 1231, true, 1231, characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(720, false, false, 720, 720, false, 720, characterClass);
SimpleSector simpleSector = new SimpleSector(731, false, false, 720, 720, false, 720, characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, (-757), (-757), false, (-1464), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(33, true, false, 0, 1212, true, 33, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.classBonus(characterClass);
Test 34: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, false, (-1304), (-993), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3000, (-3474), simpleSector);
simpleSector.getAreas();
Test 35: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-256), true, false, 635, 3, true, 31, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 2, false, 0, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 37: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.getDamageBonus();
Test 38: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getHeight();
Test 40: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1629), 1237, true, 0, characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1159), false, true, (-1159), (-1159), true, (-1159), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 42: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-1), 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();
Test 43: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.isDefenderSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(122, false, false, 122, 122, false, 122, characterClass);
simpleSector.isFlag();
Test 45: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1539, true, true, 1539, 1539, true, 1539, characterClass);
SimpleArea simpleArea = new SimpleArea(1539, 1539, simpleSector);
simpleSector._addArea(simpleArea);
Test 46: 
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(9384, true, false, (int) true, 1125, true, 1125, (CharacterClass) 9384);
CharacterClass characterClass = null;
((SimpleSector) _boolean).getBonus(characterClass);

Test 47: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 48: 
SimpleArea simpleArea = new SimpleArea(35, 887, (Sector) 887);

Test 49: 
SimpleArea simpleArea = new SimpleArea(1545, 1545, (Sector) 1545);
int _int = 1545;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1545;
String string = "Energy Rifle";
int _int = 1545;
int _int = 1545;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1545;
String string = "Elite Ranger";
String string = "Energy Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "t)UF:.b4X{`jDW3Gkd{");

Test 50: 
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());

Test 51: 
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(50, true, true, 10, 20, false, 30, (CharacterClass) 50);
((SimpleSector) _boolean).isOccupied();

Test 52: 
SimpleArea simpleArea = new SimpleArea(645, 645, (Sector) 645);
int _int = 2471;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "aG{";
int _int = 2;
int _int = 645;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 3450;
String string = "aG{";
String string = "xc-Ol=6=j1ODGn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "xc-Ol=6=j1ODGn");

Test 53: 
SimpleArea simpleArea = new SimpleArea(645, 645, (Sector) 645);
int _int = 1231;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = " crits (";
int _int = 2;
int _int = 645;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 645);
int _int = 3450;
String string = "aG{";
String string = "xc-Ol=6=j1ODGn";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) combatantState, "xc-Ol=6=j1ODGn");

Test 54: 
SimpleBattleField simpleBattleField = new SimpleBattleField(10, 20);

Test 55: 
int _int = 645;
int _int = 645;
SimpleArea simpleArea = new SimpleArea(645, 645, (Sector) 645);
int _int = 1234;
boolean _boolean = false;
boolean _boolean = true;
int _int = 5678;
boolean _boolean = false;
int _int = 31;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
((SimpleSector) _int).equals(simpleSector);

Test 56: 
SimpleSector simpleSector = new SimpleSector(1256, true, true, 1256, 1256, true, 1256, (CharacterClass) 1256);

Test 57: 
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(30, true, false, 0, 1212, true, 30, (CharacterClass) 30);
CharacterClass characterClass = null;
((SimpleSector) _boolean).classBonus(characterClass);

Test 58: 

Test 59: 
SimpleArea simpleArea = new SimpleArea(1539, 1539, (Sector) 1539);


* Minimizing test suite
* test suite isTestSuite: 46
Test 0: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getOccupier();
Test 1: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-1), 0, false, 0, characterClass);
simpleSector.isAttackerSpawn();
Test 2: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 2, false, 0, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 3: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getBonus(characterClass);
Test 4: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isFlag();
Test 5: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(sectorObserver);
Test 6: 
SimpleBattleField simpleBattleField = new SimpleBattleField(10, 20);
Test 7: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAreas();
Test 8: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.isDefenderSpawn();
Test 9: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1629), 1237, true, 0, characterClass);
simpleSector.getHeight();
Test 10: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1545, true, true, 1545, 1545, true, 1545, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(1545, 1545, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1545, simpleArea, true);
simpleSector.gainControl(combatantSide);
SimpleWeapon simpleWeapon = new SimpleWeapon(1545, "t)UF:.b4X{`jDW3Gkd{", 1545, 1545);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1545, "t)UF:.b4X{`jDW3Gkd{", characterClass, simpleWeapon, "t)UF:.b4X{`jDW3Gkd{");
simpleSector.free();
Test 11: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
SectorObserver sectorObserver = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(sectorObserver);
simpleSector.free();
Test 12: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
simpleSector.isOccupied();
Test 13: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2471, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "aG{", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.isOccupied();
Test 14: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 887, simpleSector);
simpleSector.getDefenseBonus(characterClass);
Test 15: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1231, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1936), " crits (", 2, 645);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3450, "aG{", characterClass, simpleWeapon, "xc-Ol=6=j1ODGn");
simpleSector.getDefenseBonus(characterClass);
Test 16: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
CharacterClass characterClass = CharacterClass.GREENHORN;
simpleSector.getDefenseBonus(characterClass);
Test 17: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.hashCode();
Test 18: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, false, false, 12, 12, false, 12, characterClass);
simpleSector.equals((Object) null);
Test 19: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(31, true, true, 31, 362, true, 31, characterClass);
simpleSector.equals(simpleSector);
Test 20: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.equals(characterClass);
Test 21: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, (-1), true, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 22: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(2471, true, true, 2471, 2471, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(645, 645, simpleSector);
SimpleSector simpleSector = new SimpleSector(0, true, true, 2471, (-2485), false, 31, characterClass);
simpleSector.equals(simpleSector);
Test 23: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), 31, true, (-556), characterClass);
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 24: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(710, false, false, 710, 710, false, 710, characterClass);
SimpleSector simpleSector = new SimpleSector(710, false, true, 710, 710, false, 710, characterClass);
simpleSector.equals(simpleSector);
Test 25: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1502, characterClass);
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1526, characterClass);
simpleSector.equals(simpleSector);
Test 26: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1244, true, true, 1244, 1244, true, 1244, characterClass);
simpleSector.equals(simpleSector);
Test 27: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, characterClass);
SimpleSector simpleSector = new SimpleSector(2287, false, true, 0, 0, true, 0, characterClass);
simpleSector.equals(simpleSector);
Test 28: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, true, false, 1231, 1231, true, 1231, characterClass);
simpleSector.equals(simpleSector);
Test 29: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.equals(simpleSector);
Test 30: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(720, false, false, 720, 720, false, 720, characterClass);
SimpleSector simpleSector = new SimpleSector(731, false, false, 720, 720, false, 720, characterClass);
simpleSector.equals(simpleSector);
Test 31: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, (-757), (-757), false, (-1464), characterClass);
simpleSector.classBonus(characterClass);
Test 32: 
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(33, true, false, 0, 1212, true, 33, characterClass);
simpleSector.classBonus(characterClass);
Test 33: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, characterClass);
simpleSector.classBonus(characterClass);
Test 34: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, false, (-1304), (-993), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(3000, (-3474), simpleSector);
simpleSector.getAreas();
Test 35: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 36: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-256), true, false, 635, 3, true, 31, characterClass);
simpleSector.getAttackBonus(characterClass);
Test 37: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, characterClass);
simpleSector.getDamageBonus();
Test 38: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getDefenseBonus(characterClass);
Test 39: 
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), characterClass);
simpleSector.getHeight();
Test 40: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.getHeight();
Test 41: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1159), false, true, (-1159), (-1159), true, (-1159), characterClass);
CombatantSide combatantSide = CombatantSide.ATTACKER;
simpleSector.gainControl(combatantSide);
simpleSector.getOccupier();
Test 42: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, characterClass);
simpleSector.isAttackerSpawn();
Test 43: 
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, characterClass);
simpleSector.isDefenderSpawn();
Test 44: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(122, false, false, 122, 122, false, 122, characterClass);
simpleSector.isFlag();
Test 45: 
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1539, true, true, 1539, 1539, true, 1539, characterClass);
SimpleArea simpleArea = new SimpleArea(1539, 1539, simpleSector);
simpleSector._addArea(simpleArea);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 105
* Number of covered goals: 101
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 35
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Generated 46 tests with total length 173
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 39%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
simpleSector.getOccupier();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetOccupier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-1), 0, false, 0, arg7);
boolean attackerSpawn = simpleSector.isAttackerSpawn();
assertFalse(attackerSpawn);
assertEquals(0, simpleSector.getHeight());
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testIsNotAttackerSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 2, false, 0, arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertFalse(simpleSector.isAttackerSpawn());
assertEquals(0, attackBonus);
assertEquals(0, simpleSector.getHeight());
assertFalse(simpleSector.isFlag());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetAttackBonusForAdventurer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg0);
SectorBonus bonus = simpleSector.getBonus(arg0);
assertTrue(simpleSector.isFlag());
assertEquals((-1646), bonus.defendBonus);
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-1646), bonus.attackBonus);


** It was a parseable test case! 
refined test name is: testGetBonusSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
boolean flag = simpleSector.isFlag();
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(flag);
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testIsFlagCorrectlySet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
SectorObserver arg0 = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.removeObserver(arg0);
assertTrue(simpleSector.isFlag());
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testRemoveObserverPreservesFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SimpleBattleField simpleBattleField = new SimpleBattleField(10, 20);
assertEquals(10, simpleBattleField.getWidth());


** It was a parseable test case! 
refined test name is: testGetWidthMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
simpleSector.getAreas();
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetAreas
* Compiling Tests
refined test name is: testGetAreas
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), arg7);
boolean defenderSpawn = simpleSector.isDefenderSpawn();
assertFalse(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals((-6372), simpleSector.getHeight());
assertTrue(defenderSpawn);


** It was a parseable test case! 
refined test name is: testCheckDefenderSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1629), 1237, true, 0, arg7);
int height = simpleSector.getHeight();
assertTrue(simpleSector.isFlag());
assertEquals(0, height);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetHeightAndBooleanGetters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, arg7);
SectorObserver arg0 = mock(SectorObserver.class, new ViolatedAssumptionAnswer());
simpleSector.addObserver(arg0);
simpleSector.free();
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isDefenderSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(1750, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testAddObservershouldHaveListOfObservers
* Compiling Tests
refined test name is: testAddObserver
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7);
boolean occupied = simpleSector.isOccupied();
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isFlag());
assertEquals(35, simpleSector.getHeight());
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(occupied);


** It was a parseable test case! 
refined test name is: testCreateSimpleSectorAndCheckProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.ADVENTURER;
SimpleSector arg2 = new SimpleSector(35, false, true, 0, 0, false, 0, arg0);
SimpleArea simpleArea = new SimpleArea(35, 887, arg2);
int defenseBonus = arg2.getDefenseBonus(arg0);
assertTrue(arg2.isAttackerSpawn());
assertFalse(arg2.isFlag());
assertFalse(arg2.isDefenderSpawn());
assertEquals(35, arg2.getHeight());
assertEquals(0, defenseBonus);


** It was a parseable test case! 
refined test name is: testCalculateDefenseBonus
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7);
CharacterClass arg0 = CharacterClass.GREENHORN;
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertFalse(simpleSector.isDefenderSpawn());
assertEquals(35, simpleSector.getHeight());
assertEquals(0, defenseBonus);
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetDefenseBonusForNonAdventurer
* Compiling Tests
refined test name is: testGetDefenseBonusNonAdventurer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
simpleSector.hashCode();
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(1125, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testHashCodeAndIsAttackerSpawn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, false, false, 12, 12, false, 12, arg7);
boolean equals = simpleSector.equals((Object) null);
assertFalse(simpleSector.isAttackerSpawn());
assertEquals(12, simpleSector.getHeight());
assertFalse(equals);
assertFalse(simpleSector.isFlag());
assertFalse(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorEqualsNullObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector arg0 = new SimpleSector(31, true, true, 31, 362, true, 31, arg7);
boolean equals = arg0.equals(arg0);
assertTrue(arg0.isFlag());
assertTrue(equals);
assertTrue(arg0.isDefenderSpawn());
assertEquals(31, arg0.getHeight());
assertTrue(arg0.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testSectorEqualsItself
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg0);
boolean equals = simpleSector.equals(arg0);
assertEquals(1125, simpleSector.getHeight());
assertFalse(equals);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorEqualsCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, (-1), true, 0, arg7);
SimpleSector arg0 = new SimpleSector(2287, false, true, 0, 0, true, 0, arg7);
boolean equals = simpleSector.equals(arg0);
assertTrue(arg0.isFlag());
assertFalse(arg0.isDefenderSpawn());
assertEquals(2287, arg0.getHeight());
assertTrue(arg0.isAttackerSpawn());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualSectorsButDifferentFlags
* Compiling Tests
refined test name is: testSimpleSectorEquality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg2 = new SimpleSector(2471, true, true, 2471, 2471, true, 0, arg7);
SimpleArea simpleArea = new SimpleArea(645, 645, arg2);
SimpleSector arg0 = new SimpleSector(0, true, true, 2471, (-2485), false, 31, arg7);
boolean equals = arg2.equals(arg0);
assertFalse(equals);
assertEquals(2471, arg2.getHeight());
assertFalse(arg0.isFlag());
assertTrue(arg0.isAttackerSpawn());
assertEquals(0, arg0.getHeight());
assertTrue(arg0.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testEqualsDifferentSectorsReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), 31, true, (-556), arg7);
SimpleSector arg0 = new SimpleSector(2373, false, true, (-556), 2373, true, 0, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(equals);
assertTrue(arg0.isFlag());
assertEquals((-1), simpleSector.getHeight());
assertTrue(arg0.isAttackerSpawn());
assertEquals(2373, arg0.getHeight());
assertFalse(arg0.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSectorEquality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(710, false, false, 710, 710, false, 710, arg7);
SimpleSector arg0 = new SimpleSector(710, false, true, 710, 710, false, 710, arg7);
boolean equals = simpleSector.equals(arg0);
assertEquals(710, arg0.getHeight());
assertFalse(arg0.isDefenderSpawn());
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(arg0.isFlag());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1502, false, false, 1502, 1502, false, 1502, arg7);
SimpleSector arg0 = new SimpleSector(1502, false, false, 1502, 1502, false, 1526, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(arg0.isFlag());
assertFalse(arg0.isAttackerSpawn());
assertEquals(1502, arg0.getHeight());
assertFalse(equals);
assertFalse(arg0.isDefenderSpawn());
assertFalse(arg0.equals((Object)simpleSector));


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentReferencesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(35, false, true, 0, 0, false, 0, arg7);
SimpleSector arg0 = new SimpleSector(2287, false, true, 0, 0, true, 0, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(simpleSector.isFlag());
assertEquals(2287, arg0.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertFalse(equals);
assertTrue(arg0.isFlag());
assertFalse(arg0.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector arg0 = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7);
SimpleSector simpleSector = new SimpleSector(1231, true, false, 1231, 1231, true, 1231, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(simpleSector.isAttackerSpawn());
assertFalse(equals);
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(1231, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testSimpleSectorEqualityWithDifferentValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7);
SimpleSector arg0 = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7);
boolean equals = simpleSector.equals(arg0);
assertTrue(equals);
assertEquals(1231, arg0.getHeight());
assertFalse(arg0.isAttackerSpawn());
assertFalse(arg0.isDefenderSpawn());
assertFalse(arg0.isFlag());


** It was a parseable test case! 
refined test name is: testEqualsAndHashCodeConsistency
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(720, false, false, 720, 720, false, 720, arg7);
SimpleSector arg0 = new SimpleSector(731, false, false, 720, 720, false, 720, arg7);
boolean equals = simpleSector.equals(arg0);
assertFalse(arg0.isAttackerSpawn());
assertFalse(arg0.isDefenderSpawn());
assertFalse(arg0.isFlag());
assertFalse(equals);
assertEquals(731, arg0.getHeight());


** It was a parseable test case! 
refined test name is: testEqualsSimpleSectorObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, (-757), (-757), false, (-1464), arg0);
int classBonus = simpleSector.classBonus(arg0);
assertFalse(simpleSector.isFlag());
assertEquals(1, simpleSector.getHeight());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals((-1464), classBonus);
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testClassBonusWithDuelantCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(33, true, false, 0, 1212, true, 33, arg0);
int classBonus = simpleSector.classBonus(arg0);
assertTrue(simpleSector.isDefenderSpawn());
assertEquals(33, simpleSector.getHeight());
assertEquals(33, classBonus);
assertTrue(simpleSector.isFlag());
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testClassBonusForAdventurerInSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2373, false, true, (-556), 2373, true, 0, arg0);
int classBonus = simpleSector.classBonus(arg0);
assertFalse(simpleSector.isDefenderSpawn());
assertEquals(2373, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(0, classBonus);


** It was a parseable test case! 
refined test name is: testClassBonusValidCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector arg2 = new SimpleSector(0, true, false, (-1304), (-993), false, 0, arg7);
SimpleArea simpleArea = new SimpleArea(3000, (-3474), arg2);
arg2.getAreas();
assertTrue(arg2.isDefenderSpawn());
assertEquals(0, arg2.getHeight());
assertFalse(arg2.isAttackerSpawn());
assertFalse(arg2.isFlag());


** It was a parseable test case! 
refined test name is: testGetAreasEmptyList
* Compiling Tests
refined test name is: testGetAreasEmptyListReturnedForEmptySimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-1646), attackBonus);
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());


** It was a parseable test case! 
refined test name is: testGetAttackBonusForSoldier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-256), true, false, 635, 3, true, 31, arg0);
int attackBonus = simpleSector.getAttackBonus(arg0);
assertTrue(simpleSector.isFlag());
assertEquals(666, attackBonus);
assertFalse(simpleSector.isAttackerSpawn());
assertEquals((-256), simpleSector.getHeight());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testGetAttackBonusWithWorkerCharacterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1231, false, false, 1231, 1231, false, 1231, arg7);
int damageBonus = simpleSector.getDamageBonus();
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertEquals(0, damageBonus);
assertEquals(1231, simpleSector.getHeight());
assertFalse(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetDamageBonusWithExpectedProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg0 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), arg0);
int defenseBonus = simpleSector.getDefenseBonus(arg0);
assertTrue(simpleSector.isDefenderSpawn());
assertEquals((-6372), simpleSector.getHeight());
assertFalse(simpleSector.isFlag());
assertEquals((-6373), defenseBonus);
assertTrue(simpleSector.isAttackerSpawn());


** It was a parseable test case! 
refined test name is: testGetDefenseBonusForGreenhornSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-6372), true, true, (-6372), (-1), false, (-6372), arg7);
int height = simpleSector.getHeight();
assertTrue(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals((-6372), height);


** It was a parseable test case! 
refined test name is: testGetHeightForGreenhornSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
int height = simpleSector.getHeight();
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isAttackerSpawn());
assertEquals(1125, height);
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testSimpleSector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1159), false, true, (-1159), (-1159), true, (-1159), arg7);
CombatantSide arg0 = CombatantSide.ATTACKER;
simpleSector.gainControl(arg0);
simpleSector.getOccupier();
assertTrue(simpleSector.isOccupied());


** It was a parseable test case! 
refined test name is: testGainControlAttackerSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1125, true, true, (-2771), (-2771), true, 1125, arg7);
boolean attackerSpawn = simpleSector.isAttackerSpawn();
assertTrue(attackerSpawn);
assertEquals(1125, simpleSector.getHeight());
assertTrue(simpleSector.isFlag());
assertTrue(simpleSector.isDefenderSpawn());


** It was a parseable test case! 
refined test name is: testIsAttackerSpawnWithHeightAndFlagSetToTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1750, false, true, 1993, (-1021), true, 1750, arg7);
boolean defenderSpawn = simpleSector.isDefenderSpawn();
assertFalse(defenderSpawn);
assertTrue(simpleSector.isAttackerSpawn());
assertTrue(simpleSector.isFlag());
assertEquals(1750, simpleSector.getHeight());


** It was a parseable test case! 
refined test name is: testIsDefenderSpawnSimpleSectorObjectReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(122, false, false, 122, 122, false, 122, arg7);
boolean flag = simpleSector.isFlag();
assertFalse(simpleSector.isDefenderSpawn());
assertFalse(simpleSector.isAttackerSpawn());
assertEquals(122, simpleSector.getHeight());
assertFalse(flag);


** It was a parseable test case! 
refined test name is: testIsFlagAndGetHeight
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector arg2 = new SimpleSector(1539, true, true, 1539, 1539, true, 1539, arg7);
SimpleArea arg0 = new SimpleArea(1539, 1539, arg2);
arg2._addArea(arg0);
assertEquals(1539, arg0.getHeight());
assertTrue(arg2.isDefenderSpawn());
assertTrue(arg2.isAttackerSpawn());
assertTrue(arg2.isFlag());


** It was a parseable test case! 
refined test name is: testCreateSimpleSectorAndAreaWithCorrectHeight
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.240 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.298 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.299 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.359 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.361 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.426 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.427 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.506 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.602 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.603 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.680 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.681 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 18:02:36.758 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.829 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:36.894 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.894 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 18:02:36.994 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:36.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.053 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.054 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.125 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 18:02:37.240 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.241 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.504 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.564 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.646 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.681 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.682 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.721 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.722 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 18:02:37.753 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.755 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.796 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.833 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.907 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.908 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:37.959 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:37.960 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.030 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.031 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.106 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.108 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.192 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.246 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.248 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.329 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.330 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.370 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.371 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.410 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.410 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 18:02:38.475 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.476 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.521 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.522 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.574 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
[MASTER] 18:02:38.643 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.644 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.699 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.700 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.753 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.754 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.802 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.803 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.846 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.846 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:38.916 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:38.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:39.030 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:39.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:39.158 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:39.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 18:02:39.240 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:39.241 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 13 called: 2 to improve: false
** Write a test suite: 18 called: 3 to improve: false
** Write a test suite: 30 called: 4 to improve: false
[MASTER] 18:02:39.830 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:39.831 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 11 called: 0 to improve: false
** Write a test suite: 23 called: 1 to improve: false
** Write a test suite: 28 called: 2 to improve: false
** Write a test suite: 31 called: 3 to improve: false
** Write a test suite: 34 called: 4 to improve: false
[MASTER] 18:02:40.564 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar963151231854340874.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 18:02:40.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar963151231854340874.jar
[MASTER] 18:02:41.097 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 18:02:41.575 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
