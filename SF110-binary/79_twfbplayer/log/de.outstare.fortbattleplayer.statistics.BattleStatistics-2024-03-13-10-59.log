* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.statistics.BattleStatistics
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 18015
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 10:59:17.561 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 10:59:17.569 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 10:59:17.570 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 10:59:17.605 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntBinaryOperator
[MASTER] 10:59:17.607 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntUnaryOperator
[MASTER] 10:59:17.650 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 10:59:17.651 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 10:59:17.652 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 10:59:20.727 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.statistics.BattleStatistics
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 693
* Using seed 1710327555233
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 327 / 693
[MASTER] 10:59:21.809 [logback-1] WARN  TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:59:21.809 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             0%] [Cov:==================>                52%][Progress:>                             1%] [Cov:==================>                53%][Progress:>                             1%] [Cov:==================>                54%][Progress:>                             1%] [Cov:===================>               55%][Progress:>                             1%] [Cov:===================>               55%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             2%] [Cov:===================>               56%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             2%] [Cov:====================>              58%][Progress:>                             2%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            65%][MASTER] 10:59:30.863 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           67%][Progress:=>                            6%] [Cov:=======================>           67%][Progress:=>                            6%] [Cov:=======================>           67%][Progress:=>                            6%] [Cov:=======================>           67%][Progress:==>                           7%] [Cov:=======================>           67%][Progress:==>                           7%] [Cov:=======================>           67%][Progress:==>                           7%] [Cov:=======================>           67%][Progress:==>                           7%] [Cov:=======================>           67%][Progress:==>                           7%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           8%] [Cov:========================>          71%][Progress:==>                           8%] [Cov:========================>          71%][Progress:==>                           8%] [Cov:========================>          71%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][MASTER] 10:59:56.444 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:===============>              53%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%]
* Search finished after 201s and 701 generations, 408066 statements, best individual has fitness: 94.0
* Generated before the refinement 63 tests with total length 414
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfBayonets = battleStatistics.numberOfBayonets(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 23);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfBayonets(combatantSide);
        // Improved test data
        int attackerCount = 50;
        int defenderCount = 10;
        CombatantSide attackerSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfBayonets(attackerSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfBayonets(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfBayonets(combatantSide) target is: battleStatistics method is: numberOfBayonets(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
int attackerCount = 50, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int defenderCount = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfBayonets(attackerSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfBayonets(attackerSide) target is: battleStatistics method is: numberOfBayonets(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: int _int = 50
* this is vulnerable: int _int = 10
TestCase is: int _int = 100;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);
int _int = 50;
int _int = 10;
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 1)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-221), "", arg4, arg5, "5s2a.rGw_;c='")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, (-221))
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-221), "", characterClass, simpleWeapon, "5s2a.rGw_;c='");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-221));
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(200, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(0, 1);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, -597, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 200, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "M16A2", 31, 1552);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 200, "John Doe", characterClass, simpleWeapon, "5s2a.rGw_;c='");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 200);
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(200, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, -597, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 200, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "M16A2", 31, 1552), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 200, "John Doe", characterClass, simpleWeapon, "5s2a.rGw_;c='"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 200), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 200) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 200;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
int _int = 1;
Point point = new Point(_int, _int);
int _int = 1637;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 200;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2759;
String string = "M16A2";
int _int = 31;
int _int = 1552;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 200;
String string = "John Doe";
String string = "5s2a.rGw_;c='";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "5s2a.rGw_;c='");
int _int = 200;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801))
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-3801), 1474, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 50, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1079), "L12o{a)[A%r(}s6@", arg4, (Weapon) null, "")
statement is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isHit(arg0, (-2873), 1670)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1079), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, (-2873), 1670);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-3801, -3801);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-3801, false, true, -3801, 1670, false, -3801, characterClass);
        SimpleArea simpleArea = new SimpleArea(-3801, 1474, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1079, "L12o{a)[A%r(}s6@", characterClass, ((Weapon) (null)), "");
        battleStatistics.isHit(simpleCombatant, -2873, 1670);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-3801, -3801), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-3801, false, true, -3801, 1670, false, -3801, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-3801, 1474, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1079, "L12o{a)[A%r(}s6@", characterClass, ((Weapon) (null)), ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isHit(simpleCombatant, -2873, 1670), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isHit(simpleCombatant, -2873, 1670) target is: battleStatistics method is: isHit(SimpleCombatant,int,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
boolean _boolean = false;
boolean _boolean = true;
int _int = 1670;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, 1670, false, (-3801), (CharacterClass) _boolean);
int _int = 1474;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _boolean);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "L12o{a)[A%r(}s6@";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, "L12o{a)[A%r(}s6@", (CharacterClass) _boolean, (Weapon) null, "");
int _int = 1670;
int _int = null;
battleStatistics.isHit(simpleCombatant, _int, _int);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-386), 691)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide defenderSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(0, 691);
        battleStatistics.amountOfAttackBonus(defenderSide);
        CombatantSide defenderSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(-386, 691);
        battleStatistics.amountOfAttackBonus(defenderSide);
    }
}
statement is: CombatantSide defenderSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 691), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.amountOfAttackBonus(defenderSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(defenderSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: CombatantSide defenderSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(-386, 691), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.amountOfAttackBonus(defenderSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(defenderSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 6
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-20, -20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfGraphitLubricants(combatantSide);
        // Change the primitive values and strings to more illustrative examples }}
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-20, -20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfGraphitLubricants(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(combatantSide) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Change the primitive values and strings to more illustrative examples }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = null;
battleStatistics.numberOfGraphitLubricants(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-442), 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-442, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-442, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, 2);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801))
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(200, 1000);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfFettesOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(200, 1000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 200;
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23)
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
battleStatistics.numberOfSchmierOil((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.numberOfSchmierOil(ATTACKER);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.numberOfSchmierOil(ATTACKER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(ATTACKER) target is: battleStatistics method is: numberOfSchmierOil()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfHipFlasks(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfHipFlasks(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(combatantSide) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322))
statement is: getHitsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.getHitsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        battleStatistics.getHitsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getHitsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getHitsPerRound() target is: battleStatistics method is: getHitsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getHitsPerRound()Ljava/util/Map;
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getHitsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 60);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 60), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
int _int = 60;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "i&vali parameteers: ", arg4, arg5, "i&vali parameteers: ")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M4A1", 50, 100);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 200, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "Tank T1", characterClass, simpleWeapon, "Tank T1");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M4A1", 50, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 200, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "Tank T1", characterClass, simpleWeapon, "Tank T1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
String string = "M4A1";
int _int = 50;
int _int = 100;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 50;
int _int = 100;
boolean _boolean = true;
int _int = 50;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 200;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Tank T1";
String string = "Tank T1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(29, 29)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(29, 29);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfDefenseBonus(combatantSide);
        // Improved test data:
        BattleStatistics battleStatistics = new BattleStatistics(40, 30);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(29, 29), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
BattleStatistics battleStatistics = new BattleStatistics(40, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 29;
int _int = 29;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);
int _int = 40;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: getShotsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.getShotsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        battleStatistics.getShotsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getShotsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getShotsPerRound() target is: battleStatistics method is: getShotsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getShotsPerRound()Ljava/util/Map;
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getShotsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-2911))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-2911))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-2911))
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        battleStatistics.setRound(25);
        battleStatistics.setRound(25);
        battleStatistics.setRound(25);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(25) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(25) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(25) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
((BattleStatistics) _int).setRound(_int);
int _int = 25;
((BattleStatistics) _int).setRound(_int);
int _int = 25;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(84, 84)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(84)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(84, 84, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 84, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 84, ",9AVrG8*!(##?Hwwu", arg4, arg5, ",9AVrG8*!(##?Hwwu")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(84)
test data is: BattleStatistics battleStatistics = new BattleStatistics(84, 84);
battleStatistics.setRound(84);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, characterClass);
SimpleArea simpleArea = new SimpleArea(84, 84, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 84, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 84, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(84);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 10);
        battleStatistics.setRound(10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(10, false, false, 10, 10, false, 10, characterClass);
        SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Laser Gun", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Laser Gun", characterClass, simpleWeapon, "Laser Gun");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.setRound(10);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(10) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(10, false, false, 10, 10, false, 10, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Laser Gun", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Laser Gun", characterClass, simpleWeapon, "Laser Gun"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 27
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.setRound(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(10) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 10;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
((BattleStatistics) _int).setRound(_int);
int _int = 10;
boolean _boolean = false;
boolean _boolean = false;
int _int = 10;
int _int = 10;
boolean _boolean = false;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Laser Gun";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Laser Gun";
String string = "Laser Gun";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",9AVrG8*!(##?Hwwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 10;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(23, 534, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2), arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "2/CdKT3Y=kFmw>;D*o", arg4, arg5, "2/CdKT3Y=kFmw>;D*o")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "2/CdKT3Y=kFmw>;D*o", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(23, 23);
        SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A well-oiled machine gun", 23, 23);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, -2, true, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "A well-oiled machine gun", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.combatantLifetime(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(23, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A well-oiled machine gun", 23, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, -2, true, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "A well-oiled machine gun", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.combatantLifetime(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(simpleCombatant) target is: battleStatistics method is: combatantLifetime(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
TestCase is: int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 23;
String string = "A well-oiled machine gun";
int _int = 23;
int _int = 23;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1118719;
boolean _boolean = true;
boolean _boolean = true;
int _int = 534;
boolean _boolean = true;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 1, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 534;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 1;
String string = "A well-oiled machine gun";
String string = "2/CdKT3Y=kFmw>;D*o";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "2/CdKT3Y=kFmw>;D*o");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "i&vali parameteers: ", arg4, arg5, "i&vali parameteers: ")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "AK-47", 100, 250);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "John Doe", characterClass, simpleWeapon, "MP5");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "AK-47", 100, 250), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "John Doe", characterClass, simpleWeapon, "MP5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "AK-47";
int _int = 100;
int _int = 250;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 1;
boolean _boolean = true;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "John Doe";
String string = "MP5";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(23, 23, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 23, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 23, "z&vali par meteer}: ", arg4, arg5, "z&vali par meteer}: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "z&vali par meteer}: ", characterClass, simpleWeapon, "z&vali par meteer}: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        SimpleWeapon simpleWeapon = new SimpleWeapon(5, "Marauder's Axe", 5, 20);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(1, true, false, 1, 20, true, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(3, 5, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 5, "Goliath", characterClass, simpleWeapon, "Goliath");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(5, "Marauder's Axe", 5, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, true, false, 1, 20, true, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(3, 5, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 5, "Goliath", characterClass, simpleWeapon, "Goliath"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
String string = "Marauder's Axe";
int _int = 5;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
boolean _boolean = true;
boolean _boolean = false;
int _int = 1;
int _int = 20;
boolean _boolean = true;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 3;
int _int = 5;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "Goliath";
String string = "Goliath";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "z&vali par meteer}: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(23, 23, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 23, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 23, "i&val p(arameteers: ", arg4, arg5, "i&val p(arameteers: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&val p(arameteers: ", characterClass, simpleWeapon, "i&val p(arameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfSchmierOil((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(23, 23);
        SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A mighty sword", 23, 23);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
        SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "Greg", characterClass, simpleWeapon, "Greg's sword");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfSchmierOil(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(23, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A mighty sword", 23, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "Greg", characterClass, simpleWeapon, "Greg's sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfSchmierOil(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(((CombatantSide) (null))) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 23;
String string = "A mighty sword";
int _int = 23;
int _int = 23;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 23;
boolean _boolean = false;
boolean _boolean = false;
int _int = 23;
int _int = 23;
boolean _boolean = false;
int _int = 23;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 23;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 23;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "Greg";
String string = "Greg's sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&val p(arameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "i&valieparameteers: ", arg4, arg5, "i&valieparameteers: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&valieparameteers: ", characterClass, simpleWeapon, "i&valieparameteers: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Sword of Light", 2, 100);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(50, true, true, 2, 2, true, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 50, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 200, "Gladiator", characterClass, simpleWeapon, "Shield of Protection");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Sword of Light", 2, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, true, true, 2, 2, true, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 50, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 200, "Gladiator", characterClass, simpleWeapon, "Shield of Protection"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
String string = "Sword of Light";
int _int = 2;
int _int = 100;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 2;
boolean _boolean = true;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 200;
String string = "Gladiator";
String string = "Shield of Protection";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&valieparameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(23, 23, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 23, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 23, "i&vali parameteers: ", arg4, arg5, "i&vali parameteers: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(23, 23);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "i&vali parameteers: ", 5, 23);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
        SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(23, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "i&vali parameteers: ", 5, 23), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
String string = "i&vali parameteers: ";
int _int = 5;
int _int = 23;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 23;
boolean _boolean = true;
boolean _boolean = true;
int _int = 23;
int _int = 23;
boolean _boolean = true;
int _int = 23;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 23;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "i&vali parameteers: ";
String string = "i&vali parameteers: ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "i&vali parameteers: ", arg4, arg5, "i&vali parameteers: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
String string = "i&vali parameteers: ";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 2;
boolean _boolean = true;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "i&vali parameteers: ";
String string = "i&vali parameteers: ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(121, 121)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(121, 121, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 121, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 121, ",9AVrGP*jI(A#?`MHVwu", arg4, arg5, ",9AVrGP*jI(A#?`MHVwu")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(121, 121);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(121, 121);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
        SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(121, "Laser Cannon", 121, 121);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, "Archer", characterClass, simpleWeapon, "Archer");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(121, 121), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(121, "Laser Cannon", 121, 121), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, "Archer", characterClass, simpleWeapon, "Archer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 121;
int _int = 121;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 121;
boolean _boolean = true;
boolean _boolean = true;
int _int = 121;
int _int = 121;
boolean _boolean = true;
int _int = 121;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 121;
int _int = 121;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 121;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 121;
String string = "Laser Cannon";
int _int = 121;
int _int = 121;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 121;
String string = "Archer";
String string = "Archer";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrGP*jI(A#?`MHVwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(395, 395)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(395, 395, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 395, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 395, ",9AVrGP*jI(A#?`MHVwu", arg4, arg5, ",9AVrGP*jI(A#?`MHVwu")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(395, 395);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(395, 395);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
        SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(395, "Diamond Sword", 395, 395);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, "Black Dragon", characterClass, simpleWeapon, "Dragon's Breath");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(395, 395), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(395, "Diamond Sword", 395, 395), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, "Black Dragon", characterClass, simpleWeapon, "Dragon's Breath"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 395;
int _int = 395;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 395;
boolean _boolean = false;
boolean _boolean = false;
int _int = 395;
int _int = 395;
boolean _boolean = false;
int _int = 395;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 395;
int _int = 395;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 395;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 395;
String string = "Diamond Sword";
int _int = 395;
int _int = 395;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 395;
String string = "Black Dragon";
String string = "Dragon's Breath";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrGP*jI(A#?`MHVwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "kL [5", arg4, arg5, "Hc&U-K@k")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(478, 478);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.isOnline(simpleCombatant, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(478, 478), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "invalid parameters: ";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 478;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 2012;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "kL [5";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(58, 58)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(58)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(58, 58, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 58, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 58, ",9AVrG8*!(##?Hwwu", arg4, arg5, ",9AVrG8*!(##?Hwwu")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(58)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.setRound(58);
simpleCombatant.addObserver(battleStatistics);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 10);
        battleStatistics.setRound(10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(10, true, true, 10, 10, true, 10, characterClass);
        SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true);
        SimpleWeapon simpleWeapon;
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(10) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(10, true, true, 10, 10, true, 10, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon, class spoon.support.reflect.code.CtLocalVariableImpl
TestCase is: int _int = 10;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
((BattleStatistics) _int).setRound(_int);
int _int = 10;
boolean _boolean = true;
boolean _boolean = true;
int _int = 10;
int _int = 10;
boolean _boolean = true;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "i&vali parameteers: ", arg4, arg5, "i&vali parameteers: ")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2, "Fireball", 50, 2);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Mage", characterClass, simpleWeapon, "Wizard");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "Fireball", 50, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Mage", characterClass, simpleWeapon, "Wizard"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
String string = "Fireball";
int _int = 50;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 2;
boolean _boolean = true;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "Mage";
String string = "Wizard";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(58, 58)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(58, 58, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 58, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 58, ",9AVrG8*!(##?Hwwu", arg4, arg5, ",9AVrG8*!(##?Hwwu")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 58, "", arg4, arg5, (String) null)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg0, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(58, 58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(58, 58);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
        SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(58, "Energy Blaster", 58, 58);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "Energy Blaster", characterClass, simpleWeapon, "Energy Blaster");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, ((String) (null)));
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(58, 58), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(58, "Energy Blaster", 58, 58), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "Energy Blaster", characterClass, simpleWeapon, "Energy Blaster"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 58;
int _int = 58;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 58;
boolean _boolean = true;
boolean _boolean = true;
int _int = 58;
int _int = 58;
boolean _boolean = true;
int _int = 58;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 58;
int _int = 58;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 58;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 58;
String string = "Energy Blaster";
int _int = 58;
int _int = 58;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 58;
String string = "Energy Blaster";
String string = "Energy Blaster";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrG8*!(##?Hwwu");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
int _int = 58;
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrG8*!(##?Hwwu");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "kL [5", arg4, arg5, "Hc&U-K@k")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 25);
        SimpleWeapon simpleWeapon = new SimpleWeapon("Sword of Light", 8, 3);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(10, false, false, 25, 2012, false, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 8, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Warrior", characterClass, simpleWeapon, "Hc&U-K@k");
        battleStatistics.isOnline(simpleCombatant, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfShinyOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("Sword of Light", 8, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(10, false, false, 25, 2012, false, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 8, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Warrior", characterClass, simpleWeapon, "Hc&U-K@k"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
boolean _boolean = false;
boolean _boolean = false;
int _int = 25;
int _int = 2012;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 8;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Warrior";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (-710), false, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(478, (-1556), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "", arg4, arg5, "^A6%!ct(")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (-710), false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(478, (-1556), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "^A6%!ct(");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(478, 478);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(478, true, true, 478, -710, false, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(478, -1556, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "^A6%!ct(");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfShinyOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(478, 478), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(478, true, true, 478, -710, false, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(478, -1556, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "^A6%!ct("), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "invalid parameters: ";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 478;
boolean _boolean = true;
boolean _boolean = true;
int _int = 478;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 1, (CharacterClass) _int);
int _int = 478;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) string);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "";
String string = "^A6%!ct(";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^A6%!ct(");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.switchedPosList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.switchedPosList(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(((CombatantSide) (null))) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040))
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-10, -10);
        battleStatistics.critList(ATTACKER);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-10, -10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.critList(ATTACKER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(ATTACKER) target is: battleStatistics method is: critList()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
CombatantSide combatantSide = null;
battleStatistics.critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-463), 10)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-100, 50);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, 10);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(58, 58)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(58)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(58, 58, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 58, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 58, ",9AVrG8*!(##?Hwwu", arg4, arg5, ",9AVrG8*!(##?Hwwu")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 100);
        battleStatistics.setRound(100);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(100, true, true, 100, 100, true, 100, characterClass);
        SimpleArea simpleArea = new SimpleArea(100, 100, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Awesome Sword", 50, 25);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Awesome Sword", characterClass, simpleWeapon, "Awesome Sword");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(100) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(100, true, true, 100, 100, true, 100, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(100, 100, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Awesome Sword", 50, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Awesome Sword", characterClass, simpleWeapon, "Awesome Sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 27
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 100;
((BattleStatistics) _int).setRound(_int);
int _int = 100;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 100;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 100;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Awesome Sword";
int _int = 50;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Awesome Sword";
String string = "Awesome Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",9AVrG8*!(##?Hwwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(121, 121)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(121)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(121, 121, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 121, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, arg1, 121, ",Req[d<uOevp3HbT[a", arg4, arg5, ",Req[d<uOevp3HbT[a")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(121, 121);
battleStatistics.setRound(121);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 121, ",Req[d<uOevp3HbT[a", characterClass, simpleWeapon, ",Req[d<uOevp3HbT[a");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(50, 100);
        battleStatistics.setRound(50);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(50, true, true, 100, 120, true, 100, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 100, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(121, "dagger", 50, 120);
        SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 100, "adventurer", characterClass, simpleWeapon, "dagger");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(50, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(50) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, true, true, 100, 120, true, 100, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 100, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(121, "dagger", 50, 120), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 100, "adventurer", characterClass, simpleWeapon, "dagger"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 27
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 50;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
((BattleStatistics) _int).setRound(_int);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 120;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 121;
String string = "dagger";
int _int = 50;
int _int = 120;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "adventurer";
String string = "dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",Req[d<uOevp3HbT[a");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(478)
statement is: getNotShootersPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
battleStatistics.getNotShootersPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        battleStatistics.setRound(200);
        int notShootersPerRound = 10;
        String name = "John";
        battleStatistics.getNotShootersPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(200), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(200) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: int notShootersPerRound = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: battleStatistics.getNotShootersPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getNotShootersPerRound() target is: battleStatistics method is: getNotShootersPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getNotShootersPerRound()Ljava/util/Map;
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "John"
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 200;
((BattleStatistics) _int).setRound(_int);
int _int = 10;
String string = "John";
((BattleStatistics) _int).getNotShootersPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide) target is: battleStatistics method is: numberOfLoadingChamerOrEnhancedPatrons(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "invalid parameters: ", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "invalid parameters: ", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(478, 478);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "M4A1", 10.5, 230);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "John Doe", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(478, 478), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "M4A1", 10.5, 230), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "John Doe", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "M4A1";
double _double = 10.5;
int _int = 230;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, _int);
int _int = 478;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 2012;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2012, 2012, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-18), arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2012, "invalid parameters: ", arg4, arg5, "Hc&U-K@k")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-18), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "invalid parameters: ", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(478, 478);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Invalid Parameters:", 1, 1);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -18, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "Invalid Parameters:", characterClass, simpleWeapon, "Hc&U-K@k");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(478, 478), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Invalid Parameters:", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -18, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "Invalid Parameters:", characterClass, simpleWeapon, "Hc&U-K@k"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "Invalid Parameters:";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 478;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1219;
int _int = 2012;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2012;
int _int = 2012;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 2012;
String string = "Invalid Parameters:";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1425, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1586), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-386), ",9AVrG8*!(##?Hwwu", arg4, arg5, "")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-386), 691)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1586), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-386), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1586, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1, "The Deadly Assassin's Kris", 164, 691);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -386, "Ethan the Blacksmith", characterClass, simpleWeapon, "");
        BattleStatistics battleStatistics = new BattleStatistics(-386, 691);
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1586, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1, "The Deadly Assassin's Kris", 164, 691), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -386, "Ethan the Blacksmith", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(-386, 691), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 11
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 13
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
int _int = 1425;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) _int);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "The Deadly Assassin's Kris";
int _int = 164;
int _int = 691;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 691);
String string = "Ethan the Blacksmith";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, "");
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, 691);
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "kL [5", arg4, arg5, "Hc&U-K@k")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(478, 478);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "King Leonidas", characterClass, simpleWeapon, "Hector's Shield");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(478, 478), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "King Leonidas", characterClass, simpleWeapon, "Hector's Shield"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "invalid parameters: ";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 478;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 2012;
boolean _boolean = true;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "King Leonidas";
String string = "Hector's Shield";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(29, 29)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-512), 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 75, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-412), ",9AVrG8*!(##?Hwwu", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea((-512), 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-412), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(29, 29);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2, false, true, -412, 2, false, -412, characterClass);
        SimpleArea simpleArea = new SimpleArea(-512, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-512, "Laser Rifle", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -412, "Captain America", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(29, 29), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, false, true, -412, 2, false, -412, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-512, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-512, "Laser Rifle", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -412, "Captain America", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 29;
int _int = 29;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
boolean _boolean = false;
boolean _boolean = true;
int _int = 2;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, false, (-412), (CharacterClass) battleStatistics);
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _int);
int _int = 75;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Laser Rifle";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
String string = "Captain America";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "kL [5", arg4, arg5, "Hc&U-K@k")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(478, 478);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(478, 478), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "invalid parameters: ";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 478;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 2012;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "kL [5";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(52, 52)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(52, 52);
battleStatistics.combatantLifetime((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
        battleStatistics.combatantLifetime(((Combatant) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.combatantLifetime(((Combatant) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(((Combatant) (null))) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int countWeaponMods = battleStatistics.countWeaponMods(arg0, (WeaponModCounter) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.countWeaponMods(combatantSide, (WeaponModCounter) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        WeaponModCounter weaponModCounter = new WeaponModCounter();
        battleStatistics.countWeaponMods(combatantSide, weaponModCounter);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: WeaponModCounter weaponModCounter = new WeaponModCounter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter) target is: battleStatistics method is: countWeaponMods(CombatantSide,WeaponModCounter)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
WeaponModCounter weaponModCounter = null;
((BattleStatistics) _int).countWeaponMods(combatantSide, weaponModCounter);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801))
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-3801), 1474, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-3801), arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-3801), "L12o{a)[A%r(}s6@", arg4, (Weapon) null, "")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3801), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3801), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1000, false, true, 2000, 1670, false, 2000, characterClass);
        SimpleArea simpleArea = new SimpleArea(1000, 1474, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3000, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4000, "L12o{a)[A%r(}s6@", characterClass, ((Weapon) (null)), "");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1000, false, true, 2000, 1670, false, 2000, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1000, 1474, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3000, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4000, "L12o{a)[A%r(}s6@", characterClass, ((Weapon) (null)), ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1000;
boolean _boolean = false;
boolean _boolean = true;
int _int = 2000;
int _int = 1670;
boolean _boolean = false;
int _int = 2000;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1000;
int _int = 1474;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3000;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4000;
String string = "L12o{a)[A%r(}s6@";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(50, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 50, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "invalid parameters: ", arg4, arg5, "invalid parameters: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "invalid parameters: ", characterClass, simpleWeapon, "invalid parameters: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 100);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Katana", 2, 4);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Greenhorn", characterClass, simpleWeapon, "Katana");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Katana", 2, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Greenhorn", characterClass, simpleWeapon, "Katana"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
String string = "Katana";
int _int = 2;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2016;
boolean _boolean = false;
boolean _boolean = true;
int _int = 2016;
int _int = 478;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Greenhorn";
String string = "Katana";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "invalid parameters: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "i&vali parameteers: ", arg4, arg5, "i&vali parameteers: ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2, "A sword with 15 points of damage", 2, 2);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "A brave knight", characterClass, simpleWeapon, "A shield to protect themself");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "A sword with 15 points of damage", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "A brave knight", characterClass, simpleWeapon, "A shield to protect themself"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
String string = "A sword with 15 points of damage";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 2;
boolean _boolean = true;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "A brave knight";
String string = "A shield to protect themself";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2465), 383)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round((-2985))
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
battleStatistics.round((-2985));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-2465, 383);
        battleStatistics.round(-2985);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-2465, 383), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(-2985), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(-2985) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: round(D)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 383;
BattleStatistics battleStatistics = new BattleStatistics(_int, 383);
int _int = null;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(84.2853148)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.round(84.2853148);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.round(90.0);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(90.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(90.0) target is: battleStatistics method is: round(double)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
double _double = 90.0;
((BattleStatistics) _int).round(_double);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-45, -45);
        battleStatistics.round(0);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-45, -45), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(0) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: round(D)I
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
int _int = 0;
battleStatistics.round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-463), 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((Point) null, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2377), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "", arg4, arg5, "db:n-kJa\"PW")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-463), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-463, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-463, false, false, -463, -463, false, -2377, characterClass);
        SimpleArea simpleArea = new SimpleArea(((Point) (null)), simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2377, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.switchedPosList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-463, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-463, false, false, -463, -463, false, -2377, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(((Point) (null)), simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2377, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, 2);
boolean _boolean = false;
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, (-463), (-463), false, (-2377), (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "kL [5";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "";
String string = "db:n-kJa\"PW";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) simpleArea, "db:n-kJa\"PW");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-442), 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((Point) null, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2377), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "", arg4, arg5, "db:n-kJa\"PW")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-442, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-442, false, false, -442, -442, false, -2377, characterClass);
        SimpleArea simpleArea = new SimpleArea(new Point(-100, 50), simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2377, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-442, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-442, false, false, -442, -442, false, -2377, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(new Point(-100, 50), simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2377, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, 2);
boolean _boolean = false;
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, (-442), (-442), false, (-2377), (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "kL [5";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "";
String string = "db:n-kJa\"PW";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) simpleArea, "db:n-kJa\"PW");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049)
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<de.outstare.fortbattleplayer.model.CombatantSide, java.util.concurrent.atomic.AtomicInteger>
statement code is: HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>()
statement is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.addAndResetRoundCounter(arg0, (Map<CombatantSide, RoundStatistics>) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
battleStatistics.addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
        HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
        battleStatistics.addAndResetRoundCounter(hashMap, ((Map<CombatantSide, RoundStatistics>) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.addAndResetRoundCounter(hashMap, ((Map<CombatantSide, RoundStatistics>) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.addAndResetRoundCounter(hashMap, ((Map<CombatantSide, RoundStatistics>) (null))) target is: battleStatistics method is: addAndResetRoundCounter(HashMap,Map)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 16716049;
int _int = 16716049;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
Map<CombatantSide, RoundStatistics> map = null;
((BattleStatistics) _int).addAndResetRoundCounter(hashMap, map);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1))
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved((Combatant) null, (Area) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.hasMoved((Combatant) null, (Area) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
        battleStatistics.hasMoved(new Combatant("Infantry", 50, "Shield"), new Area(30, 40));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(new Combatant("Infantry", 50, "Shield"), new Area(30, 40)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(new Combatant("Infantry", 50, "Shield"), new Area(30, 40)) target is: battleStatistics method is: hasMoved(Combatant,Area)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
Area area = null;
((BattleStatistics) _int).hasMoved(combatant, area);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2638, 0)
statement is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isAlive((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2638, 100);
        battleStatistics.isAlive(((Combatant) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2638, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive(((Combatant) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive(((Combatant) (null))) target is: battleStatistics method is: isAlive(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2638;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isAlive(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3, 3)
statement is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isDead((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3, 3);
        battleStatistics.isDead(((Combatant) ("Player1")));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isDead(((Combatant) ("Player1"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isDead(((Combatant) ("Player1"))) target is: battleStatistics method is: isDead(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 3;
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
String string = "Player1";
((BattleStatistics) _int).isDead((Combatant) string);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(16716049, 474, arg2)
statement is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.newDestination((Combatant) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(16716049, 474, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0xabcdef12, false, true, 0xcafebabe, 0xdeadbeef, false, 0xfacefeed, characterClass);
        SimpleArea simpleArea = new SimpleArea(0xabcdef12, 0x0, simpleSector);
        battleStatistics.newDestination(((Combatant) (null)), simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0xabcdef12, false, true, 0xcafebabe, 0xdeadbeef, false, 0xfacefeed, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0xabcdef12, 0x0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.newDestination(((Combatant) (null)), simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.newDestination(((Combatant) (null)), simpleArea) target is: battleStatistics method is: newDestination(Combatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 123456789;
int _int = 987654321;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = (-1412567278);
boolean _boolean = false;
boolean _boolean = true;
int _int = (-889275714);
int _int = (-559038737);
boolean _boolean = false;
int _int = (-87097619);
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = (-1412567278);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

* test suite isTestSuite: 126
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-221), "", characterClass, simpleWeapon, "5s2a.rGw_;c='");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-221));
battleStatistics.critList(combatantSide);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1079), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, (-2873), 1670);
Test 3: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
battleStatistics.numberOfSchmierOil((CombatantSide) null);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.getHitsPerRound();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.getShotsPerRound();
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(84, 84);
battleStatistics.setRound(84);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, characterClass);
SimpleArea simpleArea = new SimpleArea(84, 84, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 84, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 84, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(84);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "2/CdKT3Y=kFmw>;D*o", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "z&vali par meteer}: ", characterClass, simpleWeapon, "z&vali par meteer}: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&val p(arameteers: ", characterClass, simpleWeapon, "i&val p(arameteers: ");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfSchmierOil((CombatantSide) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", e);
}

Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&valieparameteers: ", characterClass, simpleWeapon, "i&valieparameteers: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.setRound(58);
simpleCombatant.addObserver(battleStatistics);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (-710), false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(478, (-1556), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "^A6%!ct(");
battleStatistics.isOnline(simpleCombatant, true);
// Undeclared exception!
try { 
  battleStatistics.numberOfShinyOil(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$ShinyOilCounter", e);
}

Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.switchedPosList((CombatantSide) null);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
battleStatistics.setRound(121);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 121, ",Req[d<uOevp3HbT[a", characterClass, simpleWeapon, ",Req[d<uOevp3HbT[a");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
battleStatistics.getNotShootersPerRound();
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "invalid parameters: ", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-18), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "invalid parameters: ", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 44: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1586), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-386), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea((-512), 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-412), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(52, 52);
battleStatistics.combatantLifetime((Combatant) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.countWeaponMods(combatantSide, (WeaponModCounter) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3801), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3801), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.getFieldStatistics();
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "invalid parameters: ", characterClass, simpleWeapon, "invalid parameters: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
battleStatistics.round((-2985));
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.round(84.2853148);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
battleStatistics.addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(16716049, 474, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 63: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 23);
((BattleStatistics)100).numberOfBayonets((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

Test 64: 
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(200, 50);
Point point = new Point(0, 1);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 200;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2759;
String string = "M16A2";
int _int = 31;
int _int = 1552;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 200;
String string = "John Doe";
String string = "5s2a.rGw_;c='";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "5s2a.rGw_;c='");
int _int = 200;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 65: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
boolean _boolean = false;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 1670, (int) false, 1670, false, (-3801), (CharacterClass) false);
int _int = 1474;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _boolean);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "L12o{a)[A%r(}s6@";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, "L12o{a)[A%r(}s6@", (CharacterClass) _boolean, (Weapon) null, "");
int _int = 1670;
int _int = null;
battleStatistics.isHit(simpleCombatant, _int, _int);

Test 66: 
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(0, 691);
((BattleStatistics)691).amountOfAttackBonus((CombatantSide) null);
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);

Test 68: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).totalSwaps((CombatantSide) null);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
((BattleStatistics)1000).getFieldStatistics();

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(200, 1000);
((BattleStatistics)200).numberOfFettesOil((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).numberOfSchmierOil((CombatantSide) null);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(4, 5);
((BattleStatistics)4).numberOfHipFlasks((CombatantSide) null);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).getHitsPerRound();

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(50, 60);
((BattleStatistics)50).criticalHits((CombatantSide) null);

Test 75: 
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M4A1", 50, 100);
SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 200;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Tank T1";
String string = "Tank T1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 76: 
int _int = 29;
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
((BattleStatistics)29).amountOfDefenseBonus((CombatantSide) null);
int _int = 40;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).getShotsPerRound();

Test 78: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).setRound(25);
int _int = 25;
((BattleStatistics) _int).setRound(_int);
int _int = 25;
((BattleStatistics) _int).setRound(_int);

Test 79: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
((BattleStatistics)10).setRound(10);
int _int = 10;
boolean _boolean = false;
boolean _boolean = false;
int _int = 10;
int _int = 10;
boolean _boolean = false;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Laser Gun";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Laser Gun";
String string = "Laser Gun";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",9AVrG8*!(##?Hwwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 10;
((BattleStatistics) _int).setRound(_int);

Test 80: 
int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A well-oiled machine gun", 23, 23);
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (int) true, (boolean) 1, 1, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 534;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 1;
String string = "A well-oiled machine gun";
String string = "2/CdKT3Y=kFmw>;D*o";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "2/CdKT3Y=kFmw>;D*o");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 81: 
int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "AK-47", 100, 250);
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "John Doe";
String string = "MP5";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 82: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).numberOfMovesPerPlayer((CombatantSide) null);

Test 83: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).numberOfMovesPerPlayer((CombatantSide) null);

Test 84: 
int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "Marauder's Axe", 5, 20);
SimpleSector simpleSector = new SimpleSector(1, true, false, 1, 20, true, 1, (CharacterClass) battleStatistics);
int _int = 3;
int _int = 5;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "Goliath";
String string = "Goliath";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "z&vali par meteer}: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 85: 
int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A mighty sword", 23, 23);
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 23;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 23;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "Greg";
String string = "Greg's sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&val p(arameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

Test 86: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Sword of Light", 2, 100);
SimpleSector simpleSector = new SimpleSector(50, true, true, 2, 2, true, 2, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 200;
String string = "Gladiator";
String string = "Shield of Protection";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&valieparameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 87: 
int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(10, "i&vali parameteers: ", 5, 23);
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 23;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "i&vali parameteers: ";
String string = "i&vali parameteers: ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 88: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "i&vali parameteers: ";
String string = "i&vali parameteers: ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 89: 
int _int = 121;
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
int _int = 121;
int _int = 121;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, (CharacterClass) battleStatistics);
int _int = 121;
int _int = 121;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 121;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 121;
String string = "Laser Cannon";
int _int = 121;
int _int = 121;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 121;
String string = "Archer";
String string = "Archer";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrGP*jI(A#?`MHVwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 90: 
int _int = 395;
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
int _int = 395;
int _int = 395;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, (CharacterClass) battleStatistics);
int _int = 395;
int _int = 395;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 395;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 395;
String string = "Diamond Sword";
int _int = 395;
int _int = 395;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 395;
String string = "Black Dragon";
String string = "Dragon's Breath";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrGP*jI(A#?`MHVwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 91: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, (CharacterClass) 1);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "kL [5";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 92: 
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
((BattleStatistics)10).setRound(10);
int _int = 10;
boolean _boolean = true;
boolean _boolean = true;
int _int = 10;
int _int = 10;
boolean _boolean = true;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);

Test 93: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "Fireball", 50, 2);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 2;
boolean _boolean = true;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "Mage";
String string = "Wizard";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 94: 
int _int = 58;
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
int _int = 58;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, (CharacterClass) battleStatistics);
int _int = 58;
int _int = 58;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 58;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 58;
String string = "Energy Blaster";
int _int = 58;
int _int = 58;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 58;
String string = "Energy Blaster";
String string = "Energy Blaster";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrG8*!(##?Hwwu");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
int _int = 58;
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrG8*!(##?Hwwu");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 95: 
int _int = 10;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(10, 25);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(10, false, false, 25, 2012, false, 1, (CharacterClass) 10);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 8;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Warrior";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

Test 96: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
String string = "invalid parameters: ";
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (int) false, (boolean) 1, 1, (CharacterClass) 1);
int _int = 478;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) string);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "";
String string = "^A6%!ct(";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^A6%!ct(");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

Test 97: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).switchedPosList((CombatantSide) null);

Test 98: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).critList((CombatantSide) null);

Test 99: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);

Test 100: 
BattleStatistics battleStatistics = new BattleStatistics(50, 10);
((BattleStatistics)50).criticalHitDamage((CombatantSide) null);

Test 101: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
int _int = 100;
((BattleStatistics)100).setRound(100);
int _int = 100;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 100;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 100;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Awesome Sword";
int _int = 50;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Awesome Sword";
String string = "Awesome Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",9AVrG8*!(##?Hwwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 102: 
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(50, 100);
int _int = 50;
((BattleStatistics)50).setRound(50);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 120;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 121;
String string = "dagger";
int _int = 50;
int _int = 120;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "adventurer";
String string = "dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",Req[d<uOevp3HbT[a");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 103: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).setRound(200);
((BattleStatistics) _int).getNotShootersPerRound();

Test 104: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 105: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "M4A1", (int) 10.5, 230);
int _int = 478;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 2012;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 106: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Invalid Parameters:", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, (CharacterClass) battleStatistics);
int _int = 2012;
int _int = 2012;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 2012;
String string = "Invalid Parameters:";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 107: 
int _int = 1;
SimpleArea simpleArea = new SimpleArea(1, 1425, (Sector) 1425);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "The Deadly Assassin's Kris";
int _int = 164;
int _int = 691;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 691);
String string = "Ethan the Blacksmith";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, "");
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, 691);
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 108: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, (CharacterClass) 1);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "King Leonidas";
String string = "Hector's Shield";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 109: 
int _int = 29;
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
int _int = 2;
int _int = 2;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(2, false, true, 2, (int) false, false, (-412), (CharacterClass) battleStatistics);
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _int);
int _int = 75;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Laser Rifle";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
String string = "Captain America";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 110: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, (CharacterClass) 1);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "kL [5";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 111: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
((BattleStatistics)1000).combatantLifetime((Combatant) null);

Test 112: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 113: 
int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
SimpleSector simpleSector = new SimpleSector(1000, false, true, 2000, 1670, false, 2000, (CharacterClass) 2000);
int _int = 1000;
int _int = 1474;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3000;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4000;
String string = "L12o{a)[A%r(}s6@";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
((BattleStatistics) _int).getFieldStatistics();

Test 114: 
int _int = 100;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Katana", 2, 4);
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Greenhorn";
String string = "Katana";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "invalid parameters: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 115: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "A sword with 15 points of damage", 2, 2);
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "A brave knight";
String string = "A shield to protect themself";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 116: 
BattleStatistics battleStatistics = new BattleStatistics(383, 383);
((BattleStatistics)383).round((double) (Double) null);

Test 117: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(90.0);

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);

Test 119: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, false, false, (-463), (-463), false, (-2377), (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "kL [5";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "";
String string = "db:n-kJa\"PW";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) simpleArea, "db:n-kJa\"PW");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 120: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, false, false, (-442), (-442), false, (-2377), (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "kL [5";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "";
String string = "db:n-kJa\"PW";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) simpleArea, "db:n-kJa\"PW");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 121: 
BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
((BattleStatistics)16716049).addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
((BattleStatistics)1000).hasMoved((Combatant) null, (Area) null);

Test 123: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 100);
((BattleStatistics)2638).isAlive((Combatant) null);

Test 124: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
((BattleStatistics)3).isDead((Combatant) "Player1");

Test 125: 
int _int = 123456789;
BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321);
SimpleSector simpleSector = new SimpleSector((-1412567278), false, true, (-889275714), (-559038737), false, (-87097619), (CharacterClass) 987654321);
int _int = (-1412567278);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);


* Generated after the refinement and before minimization 126 tests with total length 1153
* test suite isTestSuite: 126
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-221), "", characterClass, simpleWeapon, "5s2a.rGw_;c='");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-221));
battleStatistics.critList(combatantSide);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1079), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, (-2873), 1670);
Test 3: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
battleStatistics.numberOfSchmierOil((CombatantSide) null);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.getHitsPerRound();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.getShotsPerRound();
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(84, 84);
battleStatistics.setRound(84);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, characterClass);
SimpleArea simpleArea = new SimpleArea(84, 84, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 84, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 84, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(84);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "2/CdKT3Y=kFmw>;D*o", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "z&vali par meteer}: ", characterClass, simpleWeapon, "z&vali par meteer}: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&val p(arameteers: ", characterClass, simpleWeapon, "i&val p(arameteers: ");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfSchmierOil((CombatantSide) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", e);
}

Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&valieparameteers: ", characterClass, simpleWeapon, "i&valieparameteers: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.setRound(58);
simpleCombatant.addObserver(battleStatistics);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (-710), false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(478, (-1556), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "^A6%!ct(");
battleStatistics.isOnline(simpleCombatant, true);
// Undeclared exception!
try { 
  battleStatistics.numberOfShinyOil(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$ShinyOilCounter", e);
}

Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.switchedPosList((CombatantSide) null);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
battleStatistics.setRound(121);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 121, ",Req[d<uOevp3HbT[a", characterClass, simpleWeapon, ",Req[d<uOevp3HbT[a");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
battleStatistics.getNotShootersPerRound();
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "invalid parameters: ", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-18), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "invalid parameters: ", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 44: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1586), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-386), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea((-512), 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-412), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(52, 52);
battleStatistics.combatantLifetime((Combatant) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.countWeaponMods(combatantSide, (WeaponModCounter) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3801), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3801), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.getFieldStatistics();
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "invalid parameters: ", characterClass, simpleWeapon, "invalid parameters: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
battleStatistics.round((-2985));
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.round(84.2853148);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
battleStatistics.addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(16716049, 474, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 63: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 23);
((BattleStatistics)100).numberOfBayonets((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

Test 64: 
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(200, 50);
Point point = new Point(0, 1);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 200;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2759;
String string = "M16A2";
int _int = 31;
int _int = 1552;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 200;
String string = "John Doe";
String string = "5s2a.rGw_;c='";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "5s2a.rGw_;c='");
int _int = 200;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 65: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
boolean _boolean = false;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 1670, (int) false, 1670, false, (-3801), (CharacterClass) false);
int _int = 1474;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _boolean);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "L12o{a)[A%r(}s6@";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, "L12o{a)[A%r(}s6@", (CharacterClass) _boolean, (Weapon) null, "");
int _int = 1670;
int _int = null;
battleStatistics.isHit(simpleCombatant, _int, _int);

Test 66: 
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(0, 691);
((BattleStatistics)691).amountOfAttackBonus((CombatantSide) null);
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);

Test 68: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).totalSwaps((CombatantSide) null);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
((BattleStatistics)1000).getFieldStatistics();

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(200, 1000);
((BattleStatistics)200).numberOfFettesOil((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).numberOfSchmierOil((CombatantSide) null);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(4, 5);
((BattleStatistics)4).numberOfHipFlasks((CombatantSide) null);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).getHitsPerRound();

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(50, 60);
((BattleStatistics)50).criticalHits((CombatantSide) null);

Test 75: 
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M4A1", 50, 100);
SimpleSector simpleSector = new SimpleSector(50, true, true, 50, 100, true, 50, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 200;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Tank T1";
String string = "Tank T1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 76: 
int _int = 29;
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
((BattleStatistics)29).amountOfDefenseBonus((CombatantSide) null);
int _int = 40;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).getShotsPerRound();

Test 78: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).setRound(25);
int _int = 25;
((BattleStatistics) _int).setRound(_int);
int _int = 25;
((BattleStatistics) _int).setRound(_int);

Test 79: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
((BattleStatistics)10).setRound(10);
int _int = 10;
boolean _boolean = false;
boolean _boolean = false;
int _int = 10;
int _int = 10;
boolean _boolean = false;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Laser Gun";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Laser Gun";
String string = "Laser Gun";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",9AVrG8*!(##?Hwwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 10;
((BattleStatistics) _int).setRound(_int);

Test 80: 
int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A well-oiled machine gun", 23, 23);
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (int) true, (boolean) 1, 1, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 534;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 1;
String string = "A well-oiled machine gun";
String string = "2/CdKT3Y=kFmw>;D*o";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "2/CdKT3Y=kFmw>;D*o");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 81: 
int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "AK-47", 100, 250);
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "John Doe";
String string = "MP5";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 82: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).numberOfMovesPerPlayer((CombatantSide) null);

Test 83: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).numberOfMovesPerPlayer((CombatantSide) null);

Test 84: 
int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
SimpleWeapon simpleWeapon = new SimpleWeapon(5, "Marauder's Axe", 5, 20);
SimpleSector simpleSector = new SimpleSector(1, true, false, 1, 20, true, 1, (CharacterClass) battleStatistics);
int _int = 3;
int _int = 5;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "Goliath";
String string = "Goliath";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "z&vali par meteer}: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 85: 
int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "A mighty sword", 23, 23);
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 23;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 23;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "Greg";
String string = "Greg's sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&val p(arameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

Test 86: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Sword of Light", 2, 100);
SimpleSector simpleSector = new SimpleSector(50, true, true, 2, 2, true, 2, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 200;
String string = "Gladiator";
String string = "Shield of Protection";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&valieparameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 87: 
int _int = 23;
int _int = 23;
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(10, "i&vali parameteers: ", 5, 23);
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, (CharacterClass) battleStatistics);
int _int = 23;
int _int = 23;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 23;
String string = "i&vali parameteers: ";
String string = "i&vali parameteers: ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 88: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "i&vali parameteers: ";
String string = "i&vali parameteers: ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 89: 
int _int = 121;
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
int _int = 121;
int _int = 121;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, (CharacterClass) battleStatistics);
int _int = 121;
int _int = 121;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 121;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 121;
String string = "Laser Cannon";
int _int = 121;
int _int = 121;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 121;
String string = "Archer";
String string = "Archer";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrGP*jI(A#?`MHVwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 90: 
int _int = 395;
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
int _int = 395;
int _int = 395;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, (CharacterClass) battleStatistics);
int _int = 395;
int _int = 395;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 395;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 395;
String string = "Diamond Sword";
int _int = 395;
int _int = 395;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 395;
String string = "Black Dragon";
String string = "Dragon's Breath";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrGP*jI(A#?`MHVwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 91: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, (CharacterClass) 1);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "kL [5";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 92: 
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
((BattleStatistics)10).setRound(10);
int _int = 10;
boolean _boolean = true;
boolean _boolean = true;
int _int = 10;
int _int = 10;
boolean _boolean = true;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);

Test 93: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "Fireball", 50, 2);
int _int = 2;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2;
int _int = 2;
boolean _boolean = true;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "Mage";
String string = "Wizard";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 94: 
int _int = 58;
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
int _int = 58;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, (CharacterClass) battleStatistics);
int _int = 58;
int _int = 58;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 58;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 58;
String string = "Energy Blaster";
int _int = 58;
int _int = 58;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 58;
String string = "Energy Blaster";
String string = "Energy Blaster";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrG8*!(##?Hwwu");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
int _int = 58;
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",9AVrG8*!(##?Hwwu");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 95: 
int _int = 10;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(10, 25);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(10, false, false, 25, 2012, false, 1, (CharacterClass) 10);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 8;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Warrior";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

Test 96: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
String string = "invalid parameters: ";
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (int) false, (boolean) 1, 1, (CharacterClass) 1);
int _int = 478;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) string);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "";
String string = "^A6%!ct(";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^A6%!ct(");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

Test 97: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).switchedPosList((CombatantSide) null);

Test 98: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).critList((CombatantSide) null);

Test 99: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);

Test 100: 
BattleStatistics battleStatistics = new BattleStatistics(50, 10);
((BattleStatistics)50).criticalHitDamage((CombatantSide) null);

Test 101: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
int _int = 100;
((BattleStatistics)100).setRound(100);
int _int = 100;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 100;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 100;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Awesome Sword";
int _int = 50;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Awesome Sword";
String string = "Awesome Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",9AVrG8*!(##?Hwwu");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 102: 
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(50, 100);
int _int = 50;
((BattleStatistics)50).setRound(50);
int _int = 50;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 120;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 100;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 121;
String string = "dagger";
int _int = 50;
int _int = 120;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "adventurer";
String string = "dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, ",Req[d<uOevp3HbT[a");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 103: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).setRound(200);
((BattleStatistics) _int).getNotShootersPerRound();

Test 104: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 105: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "M4A1", (int) 10.5, 230);
int _int = 478;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 2012;
boolean _boolean = false;
int _int = 1;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "John Doe";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 106: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Invalid Parameters:", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, (CharacterClass) battleStatistics);
int _int = 2012;
int _int = 2012;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 2012;
String string = "Invalid Parameters:";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 107: 
int _int = 1;
SimpleArea simpleArea = new SimpleArea(1, 1425, (Sector) 1425);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "The Deadly Assassin's Kris";
int _int = 164;
int _int = 691;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 691);
String string = "Ethan the Blacksmith";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) combatantState, "");
int _int = 691;
BattleStatistics battleStatistics = new BattleStatistics(_int, 691);
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 108: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, (CharacterClass) 1);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "King Leonidas";
String string = "Hector's Shield";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 109: 
int _int = 29;
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
int _int = 2;
int _int = 2;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(2, false, true, 2, (int) false, false, (-412), (CharacterClass) battleStatistics);
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) _int);
int _int = 75;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Laser Rifle";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 0);
String string = "Captain America";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) battleStatistics, (Weapon) _int, "");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 110: 
int _int = 478;
int _int = 478;
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, (CharacterClass) 1);
int _int = 0;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "kL [5";
String string = "Hc&U-K@k";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "Hc&U-K@k");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 111: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
((BattleStatistics)1000).combatantLifetime((Combatant) null);

Test 112: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 113: 
int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
SimpleSector simpleSector = new SimpleSector(1000, false, true, 2000, 1670, false, 2000, (CharacterClass) 2000);
int _int = 1000;
int _int = 1474;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3000;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 4000;
String string = "L12o{a)[A%r(}s6@";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
((BattleStatistics) _int).getFieldStatistics();

Test 114: 
int _int = 100;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Katana", 2, 4);
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, (CharacterClass) battleStatistics);
int _int = 50;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Greenhorn";
String string = "Katana";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "invalid parameters: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 115: 
int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "A sword with 15 points of damage", 2, 2);
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "A brave knight";
String string = "A shield to protect themself";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "i&vali parameteers: ");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 116: 
BattleStatistics battleStatistics = new BattleStatistics(383, 383);
((BattleStatistics)383).round((double) (Double) null);

Test 117: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(90.0);

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);

Test 119: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, false, false, (-463), (-463), false, (-2377), (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "kL [5";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "";
String string = "db:n-kJa\"PW";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) simpleArea, "db:n-kJa\"PW");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 120: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, false, false, (-442), (-442), false, (-2377), (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "kL [5";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "";
String string = "db:n-kJa\"PW";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) simpleArea, "db:n-kJa\"PW");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 121: 
BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
((BattleStatistics)16716049).addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
((BattleStatistics)1000).hasMoved((Combatant) null, (Area) null);

Test 123: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 100);
((BattleStatistics)2638).isAlive((Combatant) null);

Test 124: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
((BattleStatistics)3).isDead((Combatant) "Player1");

Test 125: 
int _int = 123456789;
BattleStatistics battleStatistics = new BattleStatistics(123456789, 987654321);
SimpleSector simpleSector = new SimpleSector((-1412567278), false, true, (-889275714), (-559038737), false, (-87097619), (CharacterClass) 987654321);
int _int = (-1412567278);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);


* Minimizing test suite
* test suite isTestSuite: 62
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(16716049, 474, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-221), "", characterClass, simpleWeapon, "5s2a.rGw_;c='");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-221));
battleStatistics.critList(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1079), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, (-2873), 1670);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);
Test 6: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3801), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3801), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
battleStatistics.getFieldStatistics();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
battleStatistics.numberOfSchmierOil((CombatantSide) null);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 16: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.getHitsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.getShotsPerRound();
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(84, 84);
battleStatistics.setRound(84);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, characterClass);
SimpleArea simpleArea = new SimpleArea(84, 84, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 84, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 84, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(84);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "2/CdKT3Y=kFmw>;D*o", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(52, 52);
battleStatistics.combatantLifetime((Combatant) null);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "invalid parameters: ", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "z&vali par meteer}: ", characterClass, simpleWeapon, "z&vali par meteer}: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&val p(arameteers: ", characterClass, simpleWeapon, "i&val p(arameteers: ");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfSchmierOil((CombatantSide) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", e);
}

Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&valieparameteers: ", characterClass, simpleWeapon, "i&valieparameteers: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-18), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "invalid parameters: ", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.setRound(58);
simpleCombatant.addObserver(battleStatistics);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.switchedPosList((CombatantSide) null);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
battleStatistics.setRound(121);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 121, ",Req[d<uOevp3HbT[a", characterClass, simpleWeapon, ",Req[d<uOevp3HbT[a");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
battleStatistics.getNotShootersPerRound();
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 51: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1586), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-386), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea((-512), 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-412), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.countWeaponMods(combatantSide, (WeaponModCounter) null);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "invalid parameters: ", characterClass, simpleWeapon, "invalid parameters: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
battleStatistics.round((-2985));
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.round(84.2853148);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 61: 
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
// Undeclared exception!
try { 
  ((BattleStatistics)16716049).addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 156
* Number of covered goals: 133
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 228
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 105
* Number of covered goals: 57
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 156
* Number of covered goals: 133
* Generated 62 tests with total length 402
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 59%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfBayonets = battleStatistics.numberOfBayonets(arg0);
assertEquals(0, numberOfBayonets);


** It was a parseable test case! 
refined test name is: testNumberOfBayonetsForAttackerSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg2 = new SimpleSector(16716049, false, true, 1509, 612, false, 0, arg7);
SimpleArea arg1 = new SimpleArea(16716049, 474, arg2);
battleStatistics.newDestination((Combatant) null, arg1);
assertFalse(arg1.isOccupied());


** It was a parseable test case! 
refined test name is: testNewDestinationWithNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0);
assertEquals(0, numberOfLoadingChamerOrEnhancedPatrons);


** It was a parseable test case! 
refined test name is: testGetNumberOfLoadingChamersOrEnhancedPatron
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsDeadWithNullCombatant
* Compiling Tests
refined test name is: testIsDeadWithNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0);
assertEquals(0, amountOfAttackBonus);


** It was a parseable test case! 
refined test name is: testAmountOfAttackBonusForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants((CombatantSide) null);
assertEquals(0, numberOfGraphitLubricants);


** It was a parseable test case! 
refined test name is: testNumberOfGraphitLubricantsWithNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide arg0 = CombatantSide.ATTACKER;
int totalSwaps = battleStatistics.totalSwaps(arg0);
assertEquals(0, totalSwaps);


** It was a parseable test case! 
refined test name is: testTotalSwapsWithAttackerSideReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics();
assertTrue(fieldStatistics.isEmpty());


** It was a parseable test case! 
refined test name is: testRetrievalOfEmptyFieldStatisticsMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0);
assertEquals(0, numberOfFettesOil);


** It was a parseable test case! 
refined test name is: testNumberOfFettesOilForDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(23, 23);
int numberOfSchmierOil = battleStatistics.numberOfSchmierOil((CombatantSide) null);
assertEquals(0, numberOfSchmierOil);


** It was a parseable test case! 
refined test name is: testNumberOfSchmierOilWithNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0);
assertEquals(0, numberOfHipFlasks);


** It was a parseable test case! 
refined test name is: testNumberOfHipFlasksWithDefenderSideReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsAliveWithNullCombatant
* Compiling Tests
refined test name is: testIsAliveWithNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}


** It was a parseable test case! 
refined test name is: testHasMovedWithNullInputs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound();
assertFalse(hitsPerRound.isEmpty());


** It was a parseable test case! 
refined test name is: testGetHitsPerRoundNotEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide arg0 = CombatantSide.DEFENDER;
int criticalHits = battleStatistics.criticalHits(arg0);
assertEquals(0, criticalHits);


** It was a parseable test case! 
refined test name is: testCriticalHitsWithNegativeDamage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
int round = battleStatistics.round(0);
assertEquals(0, round);


** It was a parseable test case! 
refined test name is: testRoundMethodWithNegativeDamageDone
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide arg0 = CombatantSide.DEFENDER;
int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0);
assertEquals(0, amountOfDefenseBonus);


** It was a parseable test case! 
refined test name is: testAmountOfDefenseBonusForDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound();
assertFalse(shotsPerRound.isEmpty());


** It was a parseable test case! 
refined test name is: testGetShotsPerRoundShouldNotBeEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));

** It was a parseable test case! 
refined test name is: testGetSetRound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(52, 52);
int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null);
assertEquals(0, combatantLifetime);


** It was a parseable test case! 
refined test name is: testCombatantLifetimeWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide arg0 = CombatantSide.ATTACKER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerWhenNoCombatants
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide arg0 = CombatantSide.DEFENDER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerForDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null);
assertEquals(0, switchedPosList.size());


** It was a parseable test case! 
refined test name is: testSwitchedPosListWithNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide arg0 = CombatantSide.ATTACKER;
long criticalHitDamage = battleStatistics.criticalHitDamage(arg0);
assertEquals(0L, criticalHitDamage);


** It was a parseable test case! 
refined test name is: testCriticalHitDamageForAttackerSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null);
assertTrue(critList.isEmpty());


** It was a parseable test case! 
refined test name is: testCritListWithNegativeCombatants
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound();
assertEquals(2, notShootersPerRound.size());


** It was a parseable test case! 
refined test name is: testGetNotShootersPerRound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide arg0 = CombatantSide.DEFENDER;
List<CriticalHit> critList = battleStatistics.critList(arg0);
assertTrue(critList.isEmpty());


** It was a parseable test case! 
refined test name is: testCritListWithDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide arg0 = CombatantSide.ATTACKER;
int countWeaponMods = battleStatistics.countWeaponMods(arg0, (WeaponModCounter) null);
assertEquals(0, countWeaponMods);


** It was a parseable test case! 
refined test name is: testCountWeaponModsNullFilter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
int round = battleStatistics.round((-2985));
assertEquals((-2985), round);


** It was a parseable test case! 
refined test name is: testCalculateRoundNumber
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
int round = battleStatistics.round(84.2853148);
assertEquals(84, round);


** It was a parseable test case! 
refined test name is: testRoundNearestIntegerToDoubleValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:28.348 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:28.456 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.457 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:30:28.531 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:28.602 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.603 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:28.670 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.671 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:28.741 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.742 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:28.802 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:30:28.804 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
* Compiling Tests
[MASTER] 12:30:28.863 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.864 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:28.925 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.926 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:30:28.979 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:28.980 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
* Compiling Tests
[MASTER] 12:30:29.308 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.309 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:29.346 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.382 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.383 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.415 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.416 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.485 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.486 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.517 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.518 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.548 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.549 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.589 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.591 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.624 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.662 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.707 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.763 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.764 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.797 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.833 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.833 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.869 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.906 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.906 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.942 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:29.975 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:29.975 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:30.009 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:30:30.010 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:30:30.283 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:30.284 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
* Compiling Tests
** Write a test suite: 18 called: 0 to improve: false
** Write a test suite: 26 called: 1 to improve: false
[MASTER] 12:30:30.655 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:30.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
[MASTER] 12:30:31.461 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 63
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-221), "", characterClass, simpleWeapon, "5s2a.rGw_;c='");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-221));
battleStatistics.critList(combatantSide);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1079), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, (-2873), 1670);
Test 3: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
battleStatistics.numberOfSchmierOil((CombatantSide) null);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.getHitsPerRound();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.getShotsPerRound();
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(84, 84);
battleStatistics.setRound(84);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, characterClass);
SimpleArea simpleArea = new SimpleArea(84, 84, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 84, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 84, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(84);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "2/CdKT3Y=kFmw>;D*o", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "z&vali par meteer}: ", characterClass, simpleWeapon, "z&vali par meteer}: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&val p(arameteers: ", characterClass, simpleWeapon, "i&val p(arameteers: ");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfSchmierOil((CombatantSide) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", e);
}

Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&valieparameteers: ", characterClass, simpleWeapon, "i&valieparameteers: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.setRound(58);
simpleCombatant.addObserver(battleStatistics);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 478, (-710), false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(478, (-1556), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "^A6%!ct(");
battleStatistics.isOnline(simpleCombatant, true);
// Undeclared exception!
try { 
  battleStatistics.numberOfShinyOil(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$ShinyOilCounter", e);
}

Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.switchedPosList((CombatantSide) null);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
battleStatistics.setRound(121);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 121, ",Req[d<uOevp3HbT[a", characterClass, simpleWeapon, ",Req[d<uOevp3HbT[a");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
battleStatistics.getNotShootersPerRound();
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "invalid parameters: ", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-18), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "invalid parameters: ", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 44: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1586), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-386), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea((-512), 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-412), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(52, 52);
battleStatistics.combatantLifetime((Combatant) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.countWeaponMods(combatantSide, (WeaponModCounter) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3801), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3801), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.getFieldStatistics();
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "invalid parameters: ", characterClass, simpleWeapon, "invalid parameters: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
battleStatistics.round((-2985));
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.round(84.2853148);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
battleStatistics.addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(16716049, 474, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);

* Minimizing test suite
[MASTER] 12:30:49.091 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 62
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(16716049, false, true, 1509, 612, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(16716049, 474, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(0, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1637, true, true, 1, (-597), true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2759, "", 31, 1552);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-221), "", characterClass, simpleWeapon, "5s2a.rGw_;c='");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, (-221));
battleStatistics.critList(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1079), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, (-2873), 1670);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
battleStatistics.isDead((Combatant) null);
Test 6: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-3801), false, true, (-3801), 1670, false, (-3801), characterClass);
SimpleArea simpleArea = new SimpleArea((-3801), 1474, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3801), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-3801), "L12o{a)[A%r(}s6@", characterClass, (Weapon) null, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics((-3801), (-3801));
battleStatistics.getFieldStatistics();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
battleStatistics.numberOfSchmierOil((CombatantSide) null);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(2638, 0);
battleStatistics.isAlive((Combatant) null);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 16: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.getHitsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-221), (-221));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHits(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
battleStatistics.round(84.2853148);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.getShotsPerRound();
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics((-2911), (-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
battleStatistics.setRound((-2911));
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(84, 84);
battleStatistics.setRound(84);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(84, false, false, 84, 84, false, 84, characterClass);
SimpleArea simpleArea = new SimpleArea(84, 84, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 84, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(84, ",9AVrG8*!(##?Hwwu", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 84, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(84);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "no data for players and shots for side ", 23, 23);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(1118719, true, true, 534, (-2), true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 534, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "2/CdKT3Y=kFmw>;D*o", characterClass, simpleWeapon, "2/CdKT3Y=kFmw>;D*o");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(52, 52);
battleStatistics.combatantLifetime((Combatant) null);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "i&vali parameteers: ", 1, 1);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(1, true, true, 1, 1, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "invalid parameters: ", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "z&vali par meteer}: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "z&vali par meteer}: ", characterClass, simpleWeapon, "z&vali par meteer}: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&val p(arameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, false, false, 23, 23, false, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&val p(arameteers: ", characterClass, simpleWeapon, "i&val p(arameteers: ");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfSchmierOil((CombatantSide) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", e);
}

Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(23, 23);
SimpleWeapon simpleWeapon = new SimpleWeapon(23, "i&vali parameteers: ", 23, 23);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(23, true, true, 23, 23, true, 23, characterClass);
SimpleArea simpleArea = new SimpleArea(23, 23, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 23, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 23, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&valieparameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&valieparameteers: ", characterClass, simpleWeapon, "i&valieparameteers: ");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1219, 2012, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(2012, 2012, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-18), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2012, "invalid parameters: ", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",9AVrGP*jI(A#?`MHVwu", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 121, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(395, 395);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(395, false, false, 395, 395, false, 395, characterClass);
SimpleArea simpleArea = new SimpleArea(395, 395, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 395, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(395, ",9AVrGP*jI(A#?`MHVwu", 395, 395);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 395, ",9AVrGP*jI(A#?`MHVwu", characterClass, simpleWeapon, ",9AVrGP*jI(A#?`MHVwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.isOnline(simpleCombatant, false);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.setRound(58);
simpleCombatant.addObserver(battleStatistics);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.targetNoOne(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, "", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics((-442), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-442), false, false, (-442), (-442), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.switchedPosList((CombatantSide) null);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 10);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHitDamage(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics((-2040), (-2040));
battleStatistics.critList((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(121, 121);
battleStatistics.setRound(121);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(121, true, true, 121, 121, true, 121, characterClass);
SimpleArea simpleArea = new SimpleArea(121, 121, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 121, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(121, ",Req[d<uOevp3HbT[a", 121, 121);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 121, ",Req[d<uOevp3HbT[a", characterClass, simpleWeapon, ",Req[d<uOevp3HbT[a");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(58, 58);
battleStatistics.setRound(58);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(58, true, true, 58, 58, true, 58, characterClass);
SimpleArea simpleArea = new SimpleArea(58, 58, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 58, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(58, ",9AVrG8*!(##?Hwwu", 58, 58);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 58, ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, ",9AVrG8*!(##?Hwwu");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
battleStatistics.setRound(478);
battleStatistics.getNotShootersPerRound();
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 51: 
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1363, true, true, 0, 0, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1425, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1586), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "1!BF{.&$HoT3:@,Ynch", 164, 691);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-386), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
BattleStatistics battleStatistics = new BattleStatistics((-386), 691);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, true, true, 1, 2012, true, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(29, 29);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, true, (-412), 2, false, (-412), characterClass);
SimpleArea simpleArea = new SimpleArea((-512), 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 75, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-512), "1!BF{.&$HoT3:@,Ynch", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-412), ",9AVrG8*!(##?Hwwu", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "invalid parameters: ", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(478, false, false, 1, 2012, false, 1, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "kL [5", characterClass, simpleWeapon, "Hc&U-K@k");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics((-1923), 2609);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.countWeaponMods(combatantSide, (WeaponModCounter) null);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(478, 478);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "invalid parameters: ", 0, 0);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2016, false, true, 2016, 478, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "invalid parameters: ", characterClass, simpleWeapon, "invalid parameters: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "i&vali parameteers: ", 2, 2);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "i&vali parameteers: ", characterClass, simpleWeapon, "i&vali parameteers: ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics((-2465), 383);
battleStatistics.round((-2985));
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-322), (-322));
battleStatistics.round(0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics((-463), 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-463), false, false, (-463), (-463), false, (-2377), characterClass);
SimpleArea simpleArea = new SimpleArea((Point) null, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2377), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "kL [5", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "db:n-kJa\"PW");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(16716049, 16716049);
HashMap<CombatantSide, AtomicInteger> hashMap = new HashMap<CombatantSide, AtomicInteger>();
battleStatistics.addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 156
* Number of covered goals: 133
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 228
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 105
* Number of covered goals: 57
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 156
* Number of covered goals: 133
* Generated 62 tests with total length 404
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:30:49.229 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
[MASTER] 12:30:53.343 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.187 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.188 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.258 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.258 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.309 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.310 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.365 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.419 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.420 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.488 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.489 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.563 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.564 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:30:56.636 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.637 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.706 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.707 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.779 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.847 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.849 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.920 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:56.997 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:56.998 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.088 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.089 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.160 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.161 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.238 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.239 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.315 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.316 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.372 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.429 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.493 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.499 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.557 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.558 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.615 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.616 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.687 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.688 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.738 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.739 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.796 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.854 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.909 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.909 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:57.962 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:57.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:58.025 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:58.026 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:58.084 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:58.085 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:30:58.141 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:58.142 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
[MASTER] 12:30:59.357 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:30:59.357 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
[MASTER] 12:31:00.402 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1242745434741874114.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:31:00.403 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1242745434741874114.jar
[MASTER] 12:31:00.404 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing tests to file
* Writing JUnit test case 'BattleStatistics_ESTest' to evosuite-tests
** Write a test suite: 18 called: 0 to improve: false
** Write a test suite: 26 called: 1 to improve: false
* Writing JUnit test case 'BattleStatistics_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
* Done!

* Computation finished
