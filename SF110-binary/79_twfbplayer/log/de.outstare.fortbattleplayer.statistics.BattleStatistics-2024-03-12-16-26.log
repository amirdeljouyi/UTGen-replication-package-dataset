* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.statistics.BattleStatistics
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 3835
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 16:26:34.658 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 16:26:34.665 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 16:26:34.666 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 16:26:34.699 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntBinaryOperator
[MASTER] 16:26:34.701 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntUnaryOperator
[MASTER] 16:26:34.742 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 16:26:34.742 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 16:26:34.744 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 16:26:37.604 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.statistics.BattleStatistics
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 693
* Using seed 1710260792315
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 327 / 693
[MASTER] 16:26:38.973 [logback-1] WARN  TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 16:26:38.973 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             0%] [Cov:=================>                 51%][Progress:>                             1%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             3%] [Cov:===================>               55%][Progress:=>                            4%] [Cov:===================>               55%][Progress:=>                            5%] [Cov:===================>               55%][Progress:=>                            5%] [Cov:===================>               55%][Progress:=>                            5%] [Cov:===================>               56%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            6%] [Cov:====================>              58%][Progress:==>                           7%] [Cov:====================>              59%][Progress:==>                           7%] [Cov:====================>              59%][Progress:==>                           7%] [Cov:====================>              59%][Progress:==>                           8%] [Cov:====================>              59%][Progress:==>                           8%] [Cov:====================>              59%][Progress:==>                           8%] [Cov:====================>              59%][Progress:==>                           8%] [Cov:====================>              59%][Progress:==>                           8%] [Cov:====================>              59%][Progress:==>                           9%] [Cov:====================>              59%][Progress:==>                           9%] [Cov:====================>              59%][Progress:==>                           9%] [Cov:=====================>             60%][MASTER] 16:26:48.531 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:==>                           9%] [Cov:=====================>             60%][Progress:===>                          10%] [Cov:=====================>             60%][Progress:===>                          10%] [Cov:=====================>             60%][Progress:===>                          10%] [Cov:=====================>             61%][Progress:===>                          10%] [Cov:=====================>             61%][Progress:===>                          10%] [Cov:======================>            63%][Progress:===>                          11%] [Cov:======================>            63%][Progress:===>                          11%] [Cov:======================>            63%][Progress:===>                          11%] [Cov:======================>            63%][Progress:===>                          11%] [Cov:======================>            63%][Progress:===>                          11%] [Cov:======================>            63%][MASTER] 16:26:50.688 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===>                          12%] [Cov:======================>            63%][Progress:===>                          12%] [Cov:======================>            63%][Progress:===>                          12%] [Cov:======================>            63%][Progress:===>                          12%] [Cov:======================>            63%][Progress:===>                          12%] [Cov:======================>            64%][Progress:===>                          13%] [Cov:======================>            64%][Progress:===>                          13%] [Cov:======================>            64%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         16%] [Cov:=======================>           67%][Progress:====>                         16%] [Cov:=======================>           67%][Progress:====>                         16%] [Cov:=======================>           67%][Progress:====>                         16%] [Cov:=======================>           67%][Progress:====>                         16%] [Cov:========================>          69%][Progress:====>                         16%] [Cov:========================>          70%][Progress:=====>                        17%] [Cov:========================>          70%][Progress:=====>                        17%] [Cov:========================>          70%][Progress:=====>                        17%] [Cov:========================>          70%][Progress:=====>                        17%] [Cov:========================>          71%][Progress:=====>                        18%] [Cov:========================>          71%][Progress:=====>                        18%] [Cov:========================>          71%][Progress:=====>                        18%] [Cov:========================>          71%][Progress:=====>                        18%] [Cov:========================>          71%][Progress:=====>                        19%] [Cov:=========================>         72%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       23%] [Cov:=========================>         74%][Progress:======>                       23%] [Cov:=========================>         74%][Progress:======>                       23%] [Cov:=========================>         74%][Progress:======>                       23%] [Cov:=========================>         74%][Progress:=======>                      24%] [Cov:==========================>        75%][Progress:=======>                      24%] [Cov:==========================>        75%][Progress:=======>                      24%] [Cov:==========================>        75%][Progress:=======>                      24%] [Cov:==========================>        75%][Progress:=======>                      25%] [Cov:==========================>        75%][Progress:=======>                      25%] [Cov:==========================>        75%][Progress:=======>                      25%] [Cov:==========================>        75%][Progress:=======>                      25%] [Cov:==========================>        75%][Progress:=======>                      26%] [Cov:==========================>        75%][Progress:=======>                      26%] [Cov:==========================>        75%][Progress:=======>                      26%] [Cov:==========================>        75%][Progress:=======>                      26%] [Cov:==========================>        75%][Progress:=======>                      26%] [Cov:==========================>        75%][Progress:========>                     27%] [Cov:==========================>        75%][Progress:========>                     27%] [Cov:==========================>        75%][Progress:========>                     27%] [Cov:==========================>        75%][Progress:========>                     27%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:===========================>       78%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      81%][Progress:=========>                    32%] [Cov:============================>      81%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     83%][Progress:==========>                   36%] [Cov:=============================>     83%][Progress:==========>                   36%] [Cov:=============================>     83%][Progress:==========>                   36%] [Cov:=============================>     83%][Progress:==========>                   36%] [Cov:=============================>     83%][Progress:==========>                   36%] [Cov:=============================>     83%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 101s and 397 generations, 246360 statements, best individual has fitness: 87.0
* Generated before the refinement 66 tests with total length 480
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1))
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.newDestination((Combatant) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 20);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(200, false, true, 300, 40, true, 50, characterClass);
        SimpleArea simpleArea = new SimpleArea(1000, 2000, simpleSector);
        battleStatistics.newDestination(((Combatant) (null)), simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(200, false, true, 300, 40, true, 50, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1000, 2000, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.newDestination(((Combatant) (null)), simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.newDestination(((Combatant) (null)), simpleArea) target is: battleStatistics method is: newDestination(Combatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 100;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 200;
boolean _boolean = false;
boolean _boolean = true;
int _int = 300;
int _int = 40;
boolean _boolean = true;
int _int = 50;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1000;
int _int = 2000;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(30, 25);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfShinyOil(combatantSide);
        // Set the attacker's health to 100 to simulate a stronger attacker
        battleStatistics.attackerHealth = 100;
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(30, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Set the attacker's health to 100 to simulate a stronger attacker
battleStatistics.attackerHealth = 100, class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: int _int = 30;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfAttackBonus(combatantSide);
        // Changed the primitive values to more illustrative examples
        battleStatistics = new BattleStatistics(10, 20);
        combatantSide = CombatantSide.ATTACKER;
        battleStatistics.amountOfAttackBonus(combatantSide);
        // Added a new test case for a different scenario
        battleStatistics = new BattleStatistics(5, 10);
        combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Changed the primitive values to more illustrative examples
battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtAssignmentImpl
statement is: combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtAssignmentImpl
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Added a new test case for a different scenario
battleStatistics = new BattleStatistics(5, 10), class spoon.support.reflect.code.CtAssignmentImpl
statement is: combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtAssignmentImpl
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(75, 100);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfGraphitLubricants(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(75, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfGraphitLubricants(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(combatantSide) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 75;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-1), (-1), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "now playing", arg4, arg5, (String) null)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-429), "$Xh9muA(6,.'U", arg4, arg5, (String) null)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-429), "$Xh9muA(6,.'U", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(-1, true, true, 35, 35, true, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(-1, -1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, ((String) (null)));
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -429, "$Xh9muA(6,.'U", characterClass, simpleWeapon, ((String) (null)));
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1, true, true, 35, 35, true, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-1, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -429, "$Xh9muA(6,.'U", characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 35, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1), (Sector) _boolean);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "now playing";
int _int = 777;
int _int = 777;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "now playing";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
String string = "$Xh9muA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfFettesOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0)
test data is: CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.numberOfSchmierOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        battleStatistics.numberOfSchmierOil(combatantSide);
        // Improved test data:
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(3, 4);
        battleStatistics.numberOfSchmierOil(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.numberOfSchmierOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(combatantSide) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.numberOfSchmierOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(combatantSide) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);
int _int = 3;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-14), (-14))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfHipFlasks(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfHipFlasks(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(combatantSide) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(2, "Axe", 2, 2);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Goliath", characterClass, simpleWeapon, "Swordsman");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(2, "Axe", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Goliath", characterClass, simpleWeapon, "Swordsman"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
boolean _boolean = false;
boolean _boolean = false;
int _int = 2;
int _int = 2;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "Axe";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "Goliath";
String string = "Swordsman";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-4), (-4))
statement is: getHitsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
battleStatistics.getHitsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3, 5);
        battleStatistics.getHitsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getHitsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getHitsPerRound() target is: battleStatistics method is: getHitsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getHitsPerRound()Ljava/util/Map;
TestCase is: int _int = 3;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getHitsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-75), (-75))
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(42, 42);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(42, 42), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 42;
int _int = 42;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(12, 12, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "now #paying", arg4, arg5, "now #paying")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClassSoldier = CharacterClass.SOLDIER;
        SimpleSector simpleSectorSoldier = new SimpleSector(12, true, true, 35, 35, true, 35, characterClassSoldier);
        SimpleArea simpleAreaSoldier = new SimpleArea(12, 12, simpleSectorSoldier);
        CombatantState combatantStateSoldier = new CombatantState(simpleAreaSoldier, 35, simpleAreaSoldier, true);
        SimpleWeapon simpleWeaponSoldier = new SimpleWeapon(35, "Standard issue rifle", 35, 35);
        SimpleCombatant simpleCombatantSoldier = new SimpleCombatant(combatantSide, combatantStateSoldier, 1, "Attacking the enemy", characterClassSoldier, simpleWeaponSoldier, "Attacking the enemy");
        CharacterClass characterClassEngineer = CharacterClass.ENGINEER;
        SimpleSector simpleSectorEngineer = new SimpleSector(12, true, true, 35, 35, true, 35, characterClassEngineer);
        SimpleArea simpleAreaEngineer = new SimpleArea(12, 12, simpleSectorEngineer);
        CombatantState combatantStateEngineer = new CombatantState(simpleAreaEngineer, 35, simpleAreaEngineer, true);
        SimpleWeapon simpleWeaponEngineer = new SimpleWeapon(35, "Powerful energy weapon", 35, 35);
        SimpleCombatant simpleCombatantEngineer = new SimpleCombatant(combatantSide, combatantStateEngineer, 1, "Attacking the enemy", characterClassEngineer, simpleWeaponEngineer, "Attacking the enemy");
        battleStatistics.aimsAt(simpleCombatantSoldier, simpleCombatantEngineer);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClassSoldier = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSectorSoldier = new SimpleSector(12, true, true, 35, 35, true, 35, characterClassSoldier), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleAreaSoldier = new SimpleArea(12, 12, simpleSectorSoldier), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantStateSoldier = new CombatantState(simpleAreaSoldier, 35, simpleAreaSoldier, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeaponSoldier = new SimpleWeapon(35, "Standard issue rifle", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatantSoldier = new SimpleCombatant(combatantSide, combatantStateSoldier, 1, "Attacking the enemy", characterClassSoldier, simpleWeaponSoldier, "Attacking the enemy"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClassEngineer = CharacterClass.ENGINEER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ENGINEER is CharacterClass
statement is: SimpleSector simpleSectorEngineer = new SimpleSector(12, true, true, 35, 35, true, 35, characterClassEngineer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleAreaEngineer = new SimpleArea(12, 12, simpleSectorEngineer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantStateEngineer = new CombatantState(simpleAreaEngineer, 35, simpleAreaEngineer, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeaponEngineer = new SimpleWeapon(35, "Powerful energy weapon", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatantEngineer = new SimpleCombatant(combatantSide, combatantStateEngineer, 1, "Attacking the enemy", characterClassEngineer, simpleWeaponEngineer, "Attacking the enemy"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatantSoldier, simpleCombatantEngineer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatantSoldier, simpleCombatantEngineer) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 12;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Standard issue rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Attacking the enemy";
String string = "Attacking the enemy";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
int _int = 12;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Powerful energy weapon";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Attacking the enemy";
String string = "Attacking the enemy";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(500, 500);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(500, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 500;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367))
statement is: getShotsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
battleStatistics.getShotsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 50);
        battleStatistics.getShotsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getShotsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getShotsPerRound() target is: battleStatistics method is: getShotsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getShotsPerRound()Ljava/util/Map;
TestCase is: int _int = 1000;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getShotsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(20, 20)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(20)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(20)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(20)
test data is: BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        battleStatistics.setRound(3);
        battleStatistics.setRound(4);
        battleStatistics.setRound(5);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(5) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3;
((BattleStatistics) _int).setRound(_int);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 5;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-2512), "m-:x@bC;l2", arg4, arg5, "m-:x@bC;l2")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(2443)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
battleStatistics.setRound(2443);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(5, 8);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1234, false, true, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Mithril Shortsword", 2, 3);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -2512, "Master Yoda", characterClass, simpleWeapon, "Jedi");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.setRound(0);
        battleStatistics.setRound(4783);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(5, 8), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1234, false, true, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Mithril Shortsword", 2, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -2512, "Master Yoda", characterClass, simpleWeapon, "Jedi"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.setRound(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(0) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(4783), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4783) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
int _int = 8;
Point point = new Point(_int, _int);
int _int = 1234;
boolean _boolean = false;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Mithril Shortsword";
int _int = 2;
int _int = 3;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Master Yoda";
String string = "Jedi";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "m-:x@bC;l2");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 0;
((BattleStatistics) _int).setRound(_int);
int _int = 4783;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3614)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(2495, 1625)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3614, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2411, "#$d", arg4, arg5, "#$d")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1625)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1625);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1625);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
        battleStatistics.setRound(3614);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(2495, 1625);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-2436, true, true, 1625, -518, true, 2411, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "The Mighty Sword of Light", 2495, 3614);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "The Brave Dragon of Light", characterClass, simpleWeapon, "The Mighty Shield of Light");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.setRound(1625);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3614), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3614) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(2495, 1625), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2436, true, true, 1625, -518, true, 2411, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "The Mighty Sword of Light", 2495, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "The Brave Dragon of Light", characterClass, simpleWeapon, "The Mighty Shield of Light"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.setRound(1625), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1625) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 3614;
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3614;
((BattleStatistics) _int).setRound(_int);
int _int = 2495;
int _int = 1625;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 1625;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 2411, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "The Mighty Sword of Light";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2411;
String string = "The Brave Dragon of Light";
String string = "The Mighty Shield of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 1625;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(25, 25, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 25, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 25, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.combatantLifetime(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(25, 25);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
        SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(25, "Laser Pistol", 25, 25);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "John Doe", characterClass, simpleWeapon, "Laser Pistol");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.combatantLifetime(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "Laser Pistol", 25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "John Doe", characterClass, simpleWeapon, "Laser Pistol"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.combatantLifetime(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(simpleCombatant) target is: battleStatistics method is: combatantLifetime(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
TestCase is: int _int = 25;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
boolean _boolean = true;
boolean _boolean = true;
int _int = 25;
int _int = 25;
boolean _boolean = true;
int _int = 25;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Laser Pistol";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "John Doe";
String string = "Laser Pistol";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-2512), "m-:x@bC;l2", arg4, arg5, "m-:x@bC;l2")
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(5, 10);
        CharacterClass characterClass = CharacterClass.ASSAULT;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "F-24", 50, 10);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -2512, "F-24", characterClass, simpleWeapon, "F-24");
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(5, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ASSAULT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ASSAULT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "F-24", 50, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -2512, "F-24", characterClass, simpleWeapon, "F-24"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
int _int = 10;
Point point = new Point(_int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "F-24";
int _int = 50;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "F-24";
String string = "F-24";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "m-:x@bC;l2");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
        // Improved test data:
        battleStatistics = new BattleStatistics(50, 3614);
        combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
battleStatistics = new BattleStatistics(50, 3614), class spoon.support.reflect.code.CtAssignmentImpl
statement is: combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtAssignmentImpl
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3614;
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1000, false, false, 500, 500, false, 500, characterClass);
        SimpleArea simpleArea = new SimpleArea(1000, 500, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 500, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(500, "The Shadow", 500, 500);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 500, "The Shadow", characterClass, simpleWeapon, "The Shadow");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1000, false, false, 500, 500, false, 500, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1000, 500, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 500, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(500, "The Shadow", 500, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 500, "The Shadow", characterClass, simpleWeapon, "The Shadow"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1000;
boolean _boolean = false;
boolean _boolean = false;
int _int = 500;
int _int = 500;
boolean _boolean = false;
int _int = 500;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1000;
int _int = 500;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 500;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 500;
String string = "The Shadow";
int _int = 500;
int _int = 500;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 500;
String string = "The Shadow";
String string = "The Shadow";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "M4A1", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "John Doe", characterClass, simpleWeapon, "John Doe");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "M4A1", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "John Doe", characterClass, simpleWeapon, "John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 35;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "M4A1";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "John Doe";
String string = "John Doe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(defenderCount, attackerCount);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(defenderCount, true, true, attackerCount, attackerCount, true, defenderCount, characterClass);
        SimpleArea simpleArea = new SimpleArea(defenderCount, attackerCount, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, attackerCount, simpleArea, online);
        SimpleWeapon simpleWeapon = new SimpleWeapon(weaponDamage, weaponName, attackerCount, weaponDamage);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, attackerCount, weaponName, characterClass, simpleWeapon, weaponName);
        battleStatistics.isOnline(simpleCombatant, online);
        offlineCount = battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(defenderCount, attackerCount), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(defenderCount, true, true, attackerCount, attackerCount, true, defenderCount, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(defenderCount, attackerCount, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, attackerCount, simpleArea, online), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(weaponDamage, weaponName, attackerCount, weaponDamage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, attackerCount, weaponName, characterClass, simpleWeapon, weaponName), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, online), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, online) target is: battleStatistics method is: isOnline(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: offlineCount = battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, 35, 35, true, 35, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, 35, (Sector) _boolean);
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) simpleSector, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, 35, "$wXh9emuA(6,.'U", (CharacterClass) _boolean, (Weapon) combatantState, "$wXh9emuA(6,.'U");
boolean _boolean = null;
battleStatistics.isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(12, 12, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "now #paying", arg4, arg5, "now #paying")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(12, true, true, 10, 20, true, 10, characterClass);
        SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Warhammer of Gorm", 10, 20);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Gorm the Green", characterClass, simpleWeapon, "Gorm the Green");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.targetNoOne(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(12, true, true, 10, 20, true, 10, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Warhammer of Gorm", 10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Gorm the Green", characterClass, simpleWeapon, "Gorm the Green"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.targetNoOne(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(((CombatantSide) (null))) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 12;
boolean _boolean = true;
boolean _boolean = true;
int _int = 10;
int _int = 20;
boolean _boolean = true;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Warhammer of Gorm";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Gorm the Green";
String string = "Gorm the Green";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 35;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
String string = "$wXh9emuA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(25, 25, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 25, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 25, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(10, true, true, 10, 10, true, 10, characterClass);
        SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "M4A1", 10, 10);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "M4A1", characterClass, simpleWeapon, "M4A1");
        battleStatistics.isOnline(simpleCombatant, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(10, true, true, 10, 10, true, 10, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(10, 10, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "M4A1", 10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "M4A1", characterClass, simpleWeapon, "M4A1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 10;
boolean _boolean = true;
boolean _boolean = true;
int _int = 10;
int _int = 10;
boolean _boolean = true;
int _int = 10;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "M4A1";
int _int = 10;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "M4A1";
String string = "M4A1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9oemuA(6?.'U", arg4, arg5, "$wXh9oemuA(6?.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9oemuA(6?.'U", characterClass, simpleWeapon, "$wXh9oemuA(6?.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "Desert Eagle", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "Desert Eagle", characterClass, simpleWeapon, "Desert Eagle");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "Desert Eagle", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "Desert Eagle", characterClass, simpleWeapon, "Desert Eagle"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 35;
boolean _boolean = false;
boolean _boolean = false;
int _int = 35;
int _int = 35;
boolean _boolean = false;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Desert Eagle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "Desert Eagle";
String string = "Desert Eagle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9oemuA(6?.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
        battleStatistics.isOnline(simpleCombatant, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 35;
boolean _boolean = false;
boolean _boolean = false;
int _int = 35;
int _int = 35;
boolean _boolean = false;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
String string = "$wXh9emuA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(25, 25, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 25, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 25, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(25, 25);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
        SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(25, "Wooden Sword", 25, 25);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "Alex", characterClass, simpleWeapon, "Alex");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "Wooden Sword", 25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "Alex", characterClass, simpleWeapon, "Alex"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 25;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
boolean _boolean = true;
boolean _boolean = true;
int _int = 25;
int _int = 25;
boolean _boolean = true;
int _int = 25;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Wooden Sword";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Alex";
String string = "Alex";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(28, 28)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-1), (-1), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 28, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "now playing", arg4, arg5, (String) null)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(28, 28);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(28, 28);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(-1, false, false, 28, 28, false, 28, characterClass);
        SimpleArea simpleArea = new SimpleArea(-1, -1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(28, "Bastion", 777, 777);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Bastion", characterClass, simpleWeapon, ((String) (null)));
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(28, 28), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1, false, false, 28, 28, false, 28, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-1, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(28, "Bastion", 777, 777), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Bastion", characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 28;
int _int = 28;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = false;
boolean _boolean = false;
int _int = 28;
int _int = 28;
boolean _boolean = false;
int _int = 28;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 28, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1), (Sector) _boolean);
int _int = 28;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 28;
String string = "Bastion";
int _int = 777;
int _int = 777;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "Bastion";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(25, 25, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 25, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 25, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(25, 25);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
        SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(25, "The Great Sword of Light", 25, 25);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "Galahad", characterClass, simpleWeapon, "The Great Sword of Light");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.isOnline(simpleCombatant, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "The Great Sword of Light", 25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "Galahad", characterClass, simpleWeapon, "The Great Sword of Light"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 25;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
boolean _boolean = true;
boolean _boolean = true;
int _int = 25;
int _int = 25;
boolean _boolean = true;
int _int = 25;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "The Great Sword of Light";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Galahad";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2, arg2, true)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3442)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "", arg4, arg5, "")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.setRound(2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
battleStatistics.setRound(3442);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        battleStatistics.setRound(2);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(50, 60);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
        battleStatistics.setRound(3442);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Magic Sword", 100, 2);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Dark Lord", characterClass, simpleWeapon, "");
        battleStatistics.isOnline(simpleCombatant, true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(50, 60), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3442), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3442) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Magic Sword", 100, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Dark Lord", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 3442;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
String string = "Magic Sword";
int _int = 100;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Dark Lord";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(25, 25, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 25, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 25, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(25, 25);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
        SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(25, "The Great Sword of Light", 25, 25);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "Lord Commander Shepard", characterClass, simpleWeapon, "The Great Sword of Light");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(25, "The Great Sword of Light", 25, 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "Lord Commander Shepard", characterClass, simpleWeapon, "The Great Sword of Light"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 25;
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
boolean _boolean = true;
boolean _boolean = true;
int _int = 25;
int _int = 25;
boolean _boolean = true;
int _int = 25;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "The Great Sword of Light";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Lord Commander Shepard";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "$wXh9emuA(6,.'U");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(2495, 1610)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3614, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, arg1, 2495, "#$d", arg4, arg5, "#$d")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfBayonets = battleStatistics.numberOfBayonets(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfBayonets(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(2495, 1610);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Ak-47", 2495, 3614);
        SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 2495, "Soldier", characterClass, simpleWeapon, "Knife");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.numberOfBayonets(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(2495, 1610), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Ak-47", 2495, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 2495, "Soldier", characterClass, simpleWeapon, "Knife"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfBayonets(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfBayonets(combatantSide) target is: battleStatistics method is: numberOfBayonets(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3614;
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2495;
int _int = 1610;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-518), true, 2411, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Ak-47";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "Soldier";
String string = "Knife";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(35, 35, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 35, "$wXh9emuA(6,.'U", arg4, arg5, "$wXh9emuA(6,.'U")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "Gauss Rifle", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "Gauss Rifle", characterClass, simpleWeapon, "Gauss Rifle");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "Gauss Rifle", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "Gauss Rifle", characterClass, simpleWeapon, "Gauss Rifle"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide) target is: battleStatistics method is: numberOfLoadingChamerOrEnhancedPatrons(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 35;
boolean _boolean = false;
boolean _boolean = false;
int _int = 35;
int _int = 35;
boolean _boolean = false;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Gauss Rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "Gauss Rifle";
String string = "Gauss Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(2495, 1610)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3614, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, arg1, 2495, "#$d", arg4, arg5, "#$d")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
        Point point = new Point(2495, 1610);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "M4A1", 2495, 3614);
        SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 2495, "US Marine", characterClass, simpleWeapon, "M4A1");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(2495, 1610), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "M4A1", 2495, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 2495, "US Marine", characterClass, simpleWeapon, "M4A1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 3614;
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2495;
int _int = 1610;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-518), true, 2411, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "M4A1";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "US Marine";
String string = "M4A1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1396, 1396)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
battleStatistics.switchedPosList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
        battleStatistics.switchedPosList(RED);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1396, 1396), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(RED), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(RED) target is: battleStatistics method is: switchedPosList()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1396;
int _int = 1396;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2, 2);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.criticalHitDamage(combatantSide);
        // Improved test data:
        BattleStatistics battleStatistics = new BattleStatistics(5, 7);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
BattleStatistics battleStatistics = new BattleStatistics(5, 7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);
int _int = 5;
int _int = 7;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877))
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(Integer.MIN_VALUE, Integer.MIN_VALUE);
        battleStatistics.critList(null);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(Integer.MIN_VALUE, Integer.MIN_VALUE), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.critList(null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(null) target is: battleStatistics method is: critList(<unknown>)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
CombatantSide combatantSide = null;
battleStatistics.critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 758, "m-:x@bC;l2", arg4, arg5, "x&3c1!;n5<c4;Jx~")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 594)
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(0, 0);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
int _int = 0;
Point point = new Point(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "m-:x@bC;l2";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "x&3c1!;n5<c4;Jx~");
int _int = 594;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3614)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(2495, 1610)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3614, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, arg1, 2495, "#$d", arg4, arg5, "#$d")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
        battleStatistics.setRound(3614);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(2495, 1610);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "M16A2", 2495, 3614);
        SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 2495, "US Army", characterClass, simpleWeapon, "US Army");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3614), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3614) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(2495, 1610), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "M16A2", 2495, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 2495, "US Army", characterClass, simpleWeapon, "US Army"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3614;
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3614;
((BattleStatistics) _int).setRound(_int);
int _int = 2495;
int _int = 1610;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-518), true, 2411, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "M16A2";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "US Army";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3597)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(3597, 2495)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2495, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2495, "%q;$5Jir", arg4, arg5, "D)v6(Q+vN")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
battleStatistics.setRound(3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.setRound(3);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(50, 80);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(-1, true, true, 3, 2, true, -929, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 80, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "(", 3, 20);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 80, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(50, 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1, true, true, 3, 2, true, -929, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 80, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "(", 3, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 80, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3;
((BattleStatistics) _int).setRound(_int);
int _int = 50;
int _int = 80;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 3;
int _int = 2;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, true, (-929), (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 80;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "(";
int _int = 3;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 80;
String string = "%q;$5Jir";
String string = "D)v6(Q+vN";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "D)v6(Q+vN");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(20, 20)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(20)
statement is: getNotShootersPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.getNotShootersPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.setRound(50);
        battleStatistics.getNotShootersPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(50) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.getNotShootersPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getNotShootersPerRound() target is: battleStatistics method is: getNotShootersPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getNotShootersPerRound()Ljava/util/Map;
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
((BattleStatistics) _int).setRound(_int);
((BattleStatistics) _int).getNotShootersPerRound();

statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4698, 4698)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
        battleStatistics.critList(combatantSide);
        // Improved test data:
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
        battleStatistics.critList(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(4698, 4698), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(1234, 5678), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4698;
int _int = 4698;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point((-1), 1351)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2490), arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "", arg4, arg5, "d9g]4")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(279, 0)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: Point point = new Point((-1), 1351);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2490), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "d9g]4");
BattleStatistics battleStatistics = new BattleStatistics(279, 0);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Point point = new Point(1, 2);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(3, true, true, -1, -3651, true, 538, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2490, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1, "Test Weapon", 1000, 5);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10000, "Test Combatant", characterClass, simpleWeapon, "d9g]4");
        BattleStatistics battleStatistics = new BattleStatistics(279, 0);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: Point point = new Point(1, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(3, true, true, -1, -3651, true, 538, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2490, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1, "Test Weapon", 1000, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10000, "Test Combatant", characterClass, simpleWeapon, "d9g]4"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(279, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 9, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 22
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 9, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 22
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
int _int = 2;
Point point = new Point(_int, _int);
int _int = 3;
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 538;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) _boolean, _int, true, 538, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "Test Weapon";
int _int = 1000;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1);
int _int = 10000;
String string = "Test Combatant";
String string = "d9g]4";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "d9g]4");
int _int = 279;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
((BattleStatistics) simpleArea).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) simpleArea).amountOfAttackBonus(combatantSide);

statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2681, "", arg4, arg5, "/Ph]X5ZMOGz^{|")
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1, false, false, 2, 0, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1, "M32 PDW", 0, 2681);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "John Doe", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1, false, false, 2, 0, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1, "M32 PDW", 0, 2681), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "John Doe", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 20
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 20
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: boolean _boolean = false;
boolean _boolean = false;
int _int = 2;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 2, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "M32 PDW";
int _int = 0;
int _int = 2681;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 2681);
int _int = 2681;
String string = "John Doe";
String string = "/Ph]X5ZMOGz^{|";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "/Ph]X5ZMOGz^{|");
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
((BattleStatistics) _boolean).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _boolean).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(3597, 2495)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2495, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2495, "%q;$5Jir", arg4, arg5, "D)v6(Q+vN")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics();
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(3597, 2495);
        CharacterClass characterClass = CharacterClass.FIGHTER;
        SimpleSector simpleSector = new SimpleSector(-4379, true, true, 1, 1, true, -929, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "Katana", 3, 50);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "Fighter", characterClass, simpleWeapon, "Dark Knight");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(3597, 2495), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.FIGHTER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.FIGHTER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-4379, true, true, 1, 1, true, -929, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "Katana", 3, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "Fighter", characterClass, simpleWeapon, "Dark Knight"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
TestCase is: int _int = 3597;
int _int = 2495;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
int _int = 1;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, true, (-929), (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2495;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1001;
String string = "Katana";
int _int = 3;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "Fighter";
String string = "Dark Knight";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "D)v6(Q+vN");

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(2495, 1635)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3614, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2411, "#$d", arg4, arg5, "#$d")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, true)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1635);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(2495, 1635);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Fireball", 2495, 3614);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "Warrior", characterClass, simpleWeapon, "Axe");
        battleStatistics.isOnline(simpleCombatant, true);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(2495, 1635), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2436, true, true, -1492, -518, true, 2411, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Fireball", 2495, 3614), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "Warrior", characterClass, simpleWeapon, "Axe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, true) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3614;
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2495;
int _int = 1635;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-518), true, 2411, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Fireball";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2411;
String string = "Warrior";
String string = "Axe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.combatantLifetime(new Combatant("Alice", 18, 5));
        battleStatistics.combatantLifetime(new Combatant("Bob", 25, 10));
        battleStatistics.combatantLifetime(new Combatant("Charlie", 30, 15));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.combatantLifetime(new Combatant("Alice", 18, 5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Alice", 18, 5)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.combatantLifetime(new Combatant("Bob", 25, 10)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Bob", 25, 10)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.combatantLifetime(new Combatant("Charlie", 30, 15)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Charlie", 30, 15)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1))
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.statistics.WeaponModCounter$FettesOilCounter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.WeaponModCounter$FettesOilCounter
statement code is: WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter()
statement is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-2001, -1);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter();
        battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);
        // Example data for a battle with 1000 rounds
        for (int i = 0; i < 1000; i++) {
            combatantSide = CombatantSide.ATTACKER;
            if ((i % 2) == 0) {
                combatantSide = CombatantSide.DEFENDER;
            }
            battleStatistics.countRound(combatantSide);
        }
        // Example data for a battle with 5 weapon mods used by the attacker
        for (int i = 0; i < 5; i++) {
            combatantSide = CombatantSide.ATTACKER;
            battleStatistics.countWeaponMod(combatantSide, FettesOil);
        }
        // Example data for a battle with 10 weapon mods used by the defender
        for (int i = 0; i < 10; i++) {
            combatantSide = CombatantSide.DEFENDER;
            battleStatistics.countWeaponMod(combatantSide, FettesOil);
        }
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-2001, -1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter) target is: battleStatistics method is: countWeaponMods(CombatantSide,WeaponModCounter.FettesOilCounter)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: // Example data for a battle with 1000 rounds
for (int i = 0; i < 1000; i++) {
    combatantSide = CombatantSide.ATTACKER;
    if ((i % 2) == 0) {
        combatantSide = CombatantSide.DEFENDER;
    }
    battleStatistics.countRound(combatantSide);
}, class spoon.support.reflect.code.CtForImpl
statement is: // Example data for a battle with 5 weapon mods used by the attacker
for (int i = 0; i < 5; i++) {
    combatantSide = CombatantSide.ATTACKER;
    battleStatistics.countWeaponMod(combatantSide, FettesOil);
}, class spoon.support.reflect.code.CtForImpl
statement is: // Example data for a battle with 10 weapon mods used by the defender
for (int i = 0; i < 10; i++) {
    combatantSide = CombatantSide.DEFENDER;
    battleStatistics.countWeaponMod(combatantSide, FettesOil);
}, class spoon.support.reflect.code.CtForImpl
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CombatantSide combatantSide = null;
WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = null;
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1081, 5627)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 274, "", arg4, arg5, (String) null)
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 0)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "", characterClass, simpleWeapon, (String) null);
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Energy Sword", 50, 20);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "Gren", characterClass, simpleWeapon, ((String) (null)));
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1081, 5627), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Energy Sword", 50, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "Gren", characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1081;
int _int = 5627;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 5627;
boolean _boolean = true;
boolean _boolean = false;
int _int = 67;
int _int = 0;
boolean _boolean = false;
int _int = 1081;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 0;
String string = "Energy Sword";
int _int = 50;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 274;
String string = "Gren";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) point, (Weapon) _int, (String) null);
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 758, "", arg4, arg5, "x&3c1!;n5<c4;Jx~")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 594)
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "x&3c1!;n5<c4;Jx~");
int _int = 594;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1, 2177)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 451, "m(|~[FEy(iCul9iIL", arg4, arg5, (String) null)
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 2177)
statement is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isHit(arg0, (-2123), 2177)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451);
Point point = new Point(1, 2177);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, (String) null);
BattleStatistics battleStatistics = new BattleStatistics(1, 2177);
battleStatistics.isHit(simpleCombatant, (-2123), 2177);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SimpleWeapon simpleWeapon = new SimpleWeapon(158, "Shining_Sword", 451, 451);
        Point point = new Point(10, 2177);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(451, true, true, -213, 1, true, 2177, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, ((String) (null)));
        BattleStatistics battleStatistics = new BattleStatistics(10, 2177);
        battleStatistics.isHit(simpleCombatant, -2123, 2177);
        battleStatistics.getFieldStatistics();
    }
}
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(158, "Shining_Sword", 451, 451), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(10, 2177), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(451, true, true, -213, 1, true, 2177, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 2177), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isHit(simpleCombatant, -2123, 2177), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isHit(simpleCombatant, -2123, 2177) target is: battleStatistics method is: isHit(SimpleCombatant,int,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 24
Matched Method is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 24
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 158;
String string = "Shining_Sword";
int _int = 451;
int _int = 451;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
int _int = 2177;
Point point = new Point(_int, _int);
int _int = 451;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1;
boolean _boolean = true;
int _int = 2177;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 2177, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 451;
String string = "m(|~[FEy(iCul9iIL";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) _int, (Weapon) _int, (String) null);
int _int = 10;
int _int = 2177;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2177;
int _int = null;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 758, "", arg4, arg5, "x&3c1!;n5<c4;Jx~")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(123456789, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "x&3c1!;n5<c4;Jx~", 0, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(123456789, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "x&3c1!;n5<c4;Jx~", 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 123456789;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "x&3c1!;n5<c4;Jx~");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(12, 12, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "now #paying", arg4, arg5, "now #paying")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "Laser Rifle", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Alex", characterClass, simpleWeapon, "Alex");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "Laser Rifle", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Alex", characterClass, simpleWeapon, "Alex"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 12;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Laser Rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Alex";
String string = "Alex";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1237, 1237)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round((-873.2884))
test data is: BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
battleStatistics.round((-873.2884));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the "round" method of the "BattleStatistics" class
        BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
        battleStatistics.round(-1234.5678);
    }
}
statement is: // Improved test data for the "round" method of the "BattleStatistics" class
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(-1234.5678), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(-1234.5678) target is: battleStatistics method is: round(double)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1237;
int _int = 1237;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
double _double = null;
((BattleStatistics) _int).round(_double);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1793, (-382))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(1793)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
battleStatistics.round(1793);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, -20);
        battleStatistics.round(100);
        battleStatistics.round(-50);
        battleStatistics.round(30);
        System.out.println("Total rounds: " + battleStatistics.getNumRounds());
        System.out.println("Total damage dealt: " + battleStatistics.getDamageDealt());
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, -20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(100) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: round(D)I
statement is: battleStatistics.round(-50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(-50) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: round(D)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.round(30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(30) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: round(D)I
statement is: System.out.println("Total rounds: " + battleStatistics.getNumRounds()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Total rounds: " + battleStatistics.getNumRounds()) target is: System.out method is: println(char[])
statement is: System.out.println("Total damage dealt: " + battleStatistics.getDamageDealt()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Total damage dealt: " + battleStatistics.getDamageDealt()) target is: System.out method is: println(char[])
TestCase is: int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, (-382));
int _int = 100;
((BattleStatistics) _int).round(_int);
int _int = null;
((BattleStatistics) _int).round(_int);
int _int = 30;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(0.0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-5, -5);// Improved test data: more descriptive and representative of the situation being tested

        battleStatistics.round(0.0);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-5, -5)// Improved test data: more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(0.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(0.0) target is: battleStatistics method is: round(double)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: round(D)I
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
double _double = 0.0;
battleStatistics.round(_double);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3, 3)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg0, 1021, (Area) null, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-749), "players", arg4, arg5, "0aYhp")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1021, (Area) null, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-749), "players", characterClass, simpleWeapon, "0aYhp");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3, 3);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1021, ((Area) (null)), true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
        SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide, combatantState, -749, "players", characterClass, simpleWeapon, "0aYhp");
        SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide, combatantState, -750, "players", characterClass, simpleWeapon, "0aYhp");
        battleStatistics.hasSwappedPosition(simpleCombatant1, simpleCombatant2);
        battleStatistics.switchedPosList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1021, ((Area) (null)), true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide, combatantState, -749, "players", characterClass, simpleWeapon, "0aYhp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide, combatantState, -750, "players", characterClass, simpleWeapon, "0aYhp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant1, simpleCombatant2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant1, simpleCombatant2) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3;
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 1118719;
boolean _boolean = false;
int _int = 1118719;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 1021;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, (Area) _boolean, true);
int _int = 0;
String string = "players";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "players";
String string = "0aYhp";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "0aYhp");
String string = "players";
String string = "0aYhp";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "0aYhp");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(28, 28, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 35, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 28, "now #paying", arg4, arg5, "f*hYu{`P-")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "now #paying", characterClass, simpleWeapon, "f*hYu{`P-");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
        SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(35, "M16", 35, 35);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "John Doe", characterClass, simpleWeapon, "f*hYu{`P-");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(35, "M16", 35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "John Doe", characterClass, simpleWeapon, "f*hYu{`P-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 28;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 28;
int _int = 28;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "M16";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 28;
String string = "John Doe";
String string = "f*hYu{`P-";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "f*hYu{`P-");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(223, (-4848))
statement is: java.util.Hashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Hashtable<de.outstare.fortbattleplayer.model.CombatantSide, java.util.concurrent.atomic.AtomicInteger>
statement code is: Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>()
statement is: java.util.Hashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Hashtable<de.outstare.fortbattleplayer.model.CombatantSide, de.outstare.fortbattleplayer.statistics.RoundStatistics>
statement code is: Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>()
statement is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.addAndResetRoundCounter(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(223, -4848);
        Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<>();
        hashtable.put(ATTACKER, new AtomicInteger(100));
        hashtable.put(DEFENDER, new AtomicInteger(200));
        battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(223, -4848), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashtable.put(ATTACKER, new AtomicInteger(100)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashtable.put(ATTACKER, new AtomicInteger(100)) target is: hashtable method is: put(AtomicInteger)
statement is: hashtable.put(DEFENDER, new AtomicInteger(200)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashtable.put(DEFENDER, new AtomicInteger(200)) target is: hashtable method is: put(AtomicInteger)
statement is: battleStatistics.addAndResetRoundCounter(hashtable, hashtable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.addAndResetRoundCounter(hashtable, hashtable) target is: battleStatistics method is: addAndResetRoundCounter(Hashtable,Hashtable)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V
TestCase is: int _int = 223;
BattleStatistics battleStatistics = new BattleStatistics(_int, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
((BattleStatistics) _int).addAndResetRoundCounter(hashtable, hashtable);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35)
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved((Combatant) null, (Area) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
battleStatistics.hasMoved((Combatant) null, (Area) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(35, 35);
        battleStatistics.hasMoved(new Combatant("Alice", "Warrior", 10, 120), new Area(1, 2));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(35, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(new Combatant("Alice", "Warrior", 10, 120), new Area(1, 2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(new Combatant("Alice", "Warrior", 10, 120), new Area(1, 2)) target is: battleStatistics method is: hasMoved(Combatant,Area)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 35;
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
Area area = null;
((BattleStatistics) _int).hasMoved(combatant, area);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1159, 0)
statement is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isAlive((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10000, 0);
        battleStatistics.isAlive("myCombatant");
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10000, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive("myCombatant"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive("myCombatant") target is: battleStatistics method is: isAlive(java.lang.String)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 10000;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
String string = "myCombatant";
((BattleStatistics) _int).isAlive((Combatant) string);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(158, (-1))
statement is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isDead((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(158, 0);
        battleStatistics.isDead(new Combatant("Griffin", 12, "Sword"));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(158, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isDead(new Combatant("Griffin", 12, "Sword")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isDead(new Combatant("Griffin", 12, "Sword")) target is: battleStatistics method is: isDead(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 158;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isDead(combatant);

* test suite isTestSuite: 132
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-429), "$Xh9muA(6,.'U", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.numberOfSchmierOil(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
battleStatistics.getHitsPerRound();
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
battleStatistics.getShotsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
battleStatistics.setRound(2443);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1625);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1625);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.combatantLifetime(simpleCombatant);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9oemuA(6?.'U", characterClass, simpleWeapon, "$wXh9oemuA(6?.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.setRound(2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
battleStatistics.setRound(3442);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfBayonets(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
battleStatistics.switchedPosList((CombatantSide) null);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHitDamage(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
battleStatistics.setRound(3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.turnOrder(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.getNotShootersPerRound();
Test 45: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
battleStatistics.critList(combatantSide);
Test 46: 
Point point = new Point((-1), 1351);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2490), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "d9g]4");
BattleStatistics battleStatistics = new BattleStatistics(279, 0);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 47: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1635);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "", characterClass, simpleWeapon, (String) null);
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHits(combatantSide);
Test 54: 
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451);
Point point = new Point(1, 2177);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, (String) null);
BattleStatistics battleStatistics = new BattleStatistics(1, 2177);
battleStatistics.isHit(simpleCombatant, (-2123), 2177);
battleStatistics.getFieldStatistics();
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
battleStatistics.round((-873.2884));
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
battleStatistics.round(1793);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1021, (Area) null, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-749), "players", characterClass, simpleWeapon, "0aYhp");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "now #paying", characterClass, simpleWeapon, "f*hYu{`P-");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);
Test 66: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 20);
SimpleSector simpleSector = new SimpleSector(200, false, true, 300, 40, true, 50, (CharacterClass) 20);
int _int = 1000;
int _int = 2000;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(30, 25);
((BattleStatistics)30).numberOfShinyOil((CombatantSide) null);

Test 68: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
((BattleStatistics)35).amountOfAttackBonus((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(75, 100);
((BattleStatistics)75).numberOfGraphitLubricants((CombatantSide) null);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).totalSwaps((CombatantSide) null);

Test 71: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 35, 35, (int) true, (boolean) 35, 35, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1), (Sector) _boolean);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "now playing";
int _int = 777;
int _int = 777;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "now playing";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
String string = "$Xh9muA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).getFieldStatistics();

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).numberOfFettesOil((CombatantSide) null);

Test 74: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).numberOfSchmierOil((CombatantSide) null);
int _int = 3;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfHipFlasks((CombatantSide) null);

Test 76: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
int _int = 2;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "Axe";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "Goliath";
String string = "Swordsman";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(3, 5);
((BattleStatistics)3).getHitsPerRound();

Test 78: 
BattleStatistics battleStatistics = new BattleStatistics(42, 42);
((BattleStatistics)42).criticalHits((CombatantSide) null);

Test 79: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Standard issue rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Attacking the enemy";
String string = "Attacking the enemy";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
int _int = 12;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Powerful energy weapon";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Attacking the enemy";
String string = "Attacking the enemy";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 80: 
BattleStatistics battleStatistics = new BattleStatistics(500, 500);
((BattleStatistics)500).amountOfDefenseBonus((CombatantSide) null);

Test 81: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 50);
((BattleStatistics)1000).getShotsPerRound();

Test 82: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).setRound(3);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 5;
((BattleStatistics) _int).setRound(_int);

Test 83: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 5;
Point point = new Point(5, 8);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(1234, false, true, 0, 0, false, 0, (CharacterClass) 5);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Mithril Shortsword";
int _int = 2;
int _int = 3;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Master Yoda";
String string = "Jedi";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "m-:x@bC;l2");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 0;
((BattleStatistics) _int).setRound(_int);
int _int = 4783;
((BattleStatistics) _int).setRound(_int);

Test 84: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
((BattleStatistics)3614).setRound(3614);
int _int = 2495;
int _int = 1625;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 1625;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 2411, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "The Mighty Sword of Light";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2411;
String string = "The Brave Dragon of Light";
String string = "The Mighty Shield of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 1625;
((BattleStatistics) _int).setRound(_int);

Test 85: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
int _int = 25;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Laser Pistol";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "John Doe";
String string = "Laser Pistol";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 86: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 5;
Point point = new Point(5, 10);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) 5);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "F-24";
int _int = 50;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "F-24";
String string = "F-24";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "m-:x@bC;l2");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 87: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
((BattleStatistics)3614).numberOfMovesPerPlayer((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 88: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
int _int = 500;
SimpleSector simpleSector = new SimpleSector(1000, false, false, 500, 500, false, 500, (CharacterClass) battleStatistics);
int _int = 1000;
int _int = 500;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 500;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 500;
String string = "The Shadow";
int _int = 500;
int _int = 500;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 500;
String string = "The Shadow";
String string = "The Shadow";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 89: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "M4A1";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "John Doe";
String string = "John Doe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 90: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
boolean _boolean = true;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 35, 35, true, 35, (CharacterClass) true);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, 35, (Sector) _boolean);
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) simpleSector, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, 35, "$wXh9emuA(6,.'U", (CharacterClass) _boolean, (Weapon) combatantState, "$wXh9emuA(6,.'U");
boolean _boolean = null;
battleStatistics.isOnline(simpleCombatant, _boolean);

Test 91: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(12, true, true, 10, 20, true, 10, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Warhammer of Gorm";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Gorm the Green";
String string = "Gorm the Green";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 92: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
String string = "$wXh9emuA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 93: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(10, true, true, 10, 10, true, 10, (CharacterClass) battleStatistics);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "M4A1";
int _int = 10;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "M4A1";
String string = "M4A1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 94: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Desert Eagle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "Desert Eagle";
String string = "Desert Eagle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9oemuA(6?.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 95: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
String string = "$wXh9emuA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 96: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
int _int = 25;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Wooden Sword";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Alex";
String string = "Alex";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 97: 
int _int = 28;
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
boolean _boolean = false;
int _int = 28;
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 28, 28, (int) false, (boolean) 28, 28, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1), (Sector) _boolean);
int _int = 28;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 28;
String string = "Bastion";
int _int = 777;
int _int = 777;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "Bastion";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);

Test 98: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
int _int = 25;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "The Great Sword of Light";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Galahad";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 99: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).setRound(2);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 3442;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
String string = "Magic Sword";
int _int = 100;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Dark Lord";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 100: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) 25);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "The Great Sword of Light";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Lord Commander Shepard";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "$wXh9emuA(6,.'U");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 101: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 2411, (-518), true, 2411, (CharacterClass) 2495);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Ak-47";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "Soldier";
String string = "Knife";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

Test 102: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Gauss Rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "Gauss Rifle";
String string = "Gauss Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

Test 103: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 2411, (-518), true, 2411, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "M4A1";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "US Marine";
String string = "M4A1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);

Test 104: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
((BattleStatistics)1396).switchedPosList((CombatantSide) null);

Test 105: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).criticalHitDamage((CombatantSide) null);
int _int = 5;
int _int = 7;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 106: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);

Test 107: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "m-:x@bC;l2";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "x&3c1!;n5<c4;Jx~");
int _int = 594;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 108: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
((BattleStatistics)3614).setRound(3614);
int _int = 2495;
int _int = 1610;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-518), true, 2411, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "M16A2";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "US Army";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 109: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).setRound(3);
int _int = 50;
int _int = 80;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 3;
int _int = 2;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, true, (-929), (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 80;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "(";
int _int = 3;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 80;
String string = "%q;$5Jir";
String string = "D)v6(Q+vN";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "D)v6(Q+vN");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 110: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).setRound(50);
((BattleStatistics) _int).getNotShootersPerRound();

Test 111: 
int _int = 4698;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
((BattleStatistics)4698).critList((CombatantSide) null);
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 112: 
Point point = new Point(1, 2);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(3, true, true, (int) true, 538, true, 538, (CharacterClass) 2);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "Test Weapon";
int _int = 1000;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1);
int _int = 10000;
String string = "Test Combatant";
String string = "d9g]4";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "d9g]4");
int _int = 279;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
((BattleStatistics) simpleArea).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) simpleArea).amountOfAttackBonus(combatantSide);

Test 113: 
int _int = 2;
int _int = 2;
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 2, 0, (int) false, (boolean) 2, 2, (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "M32 PDW";
int _int = 0;
int _int = 2681;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 2681);
int _int = 2681;
String string = "John Doe";
String string = "/Ph]X5ZMOGz^{|";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "/Ph]X5ZMOGz^{|");
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
((BattleStatistics) _boolean).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _boolean).amountOfAttackBonus(combatantSide);

Test 114: 
Point point = new Point(3597, 2495);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 1, 1, (int) true, true, (-929), (CharacterClass) true);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2495;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1001;
String string = "Katana";
int _int = 3;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "Fighter";
String string = "Dark Knight";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "D)v6(Q+vN");

Test 115: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1635);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 2411, (-518), true, 2411, (CharacterClass) 2495);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Fireball";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2411;
String string = "Warrior";
String string = "Axe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 116: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).combatantLifetime((Combatant) null);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

Test 117: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 118: 
int _int = 1081;
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
Point point = new Point();
int _int = 67;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 0;
String string = "Energy Sword";
int _int = 50;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 274;
String string = "Gren";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) point, (Weapon) _int, (String) null);
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 119: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "x&3c1!;n5<c4;Jx~");
int _int = 594;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

Test 120: 
int _int = 158;
int _int = 451;
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "Shining_Sword", 451, 451);
Point point = new Point(10, 2177);
int _int = 451;
SimpleSector simpleSector = new SimpleSector(451, true, true, 1, (int) true, (boolean) 2177, 2177, (CharacterClass) 451);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 451;
String string = "m(|~[FEy(iCul9iIL";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) _int, (Weapon) _int, (String) null);
int _int = 10;
int _int = 2177;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2177;
int _int = null;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 121: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
int _int = 0;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(123456789, true, true, 0, 0, true, 0, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "x&3c1!;n5<c4;Jx~");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 122: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Laser Rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Alex";
String string = "Alex";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 123: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
((BattleStatistics)1237).round((double) (Double) null);

Test 124: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, (-382));
((BattleStatistics)100).round(100);
int _int = null;
((BattleStatistics) _int).round(_int);
int _int = 30;
((BattleStatistics) _int).round(_int);

Test 125: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);

Test 126: 
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
int _int = 3;
boolean _boolean = true;
int _int = 1118719;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, (CharacterClass) 3);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 1021;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, (Area) _boolean, true);
int _int = 0;
String string = "players";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "players";
String string = "0aYhp";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "0aYhp");
String string = "players";
String string = "0aYhp";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "0aYhp");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 127: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 28;
int _int = 28;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "M16";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 28;
String string = "John Doe";
String string = "f*hYu{`P-";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "f*hYu{`P-");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
((BattleStatistics)223).addAndResetRoundCounter(hashtable, hashtable);

Test 129: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
((BattleStatistics)35).hasMoved((Combatant) null, (Area) null);

Test 130: 
BattleStatistics battleStatistics = new BattleStatistics(10000, 0);
((BattleStatistics)10000).isAlive((Combatant) "myCombatant");

Test 131: 
BattleStatistics battleStatistics = new BattleStatistics(158, 0);
((BattleStatistics)158).isDead((Combatant) null);


* Generated after the refinement and before minimization 132 tests with total length 1437
* test suite isTestSuite: 132
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-429), "$Xh9muA(6,.'U", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.numberOfSchmierOil(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
battleStatistics.getHitsPerRound();
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
battleStatistics.getShotsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
battleStatistics.setRound(2443);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1625);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1625);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.combatantLifetime(simpleCombatant);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9oemuA(6?.'U", characterClass, simpleWeapon, "$wXh9oemuA(6?.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.setRound(2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
battleStatistics.setRound(3442);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfBayonets(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
battleStatistics.switchedPosList((CombatantSide) null);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHitDamage(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
battleStatistics.setRound(3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.turnOrder(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.getNotShootersPerRound();
Test 45: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
battleStatistics.critList(combatantSide);
Test 46: 
Point point = new Point((-1), 1351);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2490), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "d9g]4");
BattleStatistics battleStatistics = new BattleStatistics(279, 0);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 47: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1635);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "", characterClass, simpleWeapon, (String) null);
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHits(combatantSide);
Test 54: 
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451);
Point point = new Point(1, 2177);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, (String) null);
BattleStatistics battleStatistics = new BattleStatistics(1, 2177);
battleStatistics.isHit(simpleCombatant, (-2123), 2177);
battleStatistics.getFieldStatistics();
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
battleStatistics.round((-873.2884));
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
battleStatistics.round(1793);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1021, (Area) null, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-749), "players", characterClass, simpleWeapon, "0aYhp");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "now #paying", characterClass, simpleWeapon, "f*hYu{`P-");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);
Test 66: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 20);
SimpleSector simpleSector = new SimpleSector(200, false, true, 300, 40, true, 50, (CharacterClass) 20);
int _int = 1000;
int _int = 2000;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(30, 25);
((BattleStatistics)30).numberOfShinyOil((CombatantSide) null);

Test 68: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
((BattleStatistics)35).amountOfAttackBonus((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(75, 100);
((BattleStatistics)75).numberOfGraphitLubricants((CombatantSide) null);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).totalSwaps((CombatantSide) null);

Test 71: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 35, 35, (int) true, (boolean) 35, 35, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1), (Sector) _boolean);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "now playing";
int _int = 777;
int _int = 777;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "now playing";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
String string = "$Xh9muA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 72: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).getFieldStatistics();

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).numberOfFettesOil((CombatantSide) null);

Test 74: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).numberOfSchmierOil((CombatantSide) null);
int _int = 3;
int _int = 4;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfHipFlasks((CombatantSide) null);

Test 76: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
int _int = 2;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2;
String string = "Axe";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "Goliath";
String string = "Swordsman";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(3, 5);
((BattleStatistics)3).getHitsPerRound();

Test 78: 
BattleStatistics battleStatistics = new BattleStatistics(42, 42);
((BattleStatistics)42).criticalHits((CombatantSide) null);

Test 79: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Standard issue rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Attacking the enemy";
String string = "Attacking the enemy";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
int _int = 12;
boolean _boolean = true;
boolean _boolean = true;
int _int = 35;
int _int = 35;
boolean _boolean = true;
int _int = 35;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Powerful energy weapon";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Attacking the enemy";
String string = "Attacking the enemy";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 80: 
BattleStatistics battleStatistics = new BattleStatistics(500, 500);
((BattleStatistics)500).amountOfDefenseBonus((CombatantSide) null);

Test 81: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 50);
((BattleStatistics)1000).getShotsPerRound();

Test 82: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).setRound(3);
int _int = 4;
((BattleStatistics) _int).setRound(_int);
int _int = 5;
((BattleStatistics) _int).setRound(_int);

Test 83: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 5;
Point point = new Point(5, 8);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(1234, false, true, 0, 0, false, 0, (CharacterClass) 5);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Mithril Shortsword";
int _int = 2;
int _int = 3;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Master Yoda";
String string = "Jedi";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "m-:x@bC;l2");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 0;
((BattleStatistics) _int).setRound(_int);
int _int = 4783;
((BattleStatistics) _int).setRound(_int);

Test 84: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
((BattleStatistics)3614).setRound(3614);
int _int = 2495;
int _int = 1625;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 1625;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, 2411, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "The Mighty Sword of Light";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2411;
String string = "The Brave Dragon of Light";
String string = "The Mighty Shield of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 1625;
((BattleStatistics) _int).setRound(_int);

Test 85: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
int _int = 25;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Laser Pistol";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "John Doe";
String string = "Laser Pistol";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 86: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 5;
Point point = new Point(5, 10);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) 5);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "F-24";
int _int = 50;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "F-24";
String string = "F-24";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "m-:x@bC;l2");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 87: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
((BattleStatistics)3614).numberOfMovesPerPlayer((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 88: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
int _int = 500;
SimpleSector simpleSector = new SimpleSector(1000, false, false, 500, 500, false, 500, (CharacterClass) battleStatistics);
int _int = 1000;
int _int = 500;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 500;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 500;
String string = "The Shadow";
int _int = 500;
int _int = 500;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 500;
String string = "The Shadow";
String string = "The Shadow";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 89: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "M4A1";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "John Doe";
String string = "John Doe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 90: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
boolean _boolean = true;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 35, 35, true, 35, (CharacterClass) true);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, 35, (Sector) _boolean);
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) simpleSector, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, 35, "$wXh9emuA(6,.'U", (CharacterClass) _boolean, (Weapon) combatantState, "$wXh9emuA(6,.'U");
boolean _boolean = null;
battleStatistics.isOnline(simpleCombatant, _boolean);

Test 91: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(12, true, true, 10, 20, true, 10, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Warhammer of Gorm";
int _int = 10;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Gorm the Green";
String string = "Gorm the Green";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 92: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
String string = "$wXh9emuA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 93: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 10);
int _int = 10;
SimpleSector simpleSector = new SimpleSector(10, true, true, 10, 10, true, 10, (CharacterClass) battleStatistics);
int _int = 10;
int _int = 10;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "M4A1";
int _int = 10;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "M4A1";
String string = "M4A1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 94: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Desert Eagle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "Desert Eagle";
String string = "Desert Eagle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9oemuA(6?.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 95: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "$wXh9emuA(6,.'U";
String string = "$wXh9emuA(6,.'U";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 96: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
int _int = 25;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "Wooden Sword";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Alex";
String string = "Alex";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 97: 
int _int = 28;
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
boolean _boolean = false;
int _int = 28;
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 28, 28, (int) false, (boolean) 28, 28, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1), (Sector) _boolean);
int _int = 28;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 28;
String string = "Bastion";
int _int = 777;
int _int = 777;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2;
String string = "Bastion";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) battleStatistics, (Weapon) _int, (String) null);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);

Test 98: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
int _int = 25;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) battleStatistics);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "The Great Sword of Light";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Galahad";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 99: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).setRound(2);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 2;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 3442;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
String string = "Magic Sword";
int _int = 100;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Dark Lord";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);

Test 100: 
int _int = 25;
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, (CharacterClass) 25);
int _int = 25;
int _int = 25;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 25;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 25;
String string = "The Great Sword of Light";
int _int = 25;
int _int = 25;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 25;
String string = "Lord Commander Shepard";
String string = "The Great Sword of Light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "$wXh9emuA(6,.'U");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 101: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 2411, (-518), true, 2411, (CharacterClass) 2495);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Ak-47";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "Soldier";
String string = "Knife";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

Test 102: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, (CharacterClass) battleStatistics);
int _int = 35;
int _int = 35;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Gauss Rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 35;
String string = "Gauss Rifle";
String string = "Gauss Rifle";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "$wXh9emuA(6,.'U");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

Test 103: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 2411, (-518), true, 2411, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "M4A1";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "US Marine";
String string = "M4A1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);

Test 104: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
((BattleStatistics)1396).switchedPosList((CombatantSide) null);

Test 105: 
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
((BattleStatistics)2).criticalHitDamage((CombatantSide) null);
int _int = 5;
int _int = 7;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 106: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);

Test 107: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point(0, 0);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "m-:x@bC;l2";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "x&3c1!;n5<c4;Jx~");
int _int = 594;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 108: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
((BattleStatistics)3614).setRound(3614);
int _int = 2495;
int _int = 1610;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
boolean _boolean = true;
int _int = 2411;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, _int, (-518), true, 2411, (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "M16A2";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "US Army";
String string = "US Army";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 109: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).setRound(3);
int _int = 50;
int _int = 80;
Point point = new Point(_int, _int);
boolean _boolean = true;
boolean _boolean = true;
int _int = 3;
int _int = 2;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, true, (-929), (CharacterClass) arg7);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 80;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "(";
int _int = 3;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 80;
String string = "%q;$5Jir";
String string = "D)v6(Q+vN";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "D)v6(Q+vN");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 110: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).setRound(50);
((BattleStatistics) _int).getNotShootersPerRound();

Test 111: 
int _int = 4698;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
((BattleStatistics)4698).critList((CombatantSide) null);
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 112: 
Point point = new Point(1, 2);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(3, true, true, (int) true, 538, true, 538, (CharacterClass) 2);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "Test Weapon";
int _int = 1000;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1);
int _int = 10000;
String string = "Test Combatant";
String string = "d9g]4";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "d9g]4");
int _int = 279;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
((BattleStatistics) simpleArea).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) simpleArea).amountOfAttackBonus(combatantSide);

Test 113: 
int _int = 2;
int _int = 2;
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 2, 0, (int) false, (boolean) 2, 2, (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "M32 PDW";
int _int = 0;
int _int = 2681;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 2681);
int _int = 2681;
String string = "John Doe";
String string = "/Ph]X5ZMOGz^{|";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "/Ph]X5ZMOGz^{|");
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
((BattleStatistics) _boolean).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _boolean).amountOfAttackBonus(combatantSide);

Test 114: 
Point point = new Point(3597, 2495);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, (boolean) 1, 1, (int) true, true, (-929), (CharacterClass) true);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 2495;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1001;
String string = "Katana";
int _int = 3;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2495;
String string = "Fighter";
String string = "Dark Knight";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "D)v6(Q+vN");

Test 115: 
int _int = 3614;
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1635);
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) true, true, true, 2411, (-518), true, 2411, (CharacterClass) 2495);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 3614;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Fireball";
int _int = 2495;
int _int = 3614;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2411;
String string = "Warrior";
String string = "Axe";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#$d");
boolean _boolean = true;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 116: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).combatantLifetime((Combatant) null);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

Test 117: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 118: 
int _int = 1081;
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
Point point = new Point();
int _int = 67;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 0;
String string = "Energy Sword";
int _int = 50;
int _int = 20;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 274;
String string = "Gren";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) point, (Weapon) _int, (String) null);
int _int = 0;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 119: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "x&3c1!;n5<c4;Jx~");
int _int = 594;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

Test 120: 
int _int = 158;
int _int = 451;
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "Shining_Sword", 451, 451);
Point point = new Point(10, 2177);
int _int = 451;
SimpleSector simpleSector = new SimpleSector(451, true, true, 1, (int) true, (boolean) 2177, 2177, (CharacterClass) 451);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 451;
String string = "m(|~[FEy(iCul9iIL";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) _int, (Weapon) _int, (String) null);
int _int = 10;
int _int = 2177;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2177;
int _int = null;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 121: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
int _int = 0;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(123456789, true, true, 0, 0, true, 0, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "x&3c1!;n5<c4;Jx~";
int _int = 0;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 758;
String string = "";
String string = "x&3c1!;n5<c4;Jx~";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "x&3c1!;n5<c4;Jx~");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 122: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 12;
int _int = 12;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "Laser Rifle";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Alex";
String string = "Alex";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "now #paying");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 123: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
((BattleStatistics)1237).round((double) (Double) null);

Test 124: 
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(100, (-382));
((BattleStatistics)100).round(100);
int _int = null;
((BattleStatistics) _int).round(_int);
int _int = 30;
((BattleStatistics) _int).round(_int);

Test 125: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);

Test 126: 
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
int _int = 3;
boolean _boolean = true;
int _int = 1118719;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, (CharacterClass) 3);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 1021;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, (Area) _boolean, true);
int _int = 0;
String string = "players";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "players";
String string = "0aYhp";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "0aYhp");
String string = "players";
String string = "0aYhp";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "0aYhp");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 127: 
int _int = 35;
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
int _int = 35;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, (CharacterClass) battleStatistics);
int _int = 28;
int _int = 28;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 35;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 35;
String string = "M16";
int _int = 35;
int _int = 35;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 28;
String string = "John Doe";
String string = "f*hYu{`P-";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "f*hYu{`P-");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
((BattleStatistics)223).addAndResetRoundCounter(hashtable, hashtable);

Test 129: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
((BattleStatistics)35).hasMoved((Combatant) null, (Area) null);

Test 130: 
BattleStatistics battleStatistics = new BattleStatistics(10000, 0);
((BattleStatistics)10000).isAlive((Combatant) "myCombatant");

Test 131: 
BattleStatistics battleStatistics = new BattleStatistics(158, 0);
((BattleStatistics)158).isDead((Combatant) null);


* Minimizing test suite
* test suite isTestSuite: 66
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHits(combatantSide);
Test 2: 
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451);
Point point = new Point(1, 2177);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, (String) null);
BattleStatistics battleStatistics = new BattleStatistics(1, 2177);
battleStatistics.isHit(simpleCombatant, (-2123), 2177);
battleStatistics.getFieldStatistics();
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 11: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.numberOfSchmierOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
battleStatistics.getHitsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
battleStatistics.getShotsPerRound();
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
battleStatistics.setRound(2443);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1625);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1625);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.combatantLifetime(simpleCombatant);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9oemuA(6?.'U", characterClass, simpleWeapon, "$wXh9oemuA(6?.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.setRound(2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
battleStatistics.setRound(3442);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-429), "$Xh9muA(6,.'U", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfBayonets(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "now #paying", characterClass, simpleWeapon, "f*hYu{`P-");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
battleStatistics.switchedPosList((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHitDamage(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
battleStatistics.setRound(3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.turnOrder(combatantSide);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.getNotShootersPerRound();
Test 53: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
battleStatistics.critList(combatantSide);
Test 54: 
Point point = new Point((-1), 1351);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2490), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "d9g]4");
BattleStatistics battleStatistics = new BattleStatistics(279, 0);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 55: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1635);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "", characterClass, simpleWeapon, (String) null);
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
battleStatistics.round((-873.2884));
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
battleStatistics.round(1793);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1021, (Area) null, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-749), "players", characterClass, simpleWeapon, "0aYhp");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 65: 
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
// Undeclared exception!
try { 
  ((BattleStatistics)223).addAndResetRoundCounter(hashtable, hashtable);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 105
* Number of covered goals: 59
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Generated 66 tests with total length 476
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg2 = new SimpleSector((-3885), false, true, (-1), 0, true, 0, arg7);
SimpleArea arg1 = new SimpleArea(0, 0, arg2);
battleStatistics.newDestination((Combatant) null, arg1);
assertFalse(arg1.isOccupied());


** It was a parseable test case! 
refined test name is: testNewDestinationAreaNotOccupied
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0);
assertEquals(0, numberOfShinyOil);


** It was a parseable test case! 
refined test name is: testNumberOfShinyOilForAttackerSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsDeadWithNullArgument
* Compiling Tests
refined test name is: testIsDeadWithNullAsArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide arg0 = CombatantSide.DEFENDER;
int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0);
assertEquals(0, amountOfAttackBonus);


** It was a parseable test case! 
refined test name is: testAmountOfAttackBonusForDefenderWithNoAttackers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0);
assertEquals(0, numberOfGraphitLubricants);


** It was a parseable test case! 
refined test name is: testNumberOfGraphitLubricantsOnDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide arg0 = CombatantSide.ATTACKER;
int totalSwaps = battleStatistics.totalSwaps(arg0);
assertEquals(0, totalSwaps);


** It was a parseable test case! 
refined test name is: testTotalSwapsForAttackerSideWithUnitsOnBothSides
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics();
assertEquals(0, fieldStatistics.size());


** It was a parseable test case! 
refined test name is: testGetEmptyFieldStatistics
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0);
assertEquals(0, numberOfFettesOil);


** It was a parseable test case! 
refined test name is: testNumberOfFettesOilForAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0);
assertEquals(0, numberOfSchmierOil);


** It was a parseable test case! 
refined test name is: testNumberOfSchmierOilForAttackerWithTwoShips
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0);
assertEquals(0, numberOfHipFlasks);


** It was a parseable test case! 
refined test name is: testNumberOfHipFlasksForDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsAliveWithNullAttackerReturnsTrue
* Compiling Tests
refined test name is: testIsAliveWithNullAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(35, 35);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}


** It was a parseable test case! 
refined test name is: testHasMovedWithNullArea
* Compiling Tests
refined test name is: testMoveToAreaNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound();
assertEquals(2, hitsPerRound.size());


** It was a parseable test case! 
refined test name is: testGetHitsPerRoundTwoEntriesInMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide arg0 = CombatantSide.ATTACKER;
int criticalHits = battleStatistics.criticalHits(arg0);
assertEquals(0, criticalHits);


** It was a parseable test case! 
refined test name is: testCriticalHitsWhenAttackerPositionOutOfRange
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
int round = battleStatistics.round(0.0);
assertEquals(0, round);


** It was a parseable test case! 
refined test name is: testRoundWithValidArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide arg0 = CombatantSide.DEFENDER;
int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0);
assertEquals(0, amountOfDefenseBonus);


** It was a parseable test case! 
refined test name is: testAmountOfDefenseBonusForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound();
assertEquals(2, shotsPerRound.size());


** It was a parseable test case! 
refined test name is: testGetShotsPerRound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);

** It was a parseable test case! 
refined test name is: testUpdateRoundNumber
* Compiling Tests
refined test name is: testUpdateRoundNumber
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null);
assertEquals(0, combatantLifetime);


** It was a parseable test case! 
refined test name is: testCombatantLifetimeNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide arg0 = CombatantSide.DEFENDER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerForDefenderWithNoBattles
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null);
assertEquals(0, switchedPosList.size());


** It was a parseable test case! 
refined test name is: testGetSwitchedPosListNoFilter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide arg0 = CombatantSide.DEFENDER;
long criticalHitDamage = battleStatistics.criticalHitDamage(arg0);
assertEquals(0L, criticalHitDamage);


** It was a parseable test case! 
refined test name is: testCriticalHitDamageWithDefenderAsArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null);
assertTrue(critList.isEmpty());


** It was a parseable test case! 
refined test name is: testBattleStatisticsCritListWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound();
assertEquals(2, notShootersPerRound.size());


** It was a parseable test case! 
refined test name is: testGetNotShootersPerRoundSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
List<CriticalHit> critList = battleStatistics.critList(arg0);
assertEquals(0, critList.size());


** It was a parseable test case! 
refined test name is: testNoCriticalHitsForAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
int countWeaponMods = battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);
assertEquals(0, countWeaponMods);


** It was a parseable test case! 
refined test name is: testCountWeaponModsWithNullValuesShouldReturnZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
int round = battleStatistics.round((-873.2884));
assertEquals((-873), round);


** It was a parseable test case! 
refined test name is: testRoundMethodNegativeInputParameter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
int round = battleStatistics.round(1793);
assertEquals(1793, round);


** It was a parseable test case! 
refined test name is: testGetRoundNumber
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:29.894 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:29.918 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.011 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:05:30.065 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.066 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.158 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.298 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.299 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.490 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.491 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.824 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.826 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:30.960 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:30.961 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:31.066 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:31.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:05:31.225 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:31.226 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:05:31.400 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 17:05:31.401 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:31.543 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:31.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
[MASTER] 17:05:31.610 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:31.611 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:31.897 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:31.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:32.276 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:32.489 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:05:32.586 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.587 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:32.661 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:32.722 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.724 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:32.829 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.836 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:32.906 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:32.916 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:33.018 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:33.114 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:33.195 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:33.275 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:33.334 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:05:33.402 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.403 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 17 called: 3 to improve: false
[MASTER] 17:05:33.828 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:33.829 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 10 called: 0 to improve: false
** Write a test suite: 16 called: 1 to improve: false
** Write a test suite: 17 called: 2 to improve: false
** Write a test suite: 25 called: 3 to improve: false
[MASTER] 17:05:34.177 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:05:34.178 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
[MASTER] 17:05:34.794 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 66
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-429), "$Xh9muA(6,.'U", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.numberOfSchmierOil(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
battleStatistics.getHitsPerRound();
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
battleStatistics.getShotsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
battleStatistics.setRound(2443);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1625);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1625);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.combatantLifetime(simpleCombatant);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9oemuA(6?.'U", characterClass, simpleWeapon, "$wXh9oemuA(6?.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.setRound(2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
battleStatistics.setRound(3442);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfBayonets(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
battleStatistics.switchedPosList((CombatantSide) null);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHitDamage(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
battleStatistics.setRound(3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.turnOrder(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.getNotShootersPerRound();
Test 45: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
battleStatistics.critList(combatantSide);
Test 46: 
Point point = new Point((-1), 1351);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2490), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "d9g]4");
BattleStatistics battleStatistics = new BattleStatistics(279, 0);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 47: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1635);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "", characterClass, simpleWeapon, (String) null);
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHits(combatantSide);
Test 54: 
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451);
Point point = new Point(1, 2177);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, (String) null);
BattleStatistics battleStatistics = new BattleStatistics(1, 2177);
battleStatistics.isHit(simpleCombatant, (-2123), 2177);
battleStatistics.getFieldStatistics();
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
battleStatistics.round((-873.2884));
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
battleStatistics.round(1793);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1021, (Area) null, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-749), "players", characterClass, simpleWeapon, "0aYhp");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "now #paying", characterClass, simpleWeapon, "f*hYu{`P-");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);

* Minimizing test suite
[MASTER] 17:05:49.973 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 66
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-3885), false, true, (-1), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHits(combatantSide);
Test 2: 
SimpleWeapon simpleWeapon = new SimpleWeapon(158, "", 451, 451);
Point point = new Point(1, 2177);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(451, true, true, (-213), 1, true, 2177, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1, simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 451, "m(|~[FEy(iCul9iIL", characterClass, simpleWeapon, (String) null);
BattleStatistics battleStatistics = new BattleStatistics(1, 2177);
battleStatistics.isHit(simpleCombatant, (-2123), 2177);
battleStatistics.getFieldStatistics();
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(158, (-1));
battleStatistics.isDead((Combatant) null);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(28, 28);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 28, 28, false, 28, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 28, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(28, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 11: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.numberOfSchmierOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics((-14), (-14));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(1159, 0);
battleStatistics.isAlive((Combatant) null);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-4), (-4));
battleStatistics.getHitsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics((-75), (-75));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-3338), (-3338));
battleStatistics.round(0.0);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics((-1367), (-1367));
battleStatistics.getShotsPerRound();
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
battleStatistics.setRound(20);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(0);
battleStatistics.setRound(2443);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1625);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, 1625, (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.setRound(1625);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.combatantLifetime(simpleCombatant);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "m-:x@bC;l2", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-2512), "m-:x@bC;l2", characterClass, simpleWeapon, "m-:x@bC;l2");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfOffliners(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(2, false, false, 2, 2, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(2, "", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.averageRoundsOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9oemuA(6?.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9oemuA(6?.'U", characterClass, simpleWeapon, "$wXh9oemuA(6?.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.isOnline(simpleCombatant, true);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
battleStatistics.setRound(2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2, simpleArea, true);
battleStatistics.setRound(3442);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "");
battleStatistics.isOnline(simpleCombatant, true);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(25, 25);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(25, true, true, 25, 25, true, 25, characterClass);
SimpleArea simpleArea = new SimpleArea(25, 25, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 25, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(25, "$wXh9emuA(6,.'U", 25, 25);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 25, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-1), true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea((-1), (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now playing", 777, 777);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "now playing", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-429), "$Xh9muA(6,.'U", characterClass, simpleWeapon, (String) null);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(35, false, false, 35, 35, false, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(35, 35, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "$wXh9emuA(6,.'U", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 35, "$wXh9emuA(6,.'U", characterClass, simpleWeapon, "$wXh9emuA(6,.'U");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.numberOfBayonets(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
// Undeclared exception!
try { 
  battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(28, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(28, 28, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 28, "now #paying", characterClass, simpleWeapon, "f*hYu{`P-");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(1396, 1396);
battleStatistics.switchedPosList((CombatantSide) null);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics((-2877), (-2877));
battleStatistics.critList((CombatantSide) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "m-:x@bC;l2", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 594);
battleStatistics.criticalHitDamage(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
battleStatistics.setRound(3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.turnOrder(combatantSide);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
battleStatistics.setRound(3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1610);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 2495, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.turnOrder(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(20, 20);
battleStatistics.setRound(20);
battleStatistics.getNotShootersPerRound();
Test 53: 
CombatantSide combatantSide = CombatantSide.ATTACKER;
BattleStatistics battleStatistics = new BattleStatistics(4698, 4698);
battleStatistics.critList(combatantSide);
Test 54: 
Point point = new Point((-1), 1351);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1), true, true, (-1), (-3651), true, 538, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2490), simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "", characterClass, simpleWeapon, "d9g]4");
BattleStatistics battleStatistics = new BattleStatistics(279, 0);
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 55: 
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-1), false, false, 2, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1), "", 0, 2681);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2681, "", characterClass, simpleWeapon, "/Ph]X5ZMOGz^{|");
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(3597, 3597);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(3597, 2495);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-4379), true, true, 1, 1, true, (-929), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2495, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(3597, "(", 3, 3597);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2495, "%q;$5Jir", characterClass, simpleWeapon, "D)v6(Q+vN");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(3614, 3614);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(2495, 1635);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector((-2436), true, true, (-1492), (-518), true, 2411, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3614, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#$d", 2495, 3614);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2411, "#$d", characterClass, simpleWeapon, "#$d");
battleStatistics.isOnline(simpleCombatant, true);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics((-2001), (-1));
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter = new WeaponModCounter.FettesOilCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_FettesOilCounter);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(1081, 5627);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(5627, true, false, 67, 0, false, 1081, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 274, "", characterClass, simpleWeapon, (String) null);
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "x&3c1!;n5<c4;Jx~", 0, 1);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 758, "", characterClass, simpleWeapon, "x&3c1!;n5<c4;Jx~");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(35, 35);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(12, true, true, 35, 35, true, 35, characterClass);
SimpleArea simpleArea = new SimpleArea(12, 12, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 35, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(35, "now #paying", 35, 35);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "now #paying", characterClass, simpleWeapon, "now #paying");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(1237, 1237);
battleStatistics.round((-873.2884));
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(1793, (-382));
battleStatistics.round(1793);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(3, true, true, 0, 1118719, false, 1118719, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1021, (Area) null, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "players", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-749), "players", characterClass, simpleWeapon, "0aYhp");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(223, (-4848));
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
Hashtable<CombatantSide, RoundStatistics> hashtable = new Hashtable<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashtable);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 105
* Number of covered goals: 59
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 156
* Number of covered goals: 139
* Generated 66 tests with total length 480
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:05:50.255 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 62%
[MASTER] 17:06:01.093 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:06.747 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:06.748 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:06.831 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:06.833 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:06.895 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:06.897 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:06.959 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:06.960 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.029 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.030 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.118 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.119 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.180 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.247 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.248 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.309 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.310 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.378 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.444 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.444 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.538 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.539 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.620 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.622 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.699 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.700 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.771 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.772 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.843 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.845 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.921 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:07.998 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:07.999 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.074 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.075 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.157 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.247 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.248 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.320 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.321 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.395 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.396 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.477 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.554 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.652 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.653 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.734 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:08.735 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:08.998 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:09.001 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:06:09.115 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:09.116 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
[MASTER] 17:06:09.458 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:09.459 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
[MASTER] 17:06:09.759 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar9005439165055769250.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:06:09.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar9005439165055769250.jar
* Writing tests to file
[MASTER] 17:06:09.768 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'BattleStatistics_ESTest' to evosuite-tests
** Write a test suite: 10 called: 0 to improve: false
** Write a test suite: 16 called: 1 to improve: false
** Write a test suite: 17 called: 2 to improve: false
** Write a test suite: 25 called: 3 to improve: false
* Writing JUnit test case 'BattleStatistics_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
* Done!

* Computation finished
