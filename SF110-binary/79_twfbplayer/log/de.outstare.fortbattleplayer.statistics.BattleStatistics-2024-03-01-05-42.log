* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.statistics.BattleStatistics
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 7345
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:42:33.448 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:42:33.454 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:42:33.455 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:42:33.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntBinaryOperator
[MASTER] 05:42:33.484 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntUnaryOperator
[MASTER] 05:42:33.514 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 05:42:33.515 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 05:42:33.516 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 05:42:35.126 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.statistics.BattleStatistics
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 693
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709271751793
* Starting evolution
* Initial Number of Goals in DynaMOSA = 327 / 693
[MASTER] 05:42:35.877 [logback-1] WARN  TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 05:42:35.877 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 05:42:36.059 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 05:42:37.158 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:>                             1%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:=>                            4%] [Cov:===================>               57%][Progress:=>                            4%] [Cov:===================>               57%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:=====================>             61%][Progress:=>                            6%] [Cov:=====================>             62%][Progress:=>                            6%] [Cov:======================>            64%][Progress:=>                            6%] [Cov:======================>            64%][Progress:=>                            6%] [Cov:======================>            64%][Progress:==>                           7%] [Cov:======================>            64%][Progress:==>                           7%] [Cov:======================>            64%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:=======================>           66%][Progress:==>                           8%] [Cov:=======================>           67%][Progress:==>                           9%] [Cov:=======================>           68%][Progress:==>                           9%] [Cov:=======================>           68%][Progress:==>                           9%] [Cov:=======================>           68%][Progress:==>                           9%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          71%][Progress:===>                          11%] [Cov:========================>          71%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         74%][Progress:===>                          12%] [Cov:=========================>         74%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        19%] [Cov:============================>      81%][Progress:=====>                        19%] [Cov:============================>      81%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             54%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:================>             56%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            57%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:=================>            59%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           60%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:==================>           63%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          64%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:===================>          66%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:====================>         69%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        71%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        72%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       74%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      77%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   87%] [Cov:=============================>     85%][MASTER] 05:44:03.528 [logback-1] WARN  TestCluster - Failed to check cache for javax.swing.RowFilter<M, I>.ComparisonType : Type points to itself
[Progress:==========================>   87%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 94%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:=============================>99%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%]
* Search finished after 104s and 291 generations, 193121 statements, best individual has fitness: 95.0
* Generated before the refinement 65 tests with total length 453
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfBayonets = battleStatistics.numberOfBayonets(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfBayonets(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfBayonets(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfBayonets(combatantSide) target is: battleStatistics method is: numberOfBayonets(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfBayonets(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, true, (-2379), 0, true, (-5039), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(483, 0, arg2)
statement is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.newDestination((Combatant) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-2379), 0, true, (-5039), characterClass);
SimpleArea simpleArea = new SimpleArea(483, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(-2379, false, true, -5039, 0, true, 483, characterClass);
        SimpleArea simpleArea = new SimpleArea(483, 0, simpleSector);
        battleStatistics.newDestination(((Combatant) (null)), simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-2379, false, true, -5039, 0, true, 483, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(483, 0, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.newDestination(((Combatant) (null)), simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.newDestination(((Combatant) (null)), simpleArea) target is: battleStatistics method is: newDestination(Combatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 483;
int _int = 1661;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = false;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 483;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, true, (-5039), (CharacterClass) _int);
int _int = 483;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3571)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfShinyOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1234, 5678), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfAttackBonus(combatantSide);
        // Improved test data:
        // The values of the variables are more descriptive and representative of the situation being tested.
        int attackerRoll = 12;
        int defenderRoll = 8;
        CombatantSide attackerSide = CombatantSide.ATTACKER;
        CombatantSide defenderSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfAttackBonus(attackerSide);
        // The test data is more descriptive and representative of the situation being tested, making it easier to understand and debug the code. }}
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
// The values of the variables are more descriptive and representative of the situation being tested.
int attackerRoll = 12, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int defenderRoll = 8, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: CombatantSide attackerSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CombatantSide defenderSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfAttackBonus(attackerSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(attackerSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // The test data is more descriptive and representative of the situation being tested, making it easier to understand and debug the code. }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 12
* this is vulnerable: int _int = 8
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);
int _int = 12;
int _int = 8;
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfGraphitLubricants(combatantSide);
        // Change the value of "attacker" to a more realistic value
        int attacker = 8;
        battleStatistics.numberOfGraphitLubricants(ATTACKER);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfGraphitLubricants(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(combatantSide) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Change the value of "attacker" to a more realistic value
int attacker = 8, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: battleStatistics.numberOfGraphitLubricants(ATTACKER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(ATTACKER) target is: battleStatistics method is: numberOfGraphitLubricants()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: int _int = 8
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);
int _int = 8;
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2))
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(5, 10);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(5, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 5;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 5000);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 5000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 1000;
int _int = 5000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(30, 30)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(30, 30);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfFettesOil(combatantSide);
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(25, 30);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfFettesOil(combatantSide);
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(35, 20);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfFettesOil(combatantSide);
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(40, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfFettesOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(30, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(25, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(35, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 12
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(40, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 17
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 30;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 25;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 35;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 40;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfSchmierOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfSchmierOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfSchmierOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(combatantSide) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: getHitsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.getHitsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(69, 420);
        battleStatistics.getHitsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(69, 420), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getHitsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getHitsPerRound() target is: battleStatistics method is: getHitsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getHitsPerRound()Ljava/util/Map;
TestCase is: int _int = 69;
int _int = 420;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getHitsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(20, 15);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(20, 15), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 20;
int _int = 15;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3580, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2236, ", target=", arg4, (Weapon) null, "BGAKrVn:<,e-_,'")
statement is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.aimAt(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'");
        simpleCombatant.aimAt(simpleCombatant);
        simpleArea.free();
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.aimAt(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.aimAt(simpleCombatant) target is: simpleCombatant method is: aimAt(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2236;
boolean _boolean = false;
boolean _boolean = false;
int _int = 3580;
int _int = 3580;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 3580;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        int expectedResult = 175;
        int actualResult = battleStatistics.amountOfDefenseBonus(combatantSide);
        assertEquals(expectedResult, actualResult);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: int expectedResult = 175, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int actualResult = battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: assertEquals(expectedResult, actualResult), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, actualResult) target is:  method is: assertEquals(int,int)
* this is vulnerable: int _int = 175
TestCase is: int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 175;
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3571)
statement is: getShotsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
battleStatistics.getShotsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(5000, 7000);
        battleStatistics.getShotsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(5000, 7000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getShotsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getShotsPerRound() target is: battleStatistics method is: getShotsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getShotsPerRound()Ljava/util/Map;
TestCase is: int _int = 5000;
int _int = 7000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getShotsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        battleStatistics.setRound(2);
        battleStatistics.setRound(3);
        battleStatistics.setRound(4);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
((BattleStatistics) _int).setRound(_int);
int _int = 3;
((BattleStatistics) _int).setRound(_int);
int _int = 4;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3580, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2236, ", target=", arg4, (Weapon) null, "BGAKrVn:<,e-_,'")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3580)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-1799))
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3580);
battleStatistics.setRound((-1799));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1234, false, false, 5678, 5678, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(5678, 1234, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1234, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'");
        simpleArea.free();
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.setRound(5678);
        battleStatistics.setRound(-321);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1234, 5678), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1234, false, false, 5678, 5678, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(5678, 1234, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1234, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.setRound(5678), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(5678) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(-321), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-321) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1234;
boolean _boolean = false;
boolean _boolean = false;
int _int = 5678;
int _int = 5678;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 5678;
int _int = 1234;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 5678;
((BattleStatistics) _int).setRound(_int);
int _int = null;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-40))
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-40), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 50, "^S", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(1037)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
battleStatistics.setRound((-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(1037);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-40, -40);
        battleStatistics.setRound(-40);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-40, "^S", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(1927, 1927);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, -40, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -40, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.setRound(1037);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-40, -40), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(-40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-40) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-40, "^S", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(1927, 1927), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, -40, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -40, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 9, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.setRound(1037), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1037) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: setRound(I)V
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
int _int = null;
battleStatistics.setRound(_int);
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1);
int _int = 1927;
int _int = 1927;
Point point = new Point(_int, _int);
int _int = 1927;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 1927;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-40), (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "^S";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) arg5, "");
((SimpleCombatant) point).addObserver(battleStatistics);
int _int = 1037;
battleStatistics.setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1927, "", arg4, arg5, "^S")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1927, "", characterClass, simpleWeapon, "^S");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(1927, 1927);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1927, "", characterClass, simpleWeapon, "^S");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(1927, 1927), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1927, "", characterClass, simpleWeapon, "^S"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1001;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1927;
int _int = 1927;
Point point = new Point(_int, _int);
int _int = 1927;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 1927;
boolean _boolean = false;
int _int = 1001;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) string);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1927;
String string = "";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, (-1), false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, (-1), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2100, ", target=", arg4, (Weapon) null, ", target=")
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1000, true, false, 0, -1, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, -1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1500, ", target=", characterClass, ((Weapon) (null)), ", target=");
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1000, true, false, 0, -1, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1500, ", target=", characterClass, ((Weapon) (null)), ", target="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1000;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 2, (CharacterClass) _int);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 1500;
String string = ", target=";
String string = ", target=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, ", target=");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(3, 3);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(3, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 3;
int _int = 3;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-2387), "K!,M`SK(4}I9iK", 2, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 3708, "K!,M`SK(4}I9iK", arg4, arg5, "K!,M`SK(4}I9iK")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon((-2387), "K!,M`SK(4}I9iK", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3708, "K!,M`SK(4}I9iK", characterClass, simpleWeapon, "K!,M`SK(4}I9iK");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2100, ", target=", arg4, (Weapon) null, ", target=")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "target=", characterClass, ((Weapon) (null)), "target=");
        simpleArea.free();
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "target=", characterClass, ((Weapon) (null)), "target="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2236;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2100;
String string = "target=";
String string = "target=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, ", target=");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2236, ", target=", arg4, (Weapon) null, "BGAKrVn:<,e-_,'")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(1234, true, false, 0, 0, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 1234, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1234, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'");
        simpleArea.free();
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1234, 5678), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1234, true, false, 0, 0, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 1234, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1234, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1234;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 1234;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, arg1, 0, "^S", arg4, arg5, "^S")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfHipFlasks((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfHipFlasks(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(((CombatantSide) (null)), combatantState, 0, "^S", characterClass, simpleWeapon, "^S"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 26
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfHipFlasks(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(((CombatantSide) (null))) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
String string = "^S";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
int _int = 20;
Point point = new Point(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 46, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "e", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
        CharacterClass characterClass = CharacterClass.REDHORN;
        SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 2512, 7287);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.REDHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.REDHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 2512, 7287), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2512;
boolean _boolean = false;
boolean _boolean = false;
int _int = 953;
int _int = 2;
boolean _boolean = false;
int _int = 2512;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 46, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "e", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 2512, 7287);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 2512, 7287), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2512;
boolean _boolean = false;
boolean _boolean = false;
int _int = 953;
int _int = 2;
boolean _boolean = false;
int _int = 2512;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 3580, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1050), arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "v`7{ MQVf'iLpOB", arg4, (Weapon) null, "v`7{ MQVf'iLpOB")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 3580, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1050), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "v`7{ MQVf'iLpOB", characterClass, (Weapon) null, "v`7{ MQVf'iLpOB");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 3580, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1050, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "v`7{ MQVf'iLpOB", characterClass, ((Weapon) (null)), "v`7{ MQVf'iLpOB");
        simpleArea.free();
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 3580, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1050, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "v`7{ MQVf'iLpOB", characterClass, ((Weapon) (null)), "v`7{ MQVf'iLpOB"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 19
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2236;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 1;
int _int = 3580;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "v`7{ MQVf'iLpOB";
String string = "v`7{ MQVf'iLpOB";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "v`7{ MQVf'iLpOB");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(50, 1023, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 50, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 8, "^S", arg4, arg5, "^S")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1001;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1927;
int _int = 1001;
boolean _boolean = false;
int _int = 1023;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 50;
int _int = 1023;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 8;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1944, 1944)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1944, false, false, 1944, 1944, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "^S", arg4, arg5, "^S")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 1944, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1000, "^S", 100.0, 50000);
        Point point = new Point(23456789, 987654321);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(23456789, false, false, 987654321, 23456789, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "^S", characterClass, simpleWeapon, "^S");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1000, "^S", 100.0, 50000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(23456789, 987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(23456789, false, false, 987654321, 23456789, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "^S", characterClass, simpleWeapon, "^S"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 26
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1000;
String string = "^S";
double _double = 100.0;
int _int = 50000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, _int);
int _int = 23456789;
int _int = 987654321;
Point point = new Point(_int, _int);
int _int = 23456789;
boolean _boolean = false;
boolean _boolean = false;
int _int = 987654321;
int _int = 23456789;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "^S", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.averageRoundsOnline(combatantSide);// This should return 0, as there are no rounds spent online for this combatant side

        battleStatistics = new BattleStatistics(5, 10);
        combatantSide = CombatantSide.ATTACKER;
        battleStatistics.averageRoundsOnline(combatantSide);// This should return 2, as there are 5 rounds spent online for the attacker side and a total of 10 rounds for this combatant side

        battleStatistics = new BattleStatistics(15, 20);
        combatantSide = CombatantSide.DEFENDER;
        battleStatistics.averageRoundsOnline(combatantSide);// This should return 3, as there are 15 rounds spent online for the defender side and a total of 20 rounds for this combatant side }}

    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.averageRoundsOnline(combatantSide)// This should return 0, as there are no rounds spent online for this combatant side
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide)// This should return 0, as there are no rounds spent online for this combatant side
 target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics = new BattleStatistics(5, 10), class spoon.support.reflect.code.CtAssignmentImpl
statement is: combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtAssignmentImpl
statement is: battleStatistics.averageRoundsOnline(combatantSide)// This should return 2, as there are 5 rounds spent online for the attacker side and a total of 10 rounds for this combatant side
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide)// This should return 2, as there are 5 rounds spent online for the attacker side and a total of 10 rounds for this combatant side
 target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics = new BattleStatistics(15, 20), class spoon.support.reflect.code.CtAssignmentImpl
statement is: combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtAssignmentImpl
statement is: battleStatistics.averageRoundsOnline(combatantSide)// This should return 3, as there are 15 rounds spent online for the defender side and a total of 20 rounds for this combatant side }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide)// This should return 3, as there are 15 rounds spent online for the defender side and a total of 20 rounds for this combatant side }}
 target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "^S", arg4, arg5, "")
statement is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.aimAt(arg0)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.aimAt(simpleCombatant);
simpleCombatant.addObserver(battleStatistics);
simpleCombatant.addObserver(battleStatistics);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1234567890, "^S", 1.1, "A very descriptive weapon name");
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(987654321, 987654321);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(987654321, false, true, "A very descriptive sector name", 50, 987654321, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1.23456789, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "A very descriptive name", "^S", characterClass, simpleWeapon, "A very descriptive weapon description");
        simpleCombatant.aimAt(simpleCombatant);
        simpleCombatant.addObserver(battleStatistics);
        simpleCombatant.addObserver(battleStatistics);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1234567890, "^S", 1.1, "A very descriptive weapon name"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(987654321, 987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(987654321, false, true, "A very descriptive sector name", 50, 987654321, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1.23456789, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "A very descriptive name", "^S", characterClass, simpleWeapon, "A very descriptive weapon description"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.aimAt(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.aimAt(simpleCombatant) target is: simpleCombatant method is: aimAt(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 18
Matched Method is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 18
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 18
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 18
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 18
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1234567890;
String string = "^S";
double _double = 1.1;
String string = "A very descriptive weapon name";
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, (int) string);
int _int = 987654321;
int _int = 987654321;
Point point = new Point(_int, _int);
SimpleArea simpleArea = new SimpleArea(point, (Sector) _double);
double _double = 1.23456789;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) _double, simpleArea, _boolean);
String string = "A very descriptive name";
String string = "^S";
String string = "A very descriptive weapon description";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleCombatant) _int).addObserver(battleStatistics);
((SimpleCombatant) _int).addObserver(battleStatistics);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(449)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1944, 1944)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1944, false, false, 52, 1944, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "^S", arg4, arg5, "^S")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(449);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 52, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.setRound(0);
        battleStatistics.setRound(449);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 123456789, 0);
        Point point = new Point(987654321, 987654321);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(987654321, false, false, 52, 987654321, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
        simpleCombatant.addObserver(battleStatistics);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(0) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(449), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(449) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 123456789, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(987654321, 987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(987654321, false, false, 52, 987654321, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 10, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 30
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
((BattleStatistics) _int).setRound(_int);
int _int = 449;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
String string = "^S";
int _int = 123456789;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
int _int = 987654321;
Point point = new Point(_int, _int);
int _int = 987654321;
boolean _boolean = false;
boolean _boolean = false;
int _int = 52;
int _int = 987654321;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3580, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2236, ", target=", arg4, (Weapon) null, "BGAKrVn:<,e-_,'")
statement is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.aimAt(arg0)
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
        CharacterClass characterClass = CharacterClass.SOLDIER;// This is an example of a more descriptive and representative test data for the CharacterClass variable. The CharacterClass enum has several values that could be used to test different scenarios, such as SOLDIER, WARRIOR, or ROGUE.

        SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);// This is an example of a more descriptive and representative test data for the simpleSector variable. The constructor takes several primitive values and a CharacterClass enum as arguments, which could be used to create different scenarios with different characteristics.

        SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);// This is an example of a more descriptive and representative test data for the simpleArea variable. The constructor takes several primitive values and a SimpleSector object as arguments, which could be used to create different scenarios with different characteristics.

        CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);// This is an example of a more descriptive and representative test data for the combatantState variable. The constructor takes several primitive values and two SimpleArea objects as arguments, which could be used to create different scenarios with different characteristics.

        CombatantSide combatantSide = CombatantSide.ATTACKER;// This is an example of a more descriptive and representative test data for the combatantSide variable. The CombatantSide enum has several values that could be used to test different scenarios, such as ATTACKER or DEFENDER.

        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'");// This is an example of a more descriptive and representative test data for the simpleCombatant variable. The constructor takes several primitive values and a CharacterClass object as arguments, which could be used to create different scenarios with different characteristics.

        simpleCombatant.aimAt(simpleCombatant);// This is an example of a more descriptive and representative test data for the aimAt method call. The aimAt method takes one SimpleCombatant object as argument, which could be used to test different scenarios with different characteristics.

        simpleArea.free();// This is an example of a more descriptive and representative test data for the free method call. The free method does not take any arguments, but it could be used to test different scenarios where memory management needs to be tested.

        simpleCombatant.addObserver(battleStatistics);// This is an example of a more descriptive and representative test data for the addObserver method call. The addObserver method takes one BattleStatistics object as argument, which could be used to test different scenarios with different characteristics.

        battleStatistics.targetNoOne(combatantSide);// This is an example of a more descriptive and representative test data for the targetNoOne method call. The targetNoOne method takes one CombatantSide enum value as argument, which could be used to test different scenarios with different characteristics. }}

    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER// This is an example of a more descriptive and representative test data for the CharacterClass variable. The CharacterClass enum has several values that could be used to test different scenarios, such as SOLDIER, WARRIOR, or ROGUE.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass)// This is an example of a more descriptive and representative test data for the simpleSector variable. The constructor takes several primitive values and a CharacterClass enum as arguments, which could be used to create different scenarios with different characteristics.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector)// This is an example of a more descriptive and representative test data for the simpleArea variable. The constructor takes several primitive values and a SimpleSector object as arguments, which could be used to create different scenarios with different characteristics.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false)// This is an example of a more descriptive and representative test data for the combatantState variable. The constructor takes several primitive values and two SimpleArea objects as arguments, which could be used to create different scenarios with different characteristics.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER// This is an example of a more descriptive and representative test data for the combatantSide variable. The CombatantSide enum has several values that could be used to test different scenarios, such as ATTACKER or DEFENDER.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'")// This is an example of a more descriptive and representative test data for the simpleCombatant variable. The constructor takes several primitive values and a CharacterClass object as arguments, which could be used to create different scenarios with different characteristics.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.aimAt(simpleCombatant)// This is an example of a more descriptive and representative test data for the aimAt method call. The aimAt method takes one SimpleCombatant object as argument, which could be used to test different scenarios with different characteristics.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.aimAt(simpleCombatant)// This is an example of a more descriptive and representative test data for the aimAt method call. The aimAt method takes one SimpleCombatant object as argument, which could be used to test different scenarios with different characteristics.
 target is: simpleCombatant method is: aimAt(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: aimAt(Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: simpleArea.free()// This is an example of a more descriptive and representative test data for the free method call. The free method does not take any arguments, but it could be used to test different scenarios where memory management needs to be tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free()// This is an example of a more descriptive and representative test data for the free method call. The free method does not take any arguments, but it could be used to test different scenarios where memory management needs to be tested.
 target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: simpleCombatant.addObserver(battleStatistics)// This is an example of a more descriptive and representative test data for the addObserver method call. The addObserver method takes one BattleStatistics object as argument, which could be used to test different scenarios with different characteristics.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics)// This is an example of a more descriptive and representative test data for the addObserver method call. The addObserver method takes one BattleStatistics object as argument, which could be used to test different scenarios with different characteristics.
 target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.targetNoOne(combatantSide)// This is an example of a more descriptive and representative test data for the targetNoOne method call. The targetNoOne method takes one CombatantSide enum value as argument, which could be used to test different scenarios with different characteristics. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide)// This is an example of a more descriptive and representative test data for the targetNoOne method call. The targetNoOne method takes one CombatantSide enum value as argument, which could be used to test different scenarios with different characteristics. }}
 target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2236;
boolean _boolean = false;
boolean _boolean = false;
int _int = 3580;
int _int = 3580;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 3580;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (-165), false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-165), "Rte|hD#;?<iu?i", arg4, arg5, "")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (-165), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-165), "Rte|hD#;?<iu?i", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(0, 0);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 30, -165, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -165, "Rte|hD#;?<iu?i", characterClass, simpleWeapon, "");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 30, -165, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -165, "Rte|hD#;?<iu?i", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
int _int = 0;
Point point = new Point(_int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 30;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 2, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Rte|hD#;?<iu?i";
int _int = 0;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Rte|hD#;?<iu?i";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(3580, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2236, ", target=", arg4, (Weapon) null, "BGAKrVn:<,e-_,'")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector("startX", "startY", false, false, "width", "height", false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea("width", "height", simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, "startX", simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "startX", ", target=", characterClass, ((Weapon) (null)), "soldierName");
        simpleArea.free();
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        simpleCombatant.addObserver(battleStatistics);
        int numberOfLoadingChamerOrEnhancedPatrons = 10;
        battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide, numberOfLoadingChamerOrEnhancedPatrons);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector("startX", "startY", false, false, "width", "height", false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea("width", "height", simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, "startX", simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "startX", ", target=", characterClass, ((Weapon) (null)), "soldierName"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 5
Matched Method is: free()V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 12
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: int numberOfLoadingChamerOrEnhancedPatrons = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide, numberOfLoadingChamerOrEnhancedPatrons), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide, numberOfLoadingChamerOrEnhancedPatrons) target is: battleStatistics method is: numberOfLoadingChamerOrEnhancedPatrons(CombatantSide,int)
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
String string = "width";
String string = "height";
SimpleArea simpleArea = new SimpleArea((int) string, (int) string, (Sector) battleStatistics);
String string = "startX";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
String string = "startX";
String string = ", target=";
String string = "soldierName";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) string).free();
((SimpleCombatant) string).addObserver(battleStatistics);
int _int = 10;

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13))
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-13), true, true, (-13), (-21), true, (-13), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-13), (-21), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-13), arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-21), "M$~mEy&Q?K[!fH;VvT/p", arg4, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-13), true, true, (-13), (-21), true, (-13), characterClass);
SimpleArea simpleArea = new SimpleArea((-13), (-21), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-13), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-21), "M$~mEy&Q?K[!fH;VvT/p", characterClass, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(100, true, true, 200, 300, true, 100, characterClass);
        SimpleArea simpleArea = new SimpleArea(100, 300, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 200, "Warrior-1", characterClass, ((Weapon) (null)), "Warrior-1");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.switchedPosList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(100, true, true, 200, 300, true, 100, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(100, 300, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 200, "Warrior-1", characterClass, ((Weapon) (null)), "Warrior-1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 100;
boolean _boolean = true;
boolean _boolean = true;
int _int = 200;
int _int = 300;
boolean _boolean = true;
int _int = 100;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 100;
int _int = 300;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 200;
String string = "Warrior-1";
String string = "Warrior-1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
        battleStatistics.switchedPosList(combatantSide);
        // Improved test data:
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
        battleStatistics.switchedPosList(combatantSide);
        // Switching the pos list for a defender in a battle with ID 953 and statistics of 2512 is a common scenario. This test data will help to ensure that the method is working correctly when switching the position list for a defender in this situation. }}
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Switching the pos list for a defender in a battle with ID 953 and statistics of 2512 is a common scenario. This test data will help to ensure that the method is working correctly when switching the position list for a defender in this situation. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);
int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 2236)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 2236);
battleStatistics.switchedPosList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.switchedPosList(RED);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList(RED), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(RED) target is: battleStatistics method is: switchedPosList()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2))
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
battleStatistics.criticalHitDamage((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-10, -5);
        battleStatistics.criticalHitDamage(ATTACKER);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-10, -5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalHitDamage(ATTACKER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(ATTACKER) target is: battleStatistics method is: criticalHitDamage()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = null;
battleStatistics.criticalHitDamage(combatantSide);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(953, 953)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 3, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 953, 7287)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "e", arg4, arg5, ", healt=")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 1)
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 953);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 953, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ", healt=");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(953, 953);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 953, 7287);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Einstein", characterClass, simpleWeapon, ", healt=");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(953, 953), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 953, 7287), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "Einstein", characterClass, simpleWeapon, ", healt="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 953;
int _int = 953;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 953;
boolean _boolean = false;
boolean _boolean = false;
int _int = 953;
int _int = 2;
boolean _boolean = false;
int _int = 159;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 953;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "Einstein";
String string = ", healt=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ", healt=");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "^S", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.setRound(12);
        SimpleWeapon simpleWeapon = new SimpleWeapon(5432, "!@#$%", 9, 7);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(9876, 9876);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(9876, false, true, 50, 1234, false, 5432, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1001, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 5, "!@#$%", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(12) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(5432, "!@#$%", 9, 7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(9876, 9876), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(9876, false, true, 50, 1234, false, 5432, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1001, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 5, "!@#$%", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 9, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 28
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 12;
((BattleStatistics) _int).setRound(_int);
int _int = 5432;
String string = "!@#$%";
int _int = 9;
int _int = 7;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 9876;
int _int = 9876;
Point point = new Point(_int, _int);
int _int = 9876;
boolean _boolean = false;
boolean _boolean = true;
int _int = 50;
int _int = 1234;
boolean _boolean = false;
int _int = 5432;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1001;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "!@#$%";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "^S", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.setRound(0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(23456789, 23456789);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(23456789, false, false, 50, 23456789, false, 1001, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(0) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(23456789, 23456789), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(23456789, false, false, 50, 23456789, false, 1001, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 9, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 28
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
((BattleStatistics) _int).setRound(_int);
int _int = 1001;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 23456789;
int _int = 23456789;
Point point = new Point(_int, _int);
int _int = 23456789;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 23456789;
boolean _boolean = false;
int _int = 1001;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "^S";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3580)
statement is: getNotShootersPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.setRound(3580);
battleStatistics.getNotShootersPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
        battleStatistics.setRound(3000);
        battleStatistics.getNotShootersPerRound();// returns 10 }}

    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1234, 5678), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(3000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3000) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.getNotShootersPerRound()// returns 10 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getNotShootersPerRound()// returns 10 }}
 target is: battleStatistics method is: getNotShootersPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getNotShootersPerRound()Ljava/util/Map;
TestCase is: int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 3000;
((BattleStatistics) _int).setRound(_int);
((BattleStatistics) _int).getNotShootersPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics("critical hit", "deadly blow");
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics("critical hit", "deadly blow"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "critical hit";
String string = "deadly blow";
BattleStatistics battleStatistics = new BattleStatistics((int) string, (int) string);
CombatantSide combatantSide = null;
((BattleStatistics) string).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-3036), true, false, (-3036), (-2), true, (-2593), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-3036), arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, (String) null, arg4, arg5, "de.outstare.fortbattleplayer.model.CharacterClass")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-3036), true, false, (-3036), (-2), true, (-2593), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3036), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, (String) null, characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.CharacterClass");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 10);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(-3036, true, false, -3036, -2, true, -2593, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -3036, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Gryphon", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.CharacterClass");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-3036, true, false, -3036, -2, true, -2593, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -3036, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Gryphon", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.CharacterClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 19
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
String string = "~e";
int _int = 0;
int _int = 10;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
Point point = new Point();
boolean _boolean = true;
boolean _boolean = false;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, (-3036), (-2), true, (-2593), (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 10;
String string = "Gryphon";
String string = "de.outstare.fortbattleplayer.model.CharacterClass";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.model.CharacterClass");
((SimpleCombatant) point).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, (-1186))
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1186), false, false, 50, (-1186), false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), "no BattlefieldCell - not layouting ", arg4, arg5, "no BattlefieldCell - not layouting ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
Point point = new Point(1927, (-1186));
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1186), false, false, 50, (-1186), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "no BattlefieldCell - not layouting ", characterClass, simpleWeapon, "no BattlefieldCell - not layouting ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "^S", 1, 1);
        Point point = new Point(2078, -343);
        CharacterClass characterClass = CharacterClass.KNIGHT;
        SimpleSector simpleSector = new SimpleSector(-343, false, false, 50, -343, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "no BattlefieldCell - not layouting ", characterClass, simpleWeapon, "no BattlefieldCell - not layouting ");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "^S", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(2078, -343), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.KNIGHT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.KNIGHT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-343, false, false, 50, -343, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "no BattlefieldCell - not layouting ", characterClass, simpleWeapon, "no BattlefieldCell - not layouting "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 22
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2078;
Point point = new Point(_int, (-1186));
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, (int) _boolean, _int, false, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "no BattlefieldCell - not layouting ";
String string = "no BattlefieldCell - not layouting ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "no BattlefieldCell - not layouting ");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2251, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (-1), false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, (-1), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-1), arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2100, "r `pD6QBb]7' f(|", arg4, arg5, "r `pD6QBb]7' f(|")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "r `pD6QBb]7' f(|", characterClass, simpleWeapon, "r `pD6QBb]7' f(|");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for BattleStatistics
        BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, -1, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, -1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "r `pD6QBb]7' f(|", characterClass, simpleWeapon, "r `pD6QBb]7' f(|");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfDefenseBonus(combatantSide);
        // Expected outcome: 20 }}
    }
}
statement is: // Improved test data for BattleStatistics
BattleStatistics battleStatistics = new BattleStatistics(2251, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, -1, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, -1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -1, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "r `pD6QBb]7' f(|", characterClass, simpleWeapon, "r `pD6QBb]7' f(|"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 22
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Expected outcome: 20 }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 2251;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2251;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 2, (CharacterClass) _int);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "MIEPBq),*DLo#?R";
int _int = 1947;
int _int = 3580;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2100;
String string = "r `pD6QBb]7' f(|";
String string = "r `pD6QBb]7' f(|";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "r `pD6QBb]7' f(|");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 2236, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 2236, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2236, ", target=", arg4, (Weapon) null, "BGAKrVn:<,e-_,'")
statement is: free()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleArea.free()
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'");
        simpleArea.free();
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, ((Weapon) (null)), "BGAKrVn:<,e-_,'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleArea.free(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleArea.free() target is: simpleArea method is: free()
source statement: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V callee: VariableReference: Statement 3, type de.outstare.fortbattleplayer.model.impl.SimpleAreaindex is: 13
Matched Method is: free()V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 6, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2236;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 0;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0)
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(0, 0)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "^S", arg4, arg5, "^S")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "Golden Sword", 10.0, 500000000);
        Point point = new Point(100, 200);
        CharacterClass characterClass = CharacterClass.ARCHER;
        SimpleSector simpleSector = new SimpleSector(987654321, true, false, -5, 0, true, 50, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1000000000, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "Archer", characterClass, simpleWeapon, "Wooden Bow");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.combatantLifetime(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "Golden Sword", 10.0, 500000000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ARCHER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ARCHER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(987654321, true, false, -5, 0, true, 50, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1000000000, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "Archer", characterClass, simpleWeapon, "Wooden Bow"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.combatantLifetime(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(simpleCombatant) target is: battleStatistics method is: combatantLifetime(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 123456789;
String string = "Golden Sword";
double _double = 10.0;
int _int = 500000000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, _int);
int _int = 100;
int _int = 200;
Point point = new Point(_int, _int);
int _int = 987654321;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
boolean _boolean = true;
int _int = 50;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1000000000;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 987654321;
String string = "Archer";
String string = "Wooden Bow";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.combatantLifetime(((Combatant) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.combatantLifetime(((Combatant) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(((Combatant) (null))) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.statistics.WeaponModCounter$GraphitLubricantCounter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.WeaponModCounter$GraphitLubricantCounter
statement code is: WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter()
statement is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter();
        battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter) target is: battleStatistics method is: countWeaponMods(CombatantSide,WeaponModCounter.GraphitLubricantCounter)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = 1000;
int _int = 500;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = null;
((BattleStatistics) _int).countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter);

statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512)
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 46, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 2, "e", arg4, arg5, "")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 1)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
        SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 2512, 7287);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
        battleStatistics.critList(combatantSide);
        // Additional test data for better coverage
        SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
        battleStatistics.criticalShot(simpleCombatant, simpleCombatant2, 1);// Additional critical shot with different target

        battleStatistics.critList(combatantSide);// Update the list of critical shots for the same combatant side }}

    }
}
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: BattleStatistics battleStatistics = new BattleStatistics(953, 2512), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-1716, ", healt=", 2512, 7287), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Additional test data for better coverage
SimpleCombatant simpleCombatant2 = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant2, 1)// Additional critical shot with different target
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(simpleCombatant, simpleCombatant2, 1)// Additional critical shot with different target
 target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.critList(combatantSide)// Update the list of critical shots for the same combatant side }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide)// Update the list of critical shots for the same combatant side }}
 target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 1, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2512;
boolean _boolean = false;
boolean _boolean = false;
int _int = 953;
int _int = 2;
boolean _boolean = false;
int _int = 2512;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, true, (-1405), 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 2, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2470), arg2, true)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1), "", arg4, (Weapon) null, "")
statement is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isHit(arg0, 714, 0)
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-1405), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2470), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, 714, 0);
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, -2000);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(0, false, true, -1405, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 2, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2000, simpleArea, true);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "", characterClass, ((Weapon) (null)), "");
        battleStatistics.isHit(simpleCombatant, 714, 0);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, -2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, true, -1405, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 2, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2000, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1, "", characterClass, ((Weapon) (null)), ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isHit(simpleCombatant, 714, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isHit(simpleCombatant, 714, 0) target is: battleStatistics method is: isHit(SimpleCombatant,int,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, 0);
int _int = 0;
boolean _boolean = false;
boolean _boolean = true;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, "", (CharacterClass) battleStatistics, (Weapon) null, "");
int _int = 714;
int _int = 0;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40))
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point(1927, 1927)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-40), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 50, "^S", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(player1Health, player2Health);
        SimpleWeapon simpleWeapon = new SimpleWeapon("Warhammer", 5, 10);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(1927, 1927);
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, player1Health, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, player1Health, simpleArea, false);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "Warhammer", characterClass, simpleWeapon, "");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(player1Health, player2Health), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("Warhammer", 5, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(1927, 1927), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, player1Health, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, player1Health, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "Warhammer", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 17
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
int _int = 1927;
int _int = 1927;
Point point = new Point(_int, _int);
int _int = 1927;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 1927;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-40), (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "Warhammer";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(50, 1023, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 50, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 8, "^S", arg4, arg5, "^S")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(1927, false, false, 1001, false, 1023, characterClass);
        SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1927, false, false, 1001, false, 1023, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 17
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1001;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 50;
int _int = 1023;
SimpleArea simpleArea = new SimpleArea(_int, _int, (Sector) string);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 8;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, (-5193))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round((-5193))
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
battleStatistics.round((-5193));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, -5193);
        battleStatistics.round(-5193);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, -5193), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(-5193), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(-5193) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 1
Matched Method is: round(D)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, (-5193));
int _int = null;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(483)
test data is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.round(483);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.round(100);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(100) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 100;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(50, 0)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(0.0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(50, 0);
battleStatistics.round(0.0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.round(0.5);
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(0.5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(0.5) target is: battleStatistics method is: round(double)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
double _double = 0.5;
((BattleStatistics) _int).round(_double);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 0, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "|'@T", arg4, (Weapon) null, "|'@T")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "|'@T", characterClass, (Weapon) null, "|'@T");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(1, false, false, 5, 2, false, 4, characterClass);
        SimpleArea simpleArea = new SimpleArea(3, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234567890, "John Doe", characterClass, ((Weapon) (null)), "Sword");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, false, false, 5, 2, false, 4, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(3, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1234567890, "John Doe", characterClass, ((Weapon) (null)), "Sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1;
boolean _boolean = false;
boolean _boolean = false;
int _int = 5;
int _int = 2;
boolean _boolean = false;
int _int = 4;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 3;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234567890;
String string = "John Doe";
String string = "Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "|'@T");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661)
statement is: java.util.Hashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Hashtable<de.outstare.fortbattleplayer.model.CombatantSide, java.util.concurrent.atomic.AtomicInteger>
statement code is: Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<de.outstare.fortbattleplayer.model.CombatantSide, de.outstare.fortbattleplayer.statistics.RoundStatistics>
statement code is: HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>()
statement is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.addAndResetRoundCounter(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashMap);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1023, 4651);
        Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
        hashtable.put(ATTACKER, new AtomicInteger(5));
        hashtable.put(DEFENDER, new AtomicInteger(3));
        HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
        RoundStatistics roundStatistics = new RoundStatistics(1023, 4651);
        roundStatistics.addAndResetRoundCounter(hashtable, hashMap);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1023, 4651), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashtable.put(ATTACKER, new AtomicInteger(5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashtable.put(ATTACKER, new AtomicInteger(5)) target is: hashtable method is: put(AtomicInteger)
statement is: hashtable.put(DEFENDER, new AtomicInteger(3)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashtable.put(DEFENDER, new AtomicInteger(3)) target is: hashtable method is: put(AtomicInteger)
statement is: HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: RoundStatistics roundStatistics = new RoundStatistics(1023, 4651), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: roundStatistics.addAndResetRoundCounter(hashtable, hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: roundStatistics.addAndResetRoundCounter(hashtable, hashMap) target is: roundStatistics method is: addAndResetRoundCounter(Hashtable,HashMap)
TestCase is: int _int = 1023;
int _int = 4651;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(2236, false, false, 2236, 3580, false, 2236, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(2236, 3580, arg2)
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved((Combatant) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 2236, 3580, false, 2236, characterClass);
SimpleArea simpleArea = new SimpleArea(2236, 3580, simpleSector);
battleStatistics.hasMoved((Combatant) null, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(12345, 67890);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(12345, false, false, 67890, 10000, false, 20000, characterClass);
        SimpleArea simpleArea = new SimpleArea(12345, 67890, simpleSector);
        battleStatistics.hasMoved(((Combatant) (null)), simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(12345, 67890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(12345, false, false, 67890, 10000, false, 20000, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(12345, 67890, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(((Combatant) (null)), simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(((Combatant) (null)), simpleArea) target is: battleStatistics method is: hasMoved(Combatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 12345;
int _int = 67890;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 12345;
boolean _boolean = false;
boolean _boolean = false;
int _int = 67890;
int _int = 10000;
boolean _boolean = false;
int _int = 20000;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
int _int = 12345;
int _int = 67890;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).hasMoved((Combatant) simpleArea, simpleArea);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661)
statement is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isAlive((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
        battleStatistics.isAlive(null);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive(null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive(null) target is: battleStatistics method is: isAlive(<unknown>)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 483;
int _int = 1661;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isAlive(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927))
statement is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isDead((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-100, -100);
        battleStatistics.isDead(new Combatant("Alice", 80));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-100, -100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isDead(new Combatant("Alice", 80)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isDead(new Combatant("Alice", 80)) target is: battleStatistics method is: isDead(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
Combatant combatant = null;
battleStatistics.isDead(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927))
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline((Combatant) null, true)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isOnline((Combatant) null, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000000, 1000000);
        battleStatistics.isOnline(((Combatant) (null)), true);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000000, 1000000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(((Combatant) (null)), true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(((Combatant) (null)), true) target is: battleStatistics method is: isOnline(Combatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 1000000;
int _int = 1000000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = null;
((BattleStatistics) _int).isOnline((Combatant) _boolean, _boolean);

* test suite isTestSuite: 129
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-2379), 0, true, (-5039), characterClass);
SimpleArea simpleArea = new SimpleArea(483, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.getHitsPerRound();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.percentAbleToShoot(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
battleStatistics.getShotsPerRound();
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3580);
battleStatistics.setRound((-1799));
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
battleStatistics.setRound((-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(1037);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1927, "", characterClass, simpleWeapon, "^S");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon((-2387), "K!,M`SK(4}I9iK", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3708, "K!,M`SK(4}I9iK", characterClass, simpleWeapon, "K!,M`SK(4}I9iK");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfHipFlasks((CombatantSide) null);
Test 25: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 26: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 3580, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1050), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "v`7{ MQVf'iLpOB", characterClass, (Weapon) null, "v`7{ MQVf'iLpOB");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 1944, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.aimAt(simpleCombatant);
simpleCombatant.addObserver(battleStatistics);
simpleCombatant.addObserver(battleStatistics);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(449);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 52, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.targetNoOne(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (-165), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-165), "Rte|hD#;?<iu?i", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-13), true, true, (-13), (-21), true, (-13), characterClass);
SimpleArea simpleArea = new SimpleArea((-13), (-21), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-13), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-21), "M$~mEy&Q?K[!fH;VvT/p", characterClass, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 37: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
battleStatistics.switchedPosList(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 2236);
battleStatistics.switchedPosList((CombatantSide) null);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
battleStatistics.criticalHitDamage((CombatantSide) null);
Test 40: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 953);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 953, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ", healt=");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHitDamage(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.setRound(3580);
battleStatistics.getNotShootersPerRound();
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-3036), true, false, (-3036), (-2), true, (-2593), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3036), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, (String) null, characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.CharacterClass");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
Point point = new Point(1927, (-1186));
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1186), false, false, 50, (-1186), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "no BattlefieldCell - not layouting ", characterClass, simpleWeapon, "no BattlefieldCell - not layouting ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "r `pD6QBb]7' f(|", characterClass, simpleWeapon, "r `pD6QBb]7' f(|");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter);
Test 52: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-1405), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2470), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, 714, 0);
battleStatistics.getFieldStatistics();
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
battleStatistics.round((-5193));
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.round(483);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(50, 0);
battleStatistics.round(0.0);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "|'@T", characterClass, (Weapon) null, "|'@T");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashMap);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 2236, 3580, false, 2236, characterClass);
SimpleArea simpleArea = new SimpleArea(2236, 3580, simpleSector);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, simpleArea);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.isAlive((Combatant) null);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
// Undeclared exception!
try { 
  battleStatistics.isOnline((Combatant) null, true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfBayonets((CombatantSide) null);

Test 66: 
int _int = 483;
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 0, (int) true, 483, true, (-5039), (CharacterClass) 1661);
int _int = 483;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
((BattleStatistics)1234).numberOfShinyOil((CombatantSide) null);

Test 68: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).amountOfAttackBonus((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 69: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfGraphitLubricants((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(5, 10);
((BattleStatistics)5).totalSwaps((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 5000);
((BattleStatistics)1000).getFieldStatistics();

Test 72: 
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
((BattleStatistics)30).numberOfFettesOil((CombatantSide) null);
int _int = 25;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 35;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 40;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).numberOfSchmierOil((CombatantSide) null);

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(69, 420);
((BattleStatistics)69).getHitsPerRound();

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(20, 15);
((BattleStatistics)20).criticalHits((CombatantSide) null);

Test 76: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 3580;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, (CharacterClass) 3580);
int _int = 3580;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
((BattleStatistics)2236).amountOfDefenseBonus((CombatantSide) null);

Test 78: 
BattleStatistics battleStatistics = new BattleStatistics(5000, 7000);
((BattleStatistics)5000).getShotsPerRound();

Test 79: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).setRound(2);
int _int = 3;
((BattleStatistics) _int).setRound(_int);
int _int = 4;
((BattleStatistics) _int).setRound(_int);

Test 80: 
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
int _int = 1234;
int _int = 5678;
SimpleSector simpleSector = new SimpleSector(1234, false, false, 5678, 5678, false, 2, (CharacterClass) 5678);
int _int = 5678;
int _int = 1234;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 5678;
((BattleStatistics) _int).setRound(_int);
int _int = null;
((BattleStatistics) _int).setRound(_int);

Test 81: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
battleStatistics.setRound((int) (Integer) null);
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1);
int _int = 1927;
int _int = 1927;
Point point = new Point(_int, _int);
int _int = 1927;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 1927;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-40), (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "^S";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) arg5, "");
((SimpleCombatant) point).addObserver(battleStatistics);
int _int = 1037;
battleStatistics.setRound(_int);

Test 82: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
Point point = new Point(1927, 1927);
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, (CharacterClass) "^S");
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1927;
String string = "";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 83: 
int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
SimpleSector simpleSector = new SimpleSector(1000, true, false, 0, (int) false, (boolean) 2, 2, (CharacterClass) 2000);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 1500;
String string = ", target=";
String string = ", target=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, ", target=");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 84: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 85: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
((BattleStatistics)3).numberOfMovesPerPlayer((CombatantSide) null);

Test 86: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, (CharacterClass) 3580);
int _int = 0;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2100;
String string = "target=";
String string = "target=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, ", target=");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 87: 
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
int _int = 1234;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(1234, true, false, 0, 0, false, 2, (CharacterClass) 5678);
int _int = 0;
int _int = 1234;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 88: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(10, 20);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

Test 89: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
int _int = 953;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 90: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
int _int = 953;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 91: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, (CharacterClass) 3580);
int _int = 1;
int _int = 3580;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "v`7{ MQVf'iLpOB";
String string = "v`7{ MQVf'iLpOB";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "v`7{ MQVf'iLpOB");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 92: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, (CharacterClass) 1001);
int _int = 50;
int _int = 1023;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 8;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 93: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1000;
SimpleWeapon simpleWeapon = new SimpleWeapon(1000, "^S", (int) 100.0, 50000);
int _int = 23456789;
int _int = 987654321;
Point point = new Point(_int, _int);
int _int = 23456789;
boolean _boolean = false;
boolean _boolean = false;
int _int = 987654321;
int _int = 23456789;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 94: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).averageRoundsOnline((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 95: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
double _double = 1.1;
SimpleWeapon simpleWeapon = new SimpleWeapon(1234567890, "^S", (int) 1.1, (int) "A very descriptive weapon name");
int _int = 987654321;
int _int = 987654321;
Point point = new Point(_int, _int);
SimpleArea simpleArea = new SimpleArea(point, (Sector) _double);
double _double = 1.23456789;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) _double, simpleArea, _boolean);
String string = "A very descriptive name";
String string = "^S";
String string = "A very descriptive weapon description";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleCombatant) _int).addObserver(battleStatistics);
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 96: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
((BattleStatistics)0).setRound(0);
int _int = 449;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
String string = "^S";
int _int = 123456789;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
int _int = 987654321;
Point point = new Point(_int, _int);
int _int = 987654321;
boolean _boolean = false;
boolean _boolean = false;
int _int = 52;
int _int = 987654321;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 97: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 3580;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, (CharacterClass) 3580);
int _int = 3580;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 98: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
Point point = new Point(0, 0);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (int) false, (boolean) 2, 2, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Rte|hD#;?<iu?i";
int _int = 0;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Rte|hD#;?<iu?i";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 99: 
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
String string = "width";
SimpleArea simpleArea = new SimpleArea((int) "width", (int) "height", (Sector) battleStatistics);
String string = "startX";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
String string = "startX";
String string = ", target=";
String string = "soldierName";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) string).free();
((SimpleCombatant) string).addObserver(battleStatistics);

Test 100: 
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
SimpleSector simpleSector = new SimpleSector(100, true, true, 200, 300, true, 100, (CharacterClass) 200);
int _int = 100;
int _int = 300;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 200;
String string = "Warrior-1";
String string = "Warrior-1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 101: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
((BattleStatistics)2512).switchedPosList((CombatantSide) null);
int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 102: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).switchedPosList((CombatantSide) null);

Test 103: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
battleStatistics.criticalHitDamage((CombatantSide) null);

Test 104: 
int _int = 953;
BattleStatistics battleStatistics = new BattleStatistics(953, 953);
int _int = 953;
SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 953;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "Einstein";
String string = ", healt=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ", healt=");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 105: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).setRound(12);
int _int = 5432;
String string = "!@#$%";
int _int = 9;
int _int = 7;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 9876;
int _int = 9876;
Point point = new Point(_int, _int);
int _int = 9876;
boolean _boolean = false;
boolean _boolean = true;
int _int = 50;
int _int = 1234;
boolean _boolean = false;
int _int = 5432;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1001;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "!@#$%";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 106: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).setRound(0);
int _int = 1001;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 23456789;
int _int = 23456789;
Point point = new Point(_int, _int);
int _int = 23456789;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 23456789;
boolean _boolean = false;
int _int = 1001;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "^S";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 107: 
int _int = 1234;
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
((BattleStatistics)1234).setRound(3000);
((BattleStatistics) _int).getNotShootersPerRound();

Test 108: 
String string = "critical hit";
BattleStatistics battleStatistics = new BattleStatistics((int) "critical hit", (int) "deadly blow");
CombatantSide combatantSide = null;
((BattleStatistics) string).critList(combatantSide);

Test 109: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 10);
Point point = new Point();
SimpleSector simpleSector = new SimpleSector((int) true, false, true, (-3036), (-2), true, (-2593), (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 10;
String string = "Gryphon";
String string = "de.outstare.fortbattleplayer.model.CharacterClass";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.model.CharacterClass");
((SimpleCombatant) point).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 110: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "^S", 1, 1);
int _int = 2078;
Point point = new Point(2078, (-1186));
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 50, (int) false, 0, false, 0, (CharacterClass) 1);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "no BattlefieldCell - not layouting ";
String string = "no BattlefieldCell - not layouting ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "no BattlefieldCell - not layouting ");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 111: 
int _int = 2251;
BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (int) false, (boolean) 2, 2, (CharacterClass) 3580);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "MIEPBq),*DLo#?R";
int _int = 1947;
int _int = 3580;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2100;
String string = "r `pD6QBb]7' f(|";
String string = "r `pD6QBb]7' f(|";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "r `pD6QBb]7' f(|");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 112: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, (CharacterClass) 3580);
int _int = 0;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 113: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 123456789;
SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "Golden Sword", (int) 10.0, 500000000);
int _int = 100;
int _int = 200;
Point point = new Point(_int, _int);
int _int = 987654321;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
boolean _boolean = true;
int _int = 50;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1000000000;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 987654321;
String string = "Archer";
String string = "Wooden Bow";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 114: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).combatantLifetime((Combatant) null);

Test 115: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 116: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
int _int = 953;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 117: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 0);
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, (int) false, (boolean) 0, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, "", (CharacterClass) battleStatistics, (Weapon) null, "");
int _int = 714;
int _int = 0;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
int _int = 1927;
Point point = new Point(1927, 1927);
int _int = 1927;
int _int = 1927;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), (CharacterClass) 1927);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "Warhammer";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

Test 119: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
SimpleArea simpleArea = new SimpleArea(50, 1023, (Sector) "^S");
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 8;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 120: 
BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
((BattleStatistics)0).round((double) (Double) null);

Test 121: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).round(100);

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(0.5);

Test 123: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(1, false, false, 5, 2, false, 4, (CharacterClass) 0);
int _int = 3;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234567890;
String string = "John Doe";
String string = "Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "|'@T");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 124: 
BattleStatistics battleStatistics = new BattleStatistics(1023, 4651);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();

Test 125: 
int _int = 12345;
BattleStatistics battleStatistics = new BattleStatistics(12345, 67890);
SimpleSector simpleSector = new SimpleSector(12345, false, false, 67890, 10000, false, 20000, (CharacterClass) 67890);
int _int = 12345;
int _int = 67890;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).hasMoved((Combatant) simpleArea, simpleArea);

Test 126: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
((BattleStatistics)483).isAlive((Combatant) null);

Test 127: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(1000000, 1000000);
((BattleStatistics)1000000).isOnline((Combatant) true, (boolean) (Boolean) null);


* Generated after the refinement and before minimization 129 tests with total length 1234
* test suite isTestSuite: 129
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-2379), 0, true, (-5039), characterClass);
SimpleArea simpleArea = new SimpleArea(483, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.getFieldStatistics();
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.getHitsPerRound();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.percentAbleToShoot(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
battleStatistics.getShotsPerRound();
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3580);
battleStatistics.setRound((-1799));
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
battleStatistics.setRound((-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(1037);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1927, "", characterClass, simpleWeapon, "^S");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon((-2387), "K!,M`SK(4}I9iK", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3708, "K!,M`SK(4}I9iK", characterClass, simpleWeapon, "K!,M`SK(4}I9iK");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfHipFlasks((CombatantSide) null);
Test 25: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 26: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 3580, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1050), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "v`7{ MQVf'iLpOB", characterClass, (Weapon) null, "v`7{ MQVf'iLpOB");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 1944, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.aimAt(simpleCombatant);
simpleCombatant.addObserver(battleStatistics);
simpleCombatant.addObserver(battleStatistics);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(449);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 52, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.targetNoOne(combatantSide);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (-165), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-165), "Rte|hD#;?<iu?i", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-13), true, true, (-13), (-21), true, (-13), characterClass);
SimpleArea simpleArea = new SimpleArea((-13), (-21), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-13), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-21), "M$~mEy&Q?K[!fH;VvT/p", characterClass, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 37: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
battleStatistics.switchedPosList(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 2236);
battleStatistics.switchedPosList((CombatantSide) null);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
battleStatistics.criticalHitDamage((CombatantSide) null);
Test 40: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 953);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 953, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ", healt=");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHitDamage(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.setRound(3580);
battleStatistics.getNotShootersPerRound();
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-3036), true, false, (-3036), (-2), true, (-2593), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3036), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, (String) null, characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.CharacterClass");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
Point point = new Point(1927, (-1186));
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1186), false, false, 50, (-1186), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "no BattlefieldCell - not layouting ", characterClass, simpleWeapon, "no BattlefieldCell - not layouting ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "r `pD6QBb]7' f(|", characterClass, simpleWeapon, "r `pD6QBb]7' f(|");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter);
Test 52: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-1405), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2470), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, 714, 0);
battleStatistics.getFieldStatistics();
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
battleStatistics.round((-5193));
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.round(483);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(50, 0);
battleStatistics.round(0.0);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "|'@T", characterClass, (Weapon) null, "|'@T");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashMap);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 2236, 3580, false, 2236, characterClass);
SimpleArea simpleArea = new SimpleArea(2236, 3580, simpleSector);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, simpleArea);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.isAlive((Combatant) null);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
// Undeclared exception!
try { 
  battleStatistics.isOnline((Combatant) null, true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 65: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfBayonets((CombatantSide) null);

Test 66: 
int _int = 483;
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
SimpleSector simpleSector = new SimpleSector((int) false, true, (boolean) 0, (int) true, 483, true, (-5039), (CharacterClass) 1661);
int _int = 483;
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).newDestination((Combatant) simpleArea, simpleArea);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
((BattleStatistics)1234).numberOfShinyOil((CombatantSide) null);

Test 68: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).amountOfAttackBonus((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 69: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfGraphitLubricants((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(5, 10);
((BattleStatistics)5).totalSwaps((CombatantSide) null);

Test 71: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 5000);
((BattleStatistics)1000).getFieldStatistics();

Test 72: 
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
((BattleStatistics)30).numberOfFettesOil((CombatantSide) null);
int _int = 25;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 35;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);
int _int = 40;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).numberOfSchmierOil((CombatantSide) null);

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(69, 420);
((BattleStatistics)69).getHitsPerRound();

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(20, 15);
((BattleStatistics)20).criticalHits((CombatantSide) null);

Test 76: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 3580;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, (CharacterClass) 3580);
int _int = 3580;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
((BattleStatistics)2236).amountOfDefenseBonus((CombatantSide) null);

Test 78: 
BattleStatistics battleStatistics = new BattleStatistics(5000, 7000);
((BattleStatistics)5000).getShotsPerRound();

Test 79: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).setRound(2);
int _int = 3;
((BattleStatistics) _int).setRound(_int);
int _int = 4;
((BattleStatistics) _int).setRound(_int);

Test 80: 
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
int _int = 1234;
int _int = 5678;
SimpleSector simpleSector = new SimpleSector(1234, false, false, 5678, 5678, false, 2, (CharacterClass) 5678);
int _int = 5678;
int _int = 1234;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 5678;
((BattleStatistics) _int).setRound(_int);
int _int = null;
((BattleStatistics) _int).setRound(_int);

Test 81: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
battleStatistics.setRound((int) (Integer) null);
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1);
int _int = 1927;
int _int = 1927;
Point point = new Point(_int, _int);
int _int = 1927;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 1927;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, (-40), (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "^S";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) arg5, "");
((SimpleCombatant) point).addObserver(battleStatistics);
int _int = 1037;
battleStatistics.setRound(_int);

Test 82: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
Point point = new Point(1927, 1927);
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, (CharacterClass) "^S");
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1927;
String string = "";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 83: 
int _int = 1000;
int _int = 2000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 2000);
SimpleSector simpleSector = new SimpleSector(1000, true, false, 0, (int) false, (boolean) 2, 2, (CharacterClass) 2000);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 1500;
String string = ", target=";
String string = ", target=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, ", target=");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 84: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).numberOfMovesPerPlayer((CombatantSide) null);

Test 85: 
BattleStatistics battleStatistics = new BattleStatistics(3, 3);
((BattleStatistics)3).numberOfMovesPerPlayer((CombatantSide) null);

Test 86: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, (CharacterClass) 3580);
int _int = 0;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2100;
String string = "target=";
String string = "target=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, ", target=");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 87: 
int _int = 1234;
int _int = 5678;
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
int _int = 1234;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(1234, true, false, 0, 0, false, 2, (CharacterClass) 5678);
int _int = 0;
int _int = 1234;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1234;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 88: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(10, 20);
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

Test 89: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
int _int = 953;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 90: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
int _int = 953;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 91: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, (CharacterClass) 3580);
int _int = 1;
int _int = 3580;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
int _int = 0;
String string = "v`7{ MQVf'iLpOB";
String string = "v`7{ MQVf'iLpOB";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "v`7{ MQVf'iLpOB");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 92: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, (CharacterClass) 1001);
int _int = 50;
int _int = 1023;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 8;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 93: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1000;
SimpleWeapon simpleWeapon = new SimpleWeapon(1000, "^S", (int) 100.0, 50000);
int _int = 23456789;
int _int = 987654321;
Point point = new Point(_int, _int);
int _int = 23456789;
boolean _boolean = false;
boolean _boolean = false;
int _int = 987654321;
int _int = 23456789;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 94: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).averageRoundsOnline((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 95: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
double _double = 1.1;
SimpleWeapon simpleWeapon = new SimpleWeapon(1234567890, "^S", (int) 1.1, (int) "A very descriptive weapon name");
int _int = 987654321;
int _int = 987654321;
Point point = new Point(_int, _int);
SimpleArea simpleArea = new SimpleArea(point, (Sector) _double);
double _double = 1.23456789;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) _double, simpleArea, _boolean);
String string = "A very descriptive name";
String string = "^S";
String string = "A very descriptive weapon description";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleCombatant) _int).addObserver(battleStatistics);
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 96: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
((BattleStatistics)0).setRound(0);
int _int = 449;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
String string = "^S";
int _int = 123456789;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
int _int = 987654321;
Point point = new Point(_int, _int);
int _int = 987654321;
boolean _boolean = false;
boolean _boolean = false;
int _int = 52;
int _int = 987654321;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 97: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 3580;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, (CharacterClass) 3580);
int _int = 3580;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleCombatant) _int).aimAt(simpleCombatant);
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 98: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
Point point = new Point(0, 0);
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (int) false, (boolean) 2, 2, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Rte|hD#;?<iu?i";
int _int = 0;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Rte|hD#;?<iu?i";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 99: 
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
String string = "width";
SimpleArea simpleArea = new SimpleArea((int) "width", (int) "height", (Sector) battleStatistics);
String string = "startX";
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) string, simpleArea, _boolean);
String string = "startX";
String string = ", target=";
String string = "soldierName";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) string).free();
((SimpleCombatant) string).addObserver(battleStatistics);

Test 100: 
int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
SimpleSector simpleSector = new SimpleSector(100, true, true, 200, 300, true, 100, (CharacterClass) 200);
int _int = 100;
int _int = 300;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 200;
String string = "Warrior-1";
String string = "Warrior-1";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 101: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
((BattleStatistics)2512).switchedPosList((CombatantSide) null);
int _int = 953;
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 102: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).switchedPosList((CombatantSide) null);

Test 103: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
battleStatistics.criticalHitDamage((CombatantSide) null);

Test 104: 
int _int = 953;
BattleStatistics battleStatistics = new BattleStatistics(953, 953);
int _int = 953;
SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 3;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 953;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "Einstein";
String string = ", healt=";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ", healt=");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

Test 105: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).setRound(12);
int _int = 5432;
String string = "!@#$%";
int _int = 9;
int _int = 7;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 9876;
int _int = 9876;
Point point = new Point(_int, _int);
int _int = 9876;
boolean _boolean = false;
boolean _boolean = true;
int _int = 50;
int _int = 1234;
boolean _boolean = false;
int _int = 5432;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1001;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "!@#$%";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 106: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).setRound(0);
int _int = 1001;
String string = "^S";
int _int = 1;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 23456789;
int _int = 23456789;
Point point = new Point(_int, _int);
int _int = 23456789;
boolean _boolean = false;
boolean _boolean = false;
int _int = 50;
int _int = 23456789;
boolean _boolean = false;
int _int = 1001;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "^S";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) battleStatistics, "");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 107: 
int _int = 1234;
BattleStatistics battleStatistics = new BattleStatistics(1234, 5678);
((BattleStatistics)1234).setRound(3000);
((BattleStatistics) _int).getNotShootersPerRound();

Test 108: 
String string = "critical hit";
BattleStatistics battleStatistics = new BattleStatistics((int) "critical hit", (int) "deadly blow");
CombatantSide combatantSide = null;
((BattleStatistics) string).critList(combatantSide);

Test 109: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 10);
Point point = new Point();
SimpleSector simpleSector = new SimpleSector((int) true, false, true, (-3036), (-2), true, (-2593), (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 10;
String string = "Gryphon";
String string = "de.outstare.fortbattleplayer.model.CharacterClass";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.model.CharacterClass");
((SimpleCombatant) point).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 110: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "^S", 1, 1);
int _int = 2078;
Point point = new Point(2078, (-1186));
SimpleSector simpleSector = new SimpleSector((int) false, false, (boolean) 50, (int) false, 0, false, 0, (CharacterClass) 1);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "no BattlefieldCell - not layouting ";
String string = "no BattlefieldCell - not layouting ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _int, "no BattlefieldCell - not layouting ");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

Test 111: 
int _int = 2251;
BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
boolean _boolean = false;
int _int = 2;
SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (int) false, (boolean) 2, 2, (CharacterClass) 3580);
int _int = 0;
SimpleArea simpleArea = new SimpleArea(_int, (int) simpleSector, (Sector) battleStatistics);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "MIEPBq),*DLo#?R";
int _int = 1947;
int _int = 3580;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 2100;
String string = "r `pD6QBb]7' f(|";
String string = "r `pD6QBb]7' f(|";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "r `pD6QBb]7' f(|");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 112: 
int _int = 2236;
int _int = 3580;
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
int _int = 2236;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, (CharacterClass) 3580);
int _int = 0;
int _int = 2236;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 2236;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 2236;
String string = ", target=";
String string = "BGAKrVn:<,e-_,'";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "BGAKrVn:<,e-_,'");
((SimpleArea) _int).free();
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 113: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 123456789;
SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "Golden Sword", (int) 10.0, 500000000);
int _int = 100;
int _int = 200;
Point point = new Point(_int, _int);
int _int = 987654321;
boolean _boolean = true;
boolean _boolean = false;
int _int = 0;
boolean _boolean = true;
int _int = 50;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1000000000;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 987654321;
String string = "Archer";
String string = "Wooden Bow";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) _int).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 114: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).combatantLifetime((Combatant) null);

Test 115: 
BattleStatistics battleStatistics = new BattleStatistics(1000, 500);
((BattleStatistics)1000).countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 116: 
int _int = 2512;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
int _int = 953;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, (CharacterClass) battleStatistics);
int _int = 2;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 46;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = ", healt=";
int _int = 2512;
int _int = 7287;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 7287);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);
int _int = 2;
String string = "e";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 117: 
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(10, 0);
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, (int) false, (boolean) 0, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 2;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, true);
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) string, "", (CharacterClass) battleStatistics, (Weapon) null, "");
int _int = 714;
int _int = 0;
((BattleStatistics) _int).isHit(simpleCombatant, _int, _int);
((BattleStatistics) _int).getFieldStatistics();

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
int _int = 1927;
Point point = new Point(1927, 1927);
int _int = 1927;
int _int = 1927;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), (CharacterClass) 1927);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
int _int = 50;
String string = "Warhammer";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) _int, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

Test 119: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
SimpleArea simpleArea = new SimpleArea(50, 1023, (Sector) "^S");
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 8;
String string = "^S";
String string = "^S";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "^S");
((SimpleCombatant) simpleWeapon).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 120: 
BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
((BattleStatistics)0).round((double) (Double) null);

Test 121: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).round(100);

Test 122: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(0.5);

Test 123: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleSector simpleSector = new SimpleSector(1, false, false, 5, 2, false, 4, (CharacterClass) 0);
int _int = 3;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1234567890;
String string = "John Doe";
String string = "Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, string, (CharacterClass) _int, (Weapon) null, "|'@T");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 124: 
BattleStatistics battleStatistics = new BattleStatistics(1023, 4651);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();

Test 125: 
int _int = 12345;
BattleStatistics battleStatistics = new BattleStatistics(12345, 67890);
SimpleSector simpleSector = new SimpleSector(12345, false, false, 67890, 10000, false, 20000, (CharacterClass) 67890);
int _int = 12345;
int _int = 67890;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
SimpleArea simpleArea = null;
((BattleStatistics) _int).hasMoved((Combatant) simpleArea, simpleArea);

Test 126: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
((BattleStatistics)483).isAlive((Combatant) null);

Test 127: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);

Test 128: 
BattleStatistics battleStatistics = new BattleStatistics(1000000, 1000000);
((BattleStatistics)1000000).isOnline((Combatant) true, (boolean) (Boolean) null);


* Minimizing test suite
* test suite isTestSuite: 65
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-2379), 0, true, (-5039), characterClass);
SimpleArea simpleArea = new SimpleArea(483, 0, simpleSector);
battleStatistics.newDestination((Combatant) null, simpleArea);
Test 2: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.critList(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, true, (-1405), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2470), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "", characterClass, (Weapon) null, "");
battleStatistics.isHit(simpleCombatant, 714, 0);
battleStatistics.getFieldStatistics();
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.totalSwaps(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.getFieldStatistics();
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.isAlive((Combatant) null);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 2236, 3580, false, 2236, characterClass);
SimpleArea simpleArea = new SimpleArea(2236, 3580, simpleSector);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, simpleArea);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.getHitsPerRound();
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
battleStatistics.round((-5193));
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
battleStatistics.getShotsPerRound();
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3580);
battleStatistics.setRound((-1799));
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
battleStatistics.setRound((-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(1037);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.combatantLifetime((Combatant) null);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleWeapon simpleWeapon = new SimpleWeapon((-2387), "K!,M`SK(4}I9iK", 2, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 3708, "K!,M`SK(4}I9iK", characterClass, simpleWeapon, "K!,M`SK(4}I9iK");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, ", target=", characterClass, (Weapon) null, ", target=");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) null, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfHipFlasks((CombatantSide) null);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, true, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 3580, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1050), simpleArea, true);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "v`7{ MQVf'iLpOB", characterClass, (Weapon) null, "v`7{ MQVf'iLpOB");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 33: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.roundsTillOnline(combatantSide);
Test 34: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(2512, false, false, 953, 2, false, 2512, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 46, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 2512, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 1944, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.aimAt(simpleCombatant);
simpleCombatant.addObserver(battleStatistics);
simpleCombatant.addObserver(battleStatistics);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(449);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 0, 0);
Point point = new Point(1944, 1944);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(1944, false, false, 52, 1944, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.targetNoOne(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 30, (-165), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Rte|hD#;?<iu?i", 0, 2);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-165), "Rte|hD#;?<iu?i", characterClass, simpleWeapon, "");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
CombatantSide combatantSide = CombatantSide.DEFENDER;
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector((-13), true, true, (-13), (-21), true, (-13), characterClass);
SimpleArea simpleArea = new SimpleArea((-13), (-21), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-13), simpleArea, true);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-21), "M$~mEy&Q?K[!fH;VvT/p", characterClass, (Weapon) null, "M$~mEy&Q?K[!fH;VvT/p");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 44: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
battleStatistics.switchedPosList(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 2236);
battleStatistics.switchedPosList((CombatantSide) null);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.critList(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
battleStatistics.criticalHitDamage((CombatantSide) null);
Test 48: 
CombatantSide combatantSide = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 953);
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(953, false, false, 953, 2, false, 159, characterClass);
SimpleArea simpleArea = new SimpleArea(2, 2, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 3, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-1716), ", healt=", 953, 7287);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2, "e", characterClass, simpleWeapon, ", healt=");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 1);
battleStatistics.criticalHitDamage(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, true, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, 1001, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.turnOrder(combatantSide);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.setRound(3580);
battleStatistics.getNotShootersPerRound();
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "~e", 0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector((-3036), true, false, (-3036), (-2), true, (-2593), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-3036), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, (String) null, characterClass, simpleWeapon, "de.outstare.fortbattleplayer.model.CharacterClass");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "^S", 1, 1);
Point point = new Point(1927, (-1186));
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector((-1186), false, false, 50, (-1186), false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1), "no BattlefieldCell - not layouting ", characterClass, simpleWeapon, "no BattlefieldCell - not layouting ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfAttackBonus(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(2251, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2251, true, false, 0, (-1), false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, (-1), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-1), simpleArea, false);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "MIEPBq),*DLo#?R", 1947, 3580);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2100, "r `pD6QBb]7' f(|", characterClass, simpleWeapon, "r `pD6QBb]7' f(|");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 0, 0, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter = new WeaponModCounter.GraphitLubricantCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_GraphitLubricantCounter);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
SimpleWeapon simpleWeapon = new SimpleWeapon((-40), "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point(1927, 1927);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(1927, false, false, 50, 1927, false, (-40), characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-40), simpleArea, false);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 50, "^S", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
SimpleWeapon simpleWeapon = new SimpleWeapon(1001, "^S", 1, 1);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1927, 1001, false, 1023, characterClass);
SimpleArea simpleArea = new SimpleArea(50, 1023, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 8, "^S", characterClass, simpleWeapon, "^S");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(2236, false, false, 3580, 3580, false, 2, characterClass);
SimpleArea simpleArea = new SimpleArea(3580, 2236, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 2236, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 2236, ", target=", characterClass, (Weapon) null, "BGAKrVn:<,e-_,'");
simpleCombatant.aimAt(simpleCombatant);
simpleArea.free();
simpleCombatant.addObserver(battleStatistics);
battleStatistics.percentAbleToShoot(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.round(483);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(50, 0);
battleStatistics.round(0.0);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 0, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "|'@T", characterClass, (Weapon) null, "|'@T");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
Hashtable<CombatantSide, AtomicInteger> hashtable = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(hashtable, hashMap);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
// Undeclared exception!
try { 
  battleStatistics.isOnline((Combatant) null, true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 156
* Number of covered goals: 137
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 105
* Number of covered goals: 59
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 156
* Number of covered goals: 134
* Generated 65 tests with total length 451
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2, 2);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfBayonets = battleStatistics.numberOfBayonets(arg0);
assertEquals(0, numberOfBayonets);


** It was a parseable test case! 
refined test name is: testNumberOfBayonetsForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
CharacterClass arg7 = CharacterClass.ADVENTURER;
SimpleSector arg2 = new SimpleSector(0, false, true, (-2379), 0, true, (-5039), arg7);
SimpleArea arg1 = new SimpleArea(483, 0, arg2);
battleStatistics.newDestination((Combatant) null, arg1);
assertEquals(0, arg1.getHeight());


** It was a parseable test case! 
refined test name is: testNewDestinationsetsHeightToZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0);
assertEquals(0, numberOfShinyOil);


** It was a parseable test case! 
refined test name is: testNumberOfShinyOilWithCombatantSideAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsDeadWhenNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0);
assertEquals(0, amountOfAttackBonus);


** It was a parseable test case! 
refined test name is: testAmountOfAttackBonusForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0);
assertEquals(0, numberOfGraphitLubricants);


** It was a parseable test case! 
refined test name is: testNumberOfGraphitLubricantsinitiallyZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide arg0 = CombatantSide.ATTACKER;
int totalSwaps = battleStatistics.totalSwaps(arg0);
assertEquals(0, totalSwaps);


** It was a parseable test case! 
refined test name is: testTotalSwapsWithNegativeValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics();
assertEquals(0, fieldStatistics.size());


** It was a parseable test case! 
refined test name is: testGetEmptyFieldStatistics
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0);
assertEquals(0, numberOfFettesOil);


** It was a parseable test case! 
refined test name is: testNumberOfFettesOilWithZeroFettesOil
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0);
assertEquals(0, numberOfSchmierOil);


** It was a parseable test case! 
refined test name is: testNumberOfSchmierOilWhenThereAreNoSchmierOil
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
battleStatistics.isAlive((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsAliveWithNullArgument
* Compiling Tests
refined test name is: testIsAliveWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CharacterClass arg7 = CharacterClass.DUELANT;
SimpleSector arg2 = new SimpleSector(2236, false, false, 2236, 3580, false, 2236, arg7);
SimpleArea arg1 = new SimpleArea(2236, 3580, arg2);
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}


** It was a parseable test case! 
refined test name is: testHasMovedWithNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound();
assertEquals(2, hitsPerRound.size());


** It was a parseable test case! 
refined test name is: testGetHitsPerRoundReturnsMapOfSizeTwo
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
int criticalHits = battleStatistics.criticalHits(arg0);
assertEquals(0, criticalHits);


** It was a parseable test case! 
refined test name is: testCriticalHitsForAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, (-5193));
int round = battleStatistics.round((-5193));
assertEquals((-5193), round);


** It was a parseable test case! 
refined test name is: testRoundMethodReturnsNegativeScore
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
CombatantSide arg0 = CombatantSide.ATTACKER;
int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0);
assertEquals(0, amountOfDefenseBonus);


** It was a parseable test case! 
refined test name is: testAmountOfDefenseBonusForAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3571);
Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound();
assertFalse(shotsPerRound.isEmpty());


** It was a parseable test case! 
refined test name is: testGetShotsPerRoundIsNotEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);
battleStatistics.setRound(0);

** It was a parseable test case! 
refined test name is: testIncrementRoundCount
* Compiling Tests
refined test name is: testIncrementRoundCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null);
assertEquals(0, combatantLifetime);


** It was a parseable test case! 
refined test name is: testCombatantLifetimeNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(Double.NaN, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerwithZeroGamesPlayed
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-40), (-40));
CombatantSide arg0 = CombatantSide.DEFENDER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(-0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerForDefenderWithNoMoves
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CombatantSide arg0 = CombatantSide.DEFENDER;
BattleStatistics battleStatistics = new BattleStatistics(953, 2512);
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0);
assertTrue(switchedPosList.isEmpty());


** It was a parseable test case! 
refined test name is: testEmptyPositionSwitchesForDefenderSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 2236);
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null);
assertEquals(0, switchedPosList.size());


** It was a parseable test case! 
refined test name is: testSwitchedPosListEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
CombatantSide arg0 = CombatantSide.DEFENDER;
List<CriticalHit> critList = battleStatistics.critList(arg0);
assertTrue(critList.isEmpty());


** It was a parseable test case! 
refined test name is: testCritListIsEmptyForInvalidBattleId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
long criticalHitDamage = battleStatistics.criticalHitDamage((CombatantSide) null);
assertEquals(0L, criticalHitDamage);


** It was a parseable test case! 
refined test name is: testCriticalHitDamageWithNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2236, 3580);
battleStatistics.setRound(3580);
Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound();
assertEquals(2, notShootersPerRound.size());


** It was a parseable test case! 
refined test name is: testBattleStatisticssetRound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
WeaponModCounter.GraphitLubricantCounter arg1 = new WeaponModCounter.GraphitLubricantCounter();
int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1);
assertEquals(0, countWeaponMods);


** It was a parseable test case! 
refined test name is: testCountWeaponModsWithZeroWeaponMods
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
int round = battleStatistics.round(483);
assertEquals(483, round);


** It was a parseable test case! 
refined test name is: testRoundMethodWithBattleStatisticsObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(50, 0);
int round = battleStatistics.round(0.0);
assertEquals(0, round);


** It was a parseable test case! 
refined test name is: testDamageRoundWithZeroHealing
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(483, 1661);
Hashtable<CombatantSide, AtomicInteger> arg0 = new Hashtable<CombatantSide, AtomicInteger>();
HashMap<CombatantSide, RoundStatistics> arg1 = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter(arg0, arg1);
assertTrue(arg1.isEmpty());


** It was a parseable test case! 
refined test name is: testAddAndResetRoundCounterNewBattleStatistics
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1927), (-1927));
// Undeclared exception!
try { 
  battleStatistics.isOnline((Combatant) null, true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}


** It was a parseable test case! 
refined test name is: testIsOnlinethrowsNPEWhenPassedNullCombatant
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:53.787 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:53.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:53.902 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:53.904 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:53.977 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:53.979 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.051 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.124 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.201 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.203 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.276 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.277 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.351 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.353 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.425 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.427 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.501 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:54:54.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.577 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.579 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.743 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.745 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.819 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.894 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.896 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:54.971 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:54.973 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.048 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:54:55.050 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.134 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.225 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.314 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.407 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.495 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.497 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:55.581 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:55.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.662 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:55.664 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.742 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:55.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.831 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:55.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.919 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:55.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:56.009 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:56.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
[MASTER] 05:54:56.097 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:56.099 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:56.185 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:56.187 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:56.280 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:54:56.281 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
** Write a test suite: 10 called: 0 to improve: false
** Write a test suite: 17 called: 1 to improve: false
[MASTER] 05:54:56.824 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:56.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 13 called: 0 to improve: false
** Write a test suite: 20 called: 1 to improve: false
[MASTER] 05:54:57.381 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7965753764509927755.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:54:57.383 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7965753764509927755.jar
* Writing tests to file
* Writing JUnit test case 'BattleStatistics_ESTest' to evosuite-tests
** Write a test suite: 13 called: 0 to improve: false
** Write a test suite: 20 called: 1 to improve: false
* Done!

* Computation finished
