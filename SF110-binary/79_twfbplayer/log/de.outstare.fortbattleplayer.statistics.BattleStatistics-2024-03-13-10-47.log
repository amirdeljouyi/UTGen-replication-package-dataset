* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: de.outstare.fortbattleplayer.statistics.BattleStatistics
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/79_twfbplayer/evosuite-files/evosuite.properties
* Connecting to master process on port 19966
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 10:47:19.578 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 10:47:19.585 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 10:47:19.586 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 10:47:19.620 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntBinaryOperator
[MASTER] 10:47:19.621 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.IntUnaryOperator
[MASTER] 10:47:19.660 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 10:47:19.660 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 10:47:19.662 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 10:47:21.971 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
* Finished analyzing classpath
* Generating tests for class de.outstare.fortbattleplayer.statistics.BattleStatistics
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 693
* Using seed 1710326837918
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 327 / 693
[MASTER] 10:47:22.943 [logback-1] WARN  TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:47:22.943 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             0%] [Cov:=====================>             60%][Progress:>                             1%] [Cov:=====================>             61%][Progress:>                             1%] [Cov:=====================>             62%][Progress:>                             1%] [Cov:=====================>             62%][Progress:>                             1%] [Cov:=====================>             62%][Progress:>                             2%] [Cov:=====================>             62%][MASTER] 10:47:26.930 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:>                             2%] [Cov:=====================>             62%][Progress:>                             2%] [Cov:=====================>             62%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            64%][Progress:>                             3%] [Cov:======================>            64%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          71%][Progress:=>                            4%] [Cov:=========================>         72%][Progress:=>                            4%] [Cov:=========================>         72%][Progress:=>                            4%] [Cov:=========================>         73%][Progress:=>                            4%] [Cov:=========================>         73%][Progress:=>                            5%] [Cov:=========================>         73%][Progress:=>                            5%] [Cov:=========================>         73%][Progress:=>                            5%] [Cov:=========================>         73%][Progress:=>                            5%] [Cov:=========================>         73%][Progress:=>                            5%] [Cov:=========================>         74%][Progress:=>                            6%] [Cov:=========================>         74%][Progress:=>                            6%] [Cov:=========================>         74%][Progress:=>                            6%] [Cov:=========================>         74%][Progress:=>                            6%] [Cov:=========================>         74%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][MASTER] 10:47:46.664 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:============================>      81%][Progress:======>                       20%] [Cov:============================>      81%][Progress:======>                       20%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       22%] [Cov:============================>      81%][Progress:======>                       22%] [Cov:============================>      81%][Progress:======>                       22%] [Cov:============================>      81%][Progress:======>                       22%] [Cov:============================>      81%][Progress:======>                       22%] [Cov:============================>      81%][Progress:======>                       22%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     28%] [Cov:=============================>     83%][Progress:========>                     29%] [Cov:=============================>     83%][Progress:========>                     29%] [Cov:=============================>     83%][Progress:========>                     29%] [Cov:=============================>     83%][Progress:========>                     29%] [Cov:=============================>     83%][Progress:========>                     29%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    31%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   34%] [Cov:=============================>     83%][MASTER] 10:48:32.393 [logback-1] WARN  TestCluster - Failed to check cache for javax.swing.RowFilter<M, I>.ComparisonType : Type points to itself
[Progress:==========>                   34%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     83%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 42%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                44%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:=============>                46%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               47%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:==============>               49%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:===============>              53%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:================>             56%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            57%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            58%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:=================>            59%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           60%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           61%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           62%] [Cov:=============================>     85%][Progress:==================>           63%] [Cov:=============================>     85%][Progress:==================>           63%] [Cov:=============================>     85%][Progress:==================>           63%] [Cov:=============================>     85%][Progress:==================>           63%] [Cov:=============================>     85%][Progress:==================>           63%] [Cov:=============================>     85%][Progress:==================>           63%] [Cov:=============================>     85%][Progress:===================>          64%] [Cov:=============================>     85%][Progress:===================>          64%] [Cov:=============================>     85%][Progress:===================>          64%] [Cov:=============================>     85%][Progress:===================>          64%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          65%] [Cov:=============================>     85%][Progress:===================>          66%] [Cov:=============================>     85%][Progress:===================>          66%] [Cov:=============================>     85%][Progress:===================>          66%] [Cov:=============================>     85%][Progress:===================>          66%] [Cov:=============================>     85%][Progress:===================>          66%] [Cov:=============================>     85%][Progress:===================>          66%] [Cov:=============================>     85%][Progress:====================>         67%] [Cov:=============================>     85%][Progress:====================>         67%] [Cov:=============================>     85%][Progress:====================>         67%] [Cov:=============================>     85%][Progress:====================>         67%] [Cov:=============================>     85%][Progress:====================>         68%] [Cov:=============================>     85%][Progress:====================>         68%] [Cov:=============================>     85%][Progress:====================>         68%] [Cov:=============================>     85%][Progress:====================>         68%] [Cov:=============================>     85%][Progress:====================>         68%] [Cov:=============================>     85%][Progress:====================>         68%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:====================>         69%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        70%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        71%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        72%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:=====================>        73%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       74%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       75%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:======================>       76%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      77%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      78%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:=======================>      79%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     80%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     82%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:=============================>     85%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 201s and 682 generations, 398049 statements, best individual has fitness: 87.0
* Generated before the refinement 64 tests with total length 477
statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfBayonets(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfBayonets = battleStatistics.numberOfBayonets(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        private final int numberOfSoldiers = 25;// Changed from 30 to a more descriptive value (e.g., 25)

        private final long totalGrenades = 1000000000L;// Changed from 1073741824 to a more descriptive value (e.g., 1000000000)

        BattleStatistics(numberOfSoldiers, totalGrenades);
        {
            this.numberOfSoldiers = numberOfSoldiers;
            this.totalGrenades = totalGrenades;
        }
        public int numberOfBayonets;
        CombatantSide side;
        {
            if (side == CombatantSide.ATTACKER) {
                return -1;// Changed from 0 to a more descriptive value (e.g., -1)

            } else {
                return this.numberOfSoldiers;// Changed from 30 to a more descriptive value (e.g., 25)

            }
        }
    }

    public enum CombatantSide {

        ATTACKER,
        DEFENDER;}
}
statement is: private final int numberOfSoldiers = 25// Changed from 30 to a more descriptive value (e.g., 25)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private final long totalGrenades = 1000000000L// Changed from 1073741824 to a more descriptive value (e.g., 1000000000)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: BattleStatistics(numberOfSoldiers, totalGrenades), class spoon.support.reflect.code.CtInvocationImpl
invocation is: BattleStatistics(numberOfSoldiers, totalGrenades) target is:  method is: BattleStatistics(int,long)
statement is: {
    this.numberOfSoldiers = numberOfSoldiers;
    this.totalGrenades = totalGrenades;
}, class spoon.support.reflect.code.CtBlockImpl
statement is: public int numberOfBayonets, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: CombatantSide side, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: {
    if (side == CombatantSide.ATTACKER) {
        return -1;// Changed from 0 to a more descriptive value (e.g., -1)

    } else {
        return this.numberOfSoldiers;// Changed from 30 to a more descriptive value (e.g., 25)

    }
}, class spoon.support.reflect.code.CtBlockImpl
* this is vulnerable: int _int = 25
* this is vulnerable: long _long = 1000000000L
TestCase is: int _int = 25;
long _long = 1000000000L;

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1098, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 31, "", arg4, arg5, "")
statement is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.newDestination(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.newDestination(simpleCombatant, simpleArea);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Mythril Shortsword", 833, 2599);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
        battleStatistics.newDestination(simpleCombatant, simpleArea);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Mythril Shortsword", 833, 2599), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.newDestination(simpleCombatant, simpleArea), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.newDestination(simpleCombatant, simpleArea) target is: battleStatistics method is: newDestination(SimpleCombatant,SimpleArea)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 31;
boolean _boolean = true;
boolean _boolean = false;
int _int = 1;
int _int = 31;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Mythril Shortsword";
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 31;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).newDestination(simpleCombatant, simpleArea);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(5, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfShinyOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(5, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfShinyOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfShinyOil(combatantSide) target is: battleStatistics method is: numberOfShinyOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfShinyOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 5;
int _int = 2;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfShinyOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(30, 30)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(30, 30);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        int numberOfLoadingChamersOrEnhancedPatrons = getNumberOfLoadingChamersOrEnhancedPatrons(combatantSide);
        battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(30, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: int numberOfLoadingChamersOrEnhancedPatrons = getNumberOfLoadingChamersOrEnhancedPatrons(combatantSide), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: getNumberOfLoadingChamersOrEnhancedPatrons(combatantSide) target is:  method is: getNumberOfLoadingChamersOrEnhancedPatrons(<unknown>)
statement is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide) target is: battleStatistics method is: numberOfLoadingChamerOrEnhancedPatrons(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfLoadingChamerOrEnhancedPatrons(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 30;
int _int = 30;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfLoadingChamerOrEnhancedPatrons(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "`_azL", arg4, arg5, "`_azL")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfHipFlasks(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, false, false, 2, 3, false, 4, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(6, "A sword", 7, 8);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 9, "Joe", characterClass, simpleWeapon, "A shield");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfHipFlasks(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, false, false, 2, 3, false, 4, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 5, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(6, "A sword", 7, 8), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 9, "Joe", characterClass, simpleWeapon, "A shield"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfHipFlasks(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(combatantSide) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 1;
boolean _boolean = false;
boolean _boolean = false;
int _int = 2;
int _int = 3;
boolean _boolean = false;
int _int = 4;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 6;
String string = "A sword";
int _int = 7;
int _int = 8;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 9;
String string = "Joe";
String string = "A shield";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfAttackBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfAttackBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfAttackBonus(combatantSide) target is: battleStatistics method is: amountOfAttackBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfAttackBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfAttackBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2))
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfGraphitLubricants(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfGraphitLubricants(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfGraphitLubricants(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfGraphitLubricants(combatantSide) target is: battleStatistics method is: numberOfGraphitLubricants(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfGraphitLubricants(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfGraphitLubricants(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.totalSwaps(combatantSide);
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(100, 5000);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(100, 5000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 7
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4068;
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);
int _int = 100;
int _int = 5000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "`_azL", arg4, arg5, "`_azL")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg0, (Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.aimsAt(simpleCombatant, (Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Heavy Blade", 0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Heavy Blade", characterClass, simpleWeapon, "Heavy Blade");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.aimsAt(simpleCombatant, ((Combatant) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Heavy Blade", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Heavy Blade", characterClass, simpleWeapon, "Heavy Blade"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.aimsAt(simpleCombatant, ((Combatant) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, ((Combatant) (null))) target is: battleStatistics method is: aimsAt(SimpleCombatant,Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Heavy Blade";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Heavy Blade";
String string = "Heavy Blade";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199))
statement is: getFieldStatistics()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.Area, de.outstare.fortbattleplayer.statistics.AreaStatistic>
statement code is: Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics()
test data is: BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
battleStatistics.getFieldStatistics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(20, 43);
        battleStatistics.getFieldStatistics();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(20, 43), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getFieldStatistics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getFieldStatistics() target is: battleStatistics method is: getFieldStatistics()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getFieldStatistics()Ljava/util/Map;
TestCase is: int _int = 20;
int _int = 43;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getFieldStatistics();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.numberOfFettesOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.numberOfFettesOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfFettesOil(combatantSide) target is: battleStatistics method is: numberOfFettesOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfFettesOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfFettesOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 5);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfHipFlasks(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfHipFlasks(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfHipFlasks(combatantSide) target is: battleStatistics method is: numberOfHipFlasks(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfHipFlasks(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: getHitsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        assertEquals(50, battleStatistics.getHitsPerRound());
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(50, battleStatistics.getHitsPerRound()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(50, battleStatistics.getHitsPerRound()) target is:  method is: assertEquals(int,<unknown>)
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328))
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int criticalHits = battleStatistics.criticalHits(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-1328, -1328);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.criticalHits(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-1328, -1328), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.criticalHits(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHits(combatantSide) target is: battleStatistics method is: criticalHits(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: criticalHits(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
CombatantSide combatantSide = null;
battleStatistics.criticalHits(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", arg4, arg5, "qhdfl?OolHT")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1000, 1000);
        Point point = new Point(-50, 50);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(200, false, false, 4068, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M16", 2, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "John Doe", characterClass, simpleWeapon, "M16");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1000, 1000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(-50, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(200, false, false, 4068, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M16", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "John Doe", characterClass, simpleWeapon, "M16"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1000;
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 200;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4068;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "M16";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "John Doe";
String string = "M16";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: getShotsPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.getShotsPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(10, 20);
        battleStatistics.getShotsPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.getShotsPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getShotsPerRound() target is: battleStatistics method is: getShotsPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getShotsPerRound()Ljava/util/Map;
TestCase is: int _int = 10;
int _int = 20;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
((BattleStatistics) _int).getShotsPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(50)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-1))
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(50)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.setRound(50);
        battleStatistics.setRound(-1);
        battleStatistics.setRound(50);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(50) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(-1) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: battleStatistics.setRound(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(50) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
((BattleStatistics) _int).setRound(_int);
int _int = null;
((BattleStatistics) _int).setRound(_int);
int _int = 50;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "`_azL", arg4, arg5, "`_azL")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(4295)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(3000)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3000);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "Awesome Sword", 100, 1200);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "John Doe", characterClass, simpleWeapon, "John's Sword");
        battleStatistics.setRound(4295);
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.setRound(3000);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(123456789, "Awesome Sword", 100, 1200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "John Doe", characterClass, simpleWeapon, "John's Sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(4295), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4295) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.setRound(3000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(3000) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "Awesome Sword";
int _int = 100;
int _int = 1200;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
String string = "John Doe";
String string = "John's Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
int _int = 4295;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 3000;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", arg4, arg5, "qhdfl?OolHT")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(50)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(2)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(50);
battleStatistics.setRound(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, "offline");
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "the sword of light", 2, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "not found: /bayonetdmg.csv", characterClass, simpleWeapon, "the sword of light");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.setRound(50);
        battleStatistics.setRound(2);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, "offline"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "the sword of light", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "not found: /bayonetdmg.csv", characterClass, simpleWeapon, "the sword of light"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.setRound(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(50) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.setRound(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
TestCase is: int _int = 4068;
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4068;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
String string = "offline";
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, (boolean) string);
int _int = 50;
String string = "the sword of light";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "not found: /bayonetdmg.csv";
String string = "the sword of light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 50;
((BattleStatistics) _int).setRound(_int);
int _int = 2;
((BattleStatistics) _int).setRound(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", arg4, arg5, "qhdfl?OolHT")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M16A2", 2, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "M16A2");
        battleStatistics.isOnline(simpleCombatant, false);
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "M16A2", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "M16A2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4068;
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4068;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "M16A2";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "the CSV file with the bayonet damages was not found: /bayonetdmg.csv";
String string = "M16A2";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", arg4, arg5, "qhdfl?OolHT")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int percentAbleToShoot = battleStatistics.percentAbleToShoot(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(12345, 67890);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 12345, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1234567890, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Awesome Sword", 0, 4);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 123456789, "the CSV file with the sword damages was not found: /sworddmg.csv", characterClass, simpleWeapon, "Awesome Sword");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.percentAbleToShoot(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(12345, 67890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 12345, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1234567890, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Awesome Sword", 0, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 123456789, "the CSV file with the sword damages was not found: /sworddmg.csv", characterClass, simpleWeapon, "Awesome Sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.percentAbleToShoot(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.percentAbleToShoot(combatantSide) target is: battleStatistics method is: percentAbleToShoot(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: percentAbleToShoot(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 12345;
int _int = 67890;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 12345;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1234567890;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Awesome Sword";
int _int = 0;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 123456789;
String string = "the CSV file with the sword damages was not found: /sworddmg.csv";
String string = "Awesome Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", arg4, arg5, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4056;
int _int = 4056;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 4056;
int _int = 4056;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Lancer", 0, 15);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Tanky McTankface", characterClass, simpleWeapon, "Sniper");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Lancer", 0, 15), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Tanky McTankface", characterClass, simpleWeapon, "Sniper"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Lancer";
int _int = 0;
int _int = 15;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Tanky McTankface";
String string = "Sniper";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfOffliners = battleStatistics.numberOfOffliners(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(1, false, false, 10, 15, true, 4, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 250, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Golden Sword", 35, 456);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Awesome Warrior", characterClass, simpleWeapon, "Strongest Sword in the Land");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfOffliners(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1, false, false, 10, 15, true, 4, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 250, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(100, "Golden Sword", 35, 456), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Awesome Warrior", characterClass, simpleWeapon, "Strongest Sword in the Land"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfOffliners(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfOffliners(combatantSide) target is: battleStatistics method is: numberOfOffliners(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfOffliners(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 1;
boolean _boolean = false;
boolean _boolean = false;
int _int = 10;
int _int = 15;
boolean _boolean = true;
int _int = 4;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 250;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Golden Sword";
int _int = 35;
int _int = 456;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Awesome Warrior";
String string = "Strongest Sword in the Land";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4095, 4095)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, ",", arg4, arg5, ",")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, ",", characterClass, simpleWeapon, ",");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        Point point = new Point(100, 100);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(20, "dagger", 5, 1);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 20, "adventurer", characterClass, simpleWeapon, "dagger");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.targetNoOne(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4095, 4095), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: Point point = new Point(100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 100, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(20, "dagger", 5, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 20, "adventurer", characterClass, simpleWeapon, "dagger"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.targetNoOne(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(((CombatantSide) (null))) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4095;
int _int = 4095;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 4095;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 20;
String string = "dagger";
int _int = 5;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 20;
String string = "adventurer";
String string = "dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", arg4, arg5, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics("1024x768", "1024x768");
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, "1024x768", "1024x768", true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.roundsTillOnline(combatantSide);
        // Example data:
        // battleStatistics = new BattleStatistics("1024x768", "1024x768");
        // combatantSide = CombatantSide.DEFENDER;
        // point = new Point();
        // simpleSector = new SimpleSector(0, true, true, "1024x768", "1024x768", true, 0, characterClass);
        // simpleArea = new SimpleArea(point, simpleSector);
        // combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        // simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
        // simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
        // battleStatistics.roundsTillOnline(combatantSide); }}
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics("1024x768", "1024x768"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, "1024x768", "1024x768", true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Example data:, class spoon.support.reflect.code.CtCommentImpl
statement is: // battleStatistics = new BattleStatistics("1024x768", "1024x768");, class spoon.support.reflect.code.CtCommentImpl
statement is: // combatantSide = CombatantSide.DEFENDER;, class spoon.support.reflect.code.CtCommentImpl
statement is: // point = new Point();, class spoon.support.reflect.code.CtCommentImpl
statement is: // simpleSector = new SimpleSector(0, true, true, "1024x768", "1024x768", true, 0, characterClass);, class spoon.support.reflect.code.CtCommentImpl
statement is: // simpleArea = new SimpleArea(point, simpleSector);, class spoon.support.reflect.code.CtCommentImpl
statement is: // combatantState = new CombatantState(simpleArea, 0, simpleArea, true);, class spoon.support.reflect.code.CtCommentImpl
statement is: // simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);, class spoon.support.reflect.code.CtCommentImpl
statement is: // simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");, class spoon.support.reflect.code.CtCommentImpl
statement is: // battleStatistics.roundsTillOnline(combatantSide); }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "1024x768";
String string = "1024x768";
BattleStatistics battleStatistics = new BattleStatistics((int) string, (int) string);
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
String string = "1024x768";
String string = "1024x768";
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) string, (int) string, _boolean, _int, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) string, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) string).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) string).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(22, 22)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 22, "", arg4, arg5, "")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(22, 22);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 22, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(22, 44);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 100, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Mythril Sword", 25, 5);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Mythril Warrior", characterClass, simpleWeapon, "Mythril");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(22, 44), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 100, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Mythril Sword", 25, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Mythril Warrior", characterClass, simpleWeapon, "Mythril"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 22;
int _int = 44;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 100;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Mythril Sword";
int _int = 25;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Mythril Warrior";
String string = "Mythril";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double roundsTillOnline = battleStatistics.roundsTillOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(50, false, true, 100, 100, false, 90, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 42, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1000, "Rocket Launcher", 500, 2000);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1000, "Rocket Launcher", characterClass, simpleWeapon, "Rocket Launcher");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.roundsTillOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(50, false, true, 100, 100, false, 90, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 42, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1000, "Rocket Launcher", 500, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1000, "Rocket Launcher", characterClass, simpleWeapon, "Rocket Launcher"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.roundsTillOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.roundsTillOnline(combatantSide) target is: battleStatistics method is: roundsTillOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: roundsTillOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 50;
boolean _boolean = false;
boolean _boolean = true;
int _int = 100;
int _int = 100;
boolean _boolean = false;
int _int = 90;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 42;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1000;
String string = "Rocket Launcher";
int _int = 500;
int _int = 2000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1000;
String string = "Rocket Launcher";
String string = "Rocket Launcher";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13))
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", arg4, arg5, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-13, -13);
        Point point = new Point(10, 20);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, -13, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -13, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-13, -13), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, -13, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -13, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 19
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _boolean, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
((SimpleCombatant) simpleArea).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", arg4, arg5, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point(100, 200);
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(5, true, true, 4056, 4056, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(5, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 5, 5);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4056, 4056), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(5, true, true, 4056, 4056, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 10, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(5, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 5, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4056;
int _int = 4056;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
boolean _boolean = true;
boolean _boolean = true;
int _int = 4056;
int _int = 4056;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 5;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-16), (-16))
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-16), "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double averageRoundsOnline = battleStatistics.averageRoundsOnline(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-16, -16);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, -16, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -16, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.averageRoundsOnline(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-16, -16), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, -16, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -16, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.averageRoundsOnline(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.averageRoundsOnline(combatantSide) target is: battleStatistics method is: averageRoundsOnline(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: averageRoundsOnline(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "!;?&Zo4 <s8[%fUY";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "!;?&Zo4 <s8[%fUY";
String string = "!;?&Zo4 <s8[%fUY";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) simpleSector).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.averageRoundsOnline(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 4068, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4068, "qhdfl?OolHT", arg4, arg5, "round statistics for players and shots differ!")
statement is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isOnline(arg0, false)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "qhdfl?OolHT", characterClass, simpleWeapon, "round statistics for players and shots differ!");
battleStatistics.isOnline(simpleCombatant, false);
simpleCombatant.addObserver(battleStatistics);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Adamantine battleaxe", 2, 2);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "Abraham", characterClass, simpleWeapon, "round statistics for players and shots differ!");
        battleStatistics.isOnline(simpleCombatant, false);
        simpleCombatant.addObserver(battleStatistics);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Adamantine battleaxe", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "Abraham", characterClass, simpleWeapon, "round statistics for players and shots differ!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isOnline(simpleCombatant, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isOnline(simpleCombatant, false) target is: battleStatistics method is: isOnline(SimpleCombatant,boolean)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
TestCase is: int _int = 4068;
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4068;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 4068;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Adamantine battleaxe";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "Abraham";
String string = "round statistics for players and shots differ!";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "round statistics for players and shots differ!");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((SimpleCombatant) _int).addObserver(battleStatistics);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(2)
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "#((G", arg4, arg5, "#((G")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
battleStatistics.setRound(2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "#((G", characterClass, simpleWeapon, "#((G");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        Point point = new Point(123, 456);
        battleStatistics.setRound(2);
        CharacterClass characterClass = CharacterClass.WARRIOR;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(5, "Stormbringer", 123456789, "Fiery Hammer");
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Stormbringer", characterClass, simpleWeapon, "Fiery Hammer");
        battleStatistics.setRound(0);
        simpleCombatant.addObserver(battleStatistics);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(123, 456), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: CharacterClass characterClass = CharacterClass.WARRIOR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WARRIOR is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(5, "Stormbringer", 123456789, "Fiery Hammer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 10, "Stormbringer", characterClass, simpleWeapon, "Fiery Hammer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(0) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 9, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 25
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2;
((BattleStatistics) _int).setRound(_int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) arg1);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "Stormbringer";
int _int = 123456789;
String string = "Fiery Hammer";
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, (int) string);
int _int = 10;
String string = "Stormbringer";
String string = "Fiery Hammer";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#((G");
int _int = 0;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _int).addObserver(battleStatistics);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", arg4, arg5, "qhdfl?OolHT")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "The Bayonet", 2, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "The Bayonet");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "The Bayonet", 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "The Bayonet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 4068;
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 4068;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "The Bayonet";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "the CSV file with the bayonet damages was not found: /bayonetdmg.csv";
String string = "The Bayonet";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "`_azL", arg4, arg5, "`_azL")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "`_azL", arg4, arg5, "`_azL")
statement is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.aimsAt(arg1, arg1)
statement is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String targetNoOne = battleStatistics.targetNoOne(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Magnum", 0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Morty Smith", characterClass, simpleWeapon, "Morty Smith");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Rick Sanchez", characterClass, simpleWeapon, "Rick Sanchez");
        battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
        battleStatistics.targetNoOne(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Magnum", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Morty Smith", characterClass, simpleWeapon, "Morty Smith"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Rick Sanchez", characterClass, simpleWeapon, "Rick Sanchez"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.aimsAt(simpleCombatant, simpleCombatant) target is: battleStatistics method is: aimsAt(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.targetNoOne(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.targetNoOne(combatantSide) target is: battleStatistics method is: targetNoOne(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: targetNoOne(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Magnum";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Morty Smith";
String string = "Morty Smith";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
int _int = 0;
String string = "Rick Sanchez";
String string = "Rick Sanchez";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-16), (-16))
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-16), "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfSchmierOil = battleStatistics.numberOfSchmierOil(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-16, -16);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, -16, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Wooden Sword", 0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -16, "Wooden Sword", characterClass, simpleWeapon, "Wooden Sword");
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfSchmierOil(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-16, -16), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, -16, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "Wooden Sword", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -16, "Wooden Sword", characterClass, simpleWeapon, "Wooden Sword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 20
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfSchmierOil(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfSchmierOil(combatantSide) target is: battleStatistics method is: numberOfSchmierOil(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: numberOfSchmierOil(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Wooden Sword";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Wooden Sword";
String string = "Wooden Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) simpleSector).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfSchmierOil(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(3504, 3504)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
battleStatistics.switchedPosList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.switchedPosList("East");
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.switchedPosList("East"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList("East") target is: battleStatistics method is: switchedPosList(java.lang.String)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
String string = "East";
((BattleStatistics) _int).switchedPosList((CombatantSide) string);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1249, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long criticalHitDamage = battleStatistics.criticalHitDamage(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.criticalHitDamage(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1249, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.criticalHitDamage(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalHitDamage(combatantSide) target is: battleStatistics method is: criticalHitDamage(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalHitDamage(Lde/outstare/fortbattleplayer/model/CombatantSide;)J
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1249;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).criticalHitDamage(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
battleStatistics.critList((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
        battleStatistics.critList(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.critList(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(((CombatantSide) (null))) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 30;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "`_azL", arg4, arg5, "`_azL")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(4295)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder((CombatantSide) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder((CombatantSide) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(123456789, true, false, 0.99999999, 0.5, false, 1.0E-8, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 4295, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Gladius", 5.67, 3.14);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "Aeneas", characterClass, simpleWeapon, "Dagger");
        battleStatistics.setRound(4295);
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.turnOrder(((CombatantSide) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(123456789, true, false, 0.99999999, 0.5, false, 1.0E-8, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 4295, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Gladius", 5.67, 3.14), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 987654321, "Aeneas", characterClass, simpleWeapon, "Dagger"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(4295), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(4295) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.turnOrder(((CombatantSide) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(((CombatantSide) (null))) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 123456789;
boolean _boolean = true;
boolean _boolean = false;
double _double = 0.99999999;
double _double = 0.5;
boolean _boolean = false;
double _double = 1.0E-8;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) _double, (int) _double, _boolean, (int) _double, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 4295;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Gladius";
double _double = 5.67;
double _double = 3.14;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, (int) _double);
int _int = 987654321;
String string = "Aeneas";
String string = "Dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
int _int = 4295;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _double).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13))
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", arg4, arg5, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound((-13))
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
battleStatistics.setRound((-13));
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 1);
        Point point = new Point(5, 5);
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 13, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 123, 456);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
        battleStatistics.setRound(1);
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(5, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 13, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 123, 456), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 13, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(1) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 13;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
int _int = 123;
int _int = 456;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1, "", arg4, arg5, "")
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(0)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.model.Combatant>
statement code is: List<Combatant> turnOrder = battleStatistics.turnOrder(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        Point point = new Point(0, 0);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Gladius", 5, 2);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Galen", characterClass, simpleWeapon, "Mage");
        battleStatistics.setRound(0);
        simpleCombatant.addObserver(battleStatistics);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        battleStatistics.turnOrder(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Gladius", 5, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "Galen", characterClass, simpleWeapon, "Mage"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(0) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: battleStatistics.turnOrder(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.turnOrder(combatantSide) target is: battleStatistics method is: turnOrder(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: turnOrder(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Gladius";
int _int = 5;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Galen";
String string = "Mage";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 0;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(100, 100)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 100);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
        // Change the primitive values and Strings to more illustrative examples
        int numberOfMoves = 150;
        String playerName = "John";
        battleStatistics.addMove(playerName, numberOfMoves);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Change the primitive values and Strings to more illustrative examples
int numberOfMoves = 150, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String playerName = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: battleStatistics.addMove(playerName, numberOfMoves), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.addMove(playerName, numberOfMoves) target is: battleStatistics method is: addMove(java.lang.String,int)
* this is vulnerable: int _int = 150
* this is vulnerable: String string = "John"
TestCase is: int _int = 100;
int _int = 100;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);
int _int = 150;
String string = "John";

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        battleStatistics.critList(combatantSide);
        // Change the values of "0" and "0" to more illustrative examples.
        battleStatistics = new BattleStatistics(12, 37);
        combatantSide = CombatantSide.DEFENDER;
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Change the values of "0" and "0" to more illustrative examples.
battleStatistics = new BattleStatistics(12, 37), class spoon.support.reflect.code.CtAssignmentImpl
statement is: combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtAssignmentImpl
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(2714, 2714)
statement is: setRound(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.setRound(2714)
statement is: getNotShootersPerRound()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<de.outstare.fortbattleplayer.model.CombatantSide, ? extends de.outstare.fortbattleplayer.statistics.LabeledData>
statement code is: Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound()
test data is: BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
battleStatistics.getNotShootersPerRound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(5, 10);
        battleStatistics.setRound(2714);
        battleStatistics.getNotShootersPerRound();
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(5, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.setRound(2714), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.setRound(2714) target is: battleStatistics method is: setRound(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: setRound(I)V
statement is: battleStatistics.getNotShootersPerRound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.getNotShootersPerRound() target is: battleStatistics method is: getNotShootersPerRound()
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: getNotShootersPerRound()Ljava/util/Map;
TestCase is: int _int = 5;
int _int = 10;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 2714;
((BattleStatistics) _int).setRound(_int);
((BattleStatistics) _int).getNotShootersPerRound();

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 13, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 50, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-6360), (String) null, arg4, arg5, (String) null)
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6360), (String) null, characterClass, simpleWeapon, (String) null);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, -495, true, -6360, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-6360, "", 13, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -6360, ((String) (null)), characterClass, simpleWeapon, ((String) (null)));
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, -495, true, -6360, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-6360, "", 13, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -6360, ((String) (null)), characterClass, simpleWeapon, ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 19
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 4422;
boolean _boolean = true;
boolean _boolean = true;
int _int = 13;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, true, (-6360), (CharacterClass) _int);
int _int = 0;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "";
int _int = 13;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (-6360), (String) null, (CharacterClass) _int, (Weapon) _boolean, (String) null);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 50, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 15, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "could not determine turn order for ", arg4, arg5, "could not determine turn order for ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(-1000, true, false, 50, 50, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(13, "Sword of Light", 100, 50);
        SimpleCombatant simpleCombatant = new SimpleCombatant("Joe", combatantSide, combatantState, 0, characterClass, simpleWeapon, "Rock");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.amountOfDefenseBonus(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1000, true, false, 50, 50, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, "Sword of Light", 100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant("Joe", combatantSide, combatantState, 0, characterClass, simpleWeapon, "Rock"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.amountOfDefenseBonus(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.amountOfDefenseBonus(combatantSide) target is: battleStatistics method is: amountOfDefenseBonus(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: amountOfDefenseBonus(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
boolean _boolean = true;
boolean _boolean = false;
int _int = 50;
int _int = 50;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, (boolean) _int, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 15;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = "Sword of Light";
int _int = 100;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Joe";
int _int = 0;
String string = "Rock";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) string, combatantState, _int, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, true)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code fragment
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point(100, 200);
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
        SimpleWeapon simpleWeapon = new SimpleWeapon(150, "Iron Sword", 20, 50);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Grimbold Ironfist", characterClass, simpleWeapon, "Grimbold Ironfist");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.combatantLifetime(simpleCombatant);
    }
}
statement is: // Improved test data for the given code fragment
BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(150, "Iron Sword", 20, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 100, "Grimbold Ironfist", characterClass, simpleWeapon, "Grimbold Ironfist"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 23
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.combatantLifetime(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(simpleCombatant) target is: battleStatistics method is: combatantLifetime(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 0;
int _int = 0;
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 150;
String string = "Iron Sword";
int _int = 20;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Grimbold Ironfist";
String string = "Grimbold Ironfist";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824)
statement is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.combatantLifetime((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
        battleStatistics.combatantLifetime(new Combatant("Alice", 50));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.combatantLifetime(new Combatant("Alice", 50)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.combatantLifetime(new Combatant("Alice", 50)) target is: battleStatistics method is: combatantLifetime(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: combatantLifetime(Lde/outstare/fortbattleplayer/model/Combatant;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1073741824;
int _int = 1073741824;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).combatantLifetime(combatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.statistics.WeaponModCounter$BayonetCounter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.WeaponModCounter$BayonetCounter
statement code is: WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter()
statement is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int countWeaponMods = battleStatistics.countWeaponMods(arg0, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(-1282, -1282);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
        weaponModCounter_BayonetCounter.setCount(5);
        battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(-1282, -1282), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: weaponModCounter_BayonetCounter.setCount(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: weaponModCounter_BayonetCounter.setCount(5) target is: weaponModCounter_BayonetCounter method is: setCount(int)
statement is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter) target is: battleStatistics method is: countWeaponMods(CombatantSide,WeaponModCounter.BayonetCounter)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: countWeaponMods(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/statistics/WeaponModCounter;)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
CombatantSide combatantSide = null;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = null;
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.SOLDIER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.SOLDIER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(0, 50, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 15, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "could not determine turn order for ", arg4, arg5, "could not determine turn order for ")
statement is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.criticalShot(arg1, arg1, 0)
statement is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<de.outstare.fortbattleplayer.statistics.CriticalHit>
statement code is: List<CriticalHit> critList = battleStatistics.critList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.SOLDIER;
        SimpleSector simpleSector = new SimpleSector(0, true, true, -1264, 50, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(13, "Sword of Ares", 50, 50);
        SimpleCombatant attacker = new SimpleCombatant(combatantSide, combatantState, 0, "Attacker", characterClass, simpleWeapon, "Attacker");
        SimpleCombatant defender = new SimpleCombatant(combatantSide, combatantState, 0, "Defender", characterClass, simpleWeapon, "Defender");
        battleStatistics.criticalShot(attacker, defender, 1);
        battleStatistics.critList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.SOLDIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.SOLDIER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, true, true, -1264, 50, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(13, "Sword of Ares", 50, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant attacker = new SimpleCombatant(combatantSide, combatantState, 0, "Attacker", characterClass, simpleWeapon, "Attacker"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant defender = new SimpleCombatant(combatantSide, combatantState, 0, "Defender", characterClass, simpleWeapon, "Defender"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.criticalShot(attacker, defender, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.criticalShot(attacker, defender, 1) target is: battleStatistics method is: criticalShot(SimpleCombatant,SimpleCombatant,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V
statement is: battleStatistics.critList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.critList(combatantSide) target is: battleStatistics method is: critList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: critList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/List;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
int _int = 50;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, (int) _boolean, (boolean) _int, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 15;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = "Sword of Ares";
int _int = 50;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Attacker";
String string = "Attacker";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
int _int = 0;
String string = "Defender";
String string = "Defender";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279))
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea((-1279), (-1279), arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, (-2385), arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-1279), "almost crit by ", arg4, arg5, "almost crit by ")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), characterClass);
SimpleArea simpleArea = new SimpleArea((-1279), (-1279), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2385), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1279), "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-1279, -1279);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(-1279, false, false, -1279, -1279, false, -2385, characterClass);
        SimpleArea simpleArea = new SimpleArea(-1279, -1279, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, -2385, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(-2385, "almost crit by ", 50, 1983);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1279, "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-1279, -1279), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(-1279, false, false, -1279, -1279, false, -2385, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(-1279, -1279, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, -2385, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(-2385, "almost crit by ", 50, 1983), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, -1279, "almost crit by ", characterClass, simpleWeapon, "almost crit by "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 7, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 14
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
boolean _boolean = false;
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) _boolean, _boolean, _boolean, (-1279), (-1279), false, (-2385), (CharacterClass) _boolean);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1279), (Sector) _boolean);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "almost crit by ";
int _int = 50;
int _int = 1983;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1983);
String string = "almost crit by ";
String string = "almost crit by ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _boolean, (Weapon) _boolean, "almost crit by ");
((SimpleCombatant) combatantState).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.DUELANT type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.DUELANT
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 0, "!;?&Zo4 <s8[%fUY", arg4, arg5, "!;?&Zo4 <s8[%fUY")
statement is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleCombatant.addObserver(arg0)
statement is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.DUELANT;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Longsword", 3, 5);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Geralt of Rivia", characterClass, simpleWeapon, "Geralt of Rivia");
        simpleCombatant.addObserver(battleStatistics);
        battleStatistics.numberOfMovesPerPlayer(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.DUELANT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.DUELANT is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(10, "Longsword", 3, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Geralt of Rivia", characterClass, simpleWeapon, "Geralt of Rivia"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleCombatant.addObserver(battleStatistics), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleCombatant.addObserver(battleStatistics) target is: simpleCombatant method is: addObserver(BattleStatistics)
source statement: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V callee: VariableReference: Statement 8, type de.outstare.fortbattleplayer.model.impl.SimpleCombatantindex is: 24
Matched Method is: addObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V
statement is: battleStatistics.numberOfMovesPerPlayer(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.numberOfMovesPerPlayer(combatantSide) target is: battleStatistics method is: numberOfMovesPerPlayer(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: numberOfMovesPerPlayer(Lde/outstare/fortbattleplayer/model/CombatantSide;)D
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Longsword";
int _int = 3;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Geralt of Rivia";
String string = "Geralt of Rivia";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-809), (-809))
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round((-934.36984))
test data is: BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((-934.36984));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(-809, -809);
        battleStatistics.round(-934.36984);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(-809, -809), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(-934.36984), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(-934.36984) target is: battleStatistics method is: round(double)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: round(D)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
double _double = null;
battleStatistics.round(_double);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.round(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 50);
        battleStatistics.round(25);// This simulates a battle where one player has 100 health and the other player has 50 health. The first player attacks and deals 25 damage to the second player. }}

    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 50), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(25)// This simulates a battle where one player has 100 health and the other player has 50 health. The first player attacks and deals 25 damage to the second player. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(25)// This simulates a battle where one player has 100 health and the other player has 50 health. The first player attacks and deals 25 damage to the second player. }}
 target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
TestCase is: int _int = 100;
int _int = 50;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 25;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: round(D)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int round = battleStatistics.round(0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        battleStatistics.round(5);
        battleStatistics.round(3);
        battleStatistics.round(7);
        battleStatistics.round(12);
        System.out.println("Final score: " + battleStatistics.getScore());
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.round(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(5) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
statement is: battleStatistics.round(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(3) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
statement is: battleStatistics.round(7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(7) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
statement is: battleStatistics.round(12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.round(12) target is: battleStatistics method is: round(int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: round(D)I
statement is: System.out.println("Final score: " + battleStatistics.getScore()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Final score: " + battleStatistics.getScore()) target is: System.out method is: println(char[])
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 5;
((BattleStatistics) _int).round(_int);
int _int = 3;
((BattleStatistics) _int).round(_int);
int _int = 7;
((BattleStatistics) _int).round(_int);
int _int = 12;
((BattleStatistics) _int).round(_int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 1445)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.ADVENTURER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1445, 1445, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1162, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 1162, "C3GqwDLx} ", arg4, arg5, "iNIq9")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Set<de.outstare.fortbattleplayer.statistics.PositionSwitch>
statement code is: Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.ADVENTURER;
        SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
        SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon("Longsword", "C3GqwDLx} ", 0, 0);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.switchedPosList(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 1445), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.ADVENTURER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.ADVENTURER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("Longsword", "C3GqwDLx} ", 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.switchedPosList(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.switchedPosList(combatantSide) target is: battleStatistics method is: switchedPosList(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: switchedPosList(Lde/outstare/fortbattleplayer/model/CombatantSide;)Ljava/util/Set;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 1445;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 1445;
boolean _boolean = true;
boolean _boolean = true;
int _int = 1162;
int _int = 0;
boolean _boolean = true;
int _int = 886;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1445;
int _int = 1445;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1162;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Longsword";
String string = "C3GqwDLx} ";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
int _int = 1162;
String string = "C3GqwDLx} ";
String string = "iNIq9";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "iNIq9");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.DEFENDER
statement is: java.awt.Point()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.Point
statement code is: Point point = new Point()
statement is: CharacterClass characterClass = CharacterClass.GREENHORN type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.GREENHORN
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(Ljava/awt/Point;Lde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(arg0, arg1)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 0, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, (-159), "?", arg4, arg5, "players")
statement is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasSwappedPosition(arg1, arg1)
statement is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int totalSwaps = battleStatistics.totalSwaps(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-159), "?", characterClass, simpleWeapon, "players");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(0, 0);
        CombatantSide combatantSide = CombatantSide.DEFENDER;
        Point point = new Point();
        CharacterClass characterClass = CharacterClass.GREENHORN;
        SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(point, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Greenhorn's Sword", 5, 1991);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Greenhorn", characterClass, simpleWeapon, "players");
        battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
        battleStatistics.totalSwaps(combatantSide);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.DEFENDER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.DEFENDER is CombatantSide
statement is: Point point = new Point(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharacterClass characterClass = CharacterClass.GREENHORN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.GREENHORN is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(point, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(1, "Greenhorn's Sword", 5, 1991), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "Greenhorn", characterClass, simpleWeapon, "players"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant) target is: battleStatistics method is: hasSwappedPosition(SimpleCombatant,SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V
statement is: battleStatistics.totalSwaps(combatantSide), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.totalSwaps(combatantSide) target is: battleStatistics method is: totalSwaps(CombatantSide)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: totalSwaps(Lde/outstare/fortbattleplayer/model/CombatantSide;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Point point = new Point();
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Greenhorn's Sword";
int _int = 5;
int _int = 1991;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Greenhorn";
String string = "players";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "players");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1098, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 31, "", arg4, arg5, "")
statement is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isHit(arg0, 50, 1)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 50, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon("The Sword of Light", 50, 833, 2599);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "The Brave Knight", characterClass, simpleWeapon, "The Noble Lord");
        battleStatistics.isHit(simpleCombatant, 50, 1);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon("The Sword of Light", 50, 833, 2599), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, "The Brave Knight", characterClass, simpleWeapon, "The Noble Lord"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isHit(simpleCombatant, 50, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isHit(simpleCombatant, 50, 1) target is: battleStatistics method is: isHit(SimpleCombatant,int,int)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 31;
boolean _boolean = true;
boolean _boolean = false;
int _int = 1;
int _int = 31;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "The Sword of Light";
int _int = 50;
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, _int);
int _int = 50;
int _int = 1;
int _int = null;
((BattleStatistics) _int).isHit((Combatant) _int, _int, _int);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314))
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<de.outstare.fortbattleplayer.model.CombatantSide, de.outstare.fortbattleplayer.statistics.RoundStatistics>
statement code is: HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>()
statement is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, arg1)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
        battleStatistics.addAndResetRoundCounter(((Map<CombatantSide, AtomicInteger>) (null)), hashMap);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.addAndResetRoundCounter(((Map<CombatantSide, AtomicInteger>) (null)), hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.addAndResetRoundCounter(((Map<CombatantSide, AtomicInteger>) (null)), hashMap) target is: battleStatistics method is: addAndResetRoundCounter(Map,HashMap)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: addAndResetRoundCounter(Ljava/util/Map;Ljava/util/Map;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
HashMap<CombatantSide, RoundStatistics> hashMap = null;
((BattleStatistics) _int).addAndResetRoundCounter(hashMap, hashMap);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328))
statement is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.hasMoved((Combatant) null, (Area) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
battleStatistics.hasMoved((Combatant) null, (Area) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BattleStatistics battleStatistics = new BattleStatistics(Integer.MAX_VALUE, Integer.MIN_VALUE);
        battleStatistics.hasMoved(((Combatant) (null)), ((Area) (null)));
    }
}
statement is: // Improved test data
BattleStatistics battleStatistics = new BattleStatistics(Integer.MAX_VALUE, Integer.MIN_VALUE), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.hasMoved(((Combatant) (null)), ((Area) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.hasMoved(((Combatant) (null)), ((Area) (null))) target is: battleStatistics method is: hasMoved(Combatant,Area)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 0
Matched Method is: hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
Combatant combatant = null;
Area area = null;
battleStatistics.hasMoved(combatant, area);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1)
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CombatantSide
statement code is: CombatantSide combatantSide = CombatantSide.ATTACKER
statement is: CharacterClass characterClass = CharacterClass.WORKER type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class de.outstare.fortbattleplayer.model.CharacterClass
statement code is: CharacterClass characterClass = CharacterClass.WORKER
statement is: de.outstare.fortbattleplayer.model.impl.SimpleSector(IZZIIZILde/outstare/fortbattleplayer/model/CharacterClass;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleSector
statement code is: SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, arg7)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleArea(IILde/outstare/fortbattleplayer/model/Sector;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleArea
statement code is: SimpleArea simpleArea = new SimpleArea(1, 1, arg2)
statement is: de.outstare.fortbattleplayer.model.CombatantState(Lde/outstare/fortbattleplayer/model/Area;ILde/outstare/fortbattleplayer/model/Area;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.CombatantState
statement code is: CombatantState combatantState = new CombatantState(arg2, 1098, arg2, false)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleWeapon(ILjava/lang/String;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleWeapon
statement code is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599)
statement is: de.outstare.fortbattleplayer.model.impl.SimpleCombatant(Lde/outstare/fortbattleplayer/model/CombatantSide;Lde/outstare/fortbattleplayer/model/CombatantState;ILjava/lang/String;Lde/outstare/fortbattleplayer/model/CharacterClass;Lde/outstare/fortbattleplayer/model/Weapon;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.model.impl.SimpleCombatant
statement code is: SimpleCombatant simpleCombatant = new SimpleCombatant(arg0, arg1, 31, "", arg4, arg5, "")
statement is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isAlive(arg0)
test data is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isAlive(simpleCombatant);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(1, 1);
        CombatantSide combatantSide = CombatantSide.ATTACKER;
        CharacterClass characterClass = CharacterClass.WORKER;
        SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
        SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
        CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
        SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Rusty Sword", 833, 2599);
        SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "Arthur", characterClass, simpleWeapon, "");
        battleStatistics.isAlive(simpleCombatant);
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantSide combatantSide = CombatantSide.ATTACKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CombatantSide.ATTACKER is CombatantSide
statement is: CharacterClass characterClass = CharacterClass.WORKER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CharacterClass.WORKER is CharacterClass
statement is: SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleWeapon simpleWeapon = new SimpleWeapon(50, "Rusty Sword", 833, 2599), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "Arthur", characterClass, simpleWeapon, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isAlive(simpleCombatant), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isAlive(simpleCombatant) target is: battleStatistics method is: isAlive(SimpleCombatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V
TestCase is: int _int = 1;
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
int _int = 31;
boolean _boolean = true;
boolean _boolean = false;
int _int = 1;
int _int = 31;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Rusty Sword";
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 31;
String string = "Arthur";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).isAlive(simpleCombatant);

statement is: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.outstare.fortbattleplayer.statistics.BattleStatistics
statement code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0)
statement is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: battleStatistics.isDead((Combatant) null)
test data is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BattleStatistics battleStatistics = new BattleStatistics(100, 200);
        battleStatistics.isDead(((Combatant) (null)));
    }
}
statement is: BattleStatistics battleStatistics = new BattleStatistics(100, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: battleStatistics.isDead(((Combatant) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: battleStatistics.isDead(((Combatant) (null))) target is: battleStatistics method is: isDead(Combatant)
source statement: de.outstare.fortbattleplayer.statistics.BattleStatistics(II)V callee: VariableReference: Statement 0, type de.outstare.fortbattleplayer.statistics.BattleStatisticsindex is: 2
Matched Method is: isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
int _int = 200;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
Combatant combatant = null;
((BattleStatistics) _int).isDead(combatant);

* test suite isTestSuite: 128
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.newDestination(simpleCombatant, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfHipFlasks(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$HipFlaskCounter", e);
}

Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
// Undeclared exception!
try { 
  battleStatistics.aimsAt(simpleCombatant, (Combatant) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.getShotsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3000);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(50);
battleStatistics.setRound(2);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, ",", characterClass, simpleWeapon, ",");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(22, 22);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 22, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "qhdfl?OolHT", characterClass, simpleWeapon, "round statistics for players and shots differ!");
battleStatistics.isOnline(simpleCombatant, false);
simpleCombatant.addObserver(battleStatistics);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
battleStatistics.setRound(2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "#((G", characterClass, simpleWeapon, "#((G");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
battleStatistics.switchedPosList((CombatantSide) null);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
battleStatistics.critList((CombatantSide) null);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder((CombatantSide) null);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
battleStatistics.setRound((-13));
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
battleStatistics.getNotShootersPerRound();
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6360), (String) null, characterClass, simpleWeapon, (String) null);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.combatantLifetime((Combatant) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), characterClass);
SimpleArea simpleArea = new SimpleArea((-1279), (-1279), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2385), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1279), "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((-934.36984));
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.round(1);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-159), "?", characterClass, simpleWeapon, "players");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 50, 1);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
// Undeclared exception!
try { 
  battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 61: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isAlive(simpleCombatant);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 64: 

Test 65: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Mythril Shortsword";
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 31;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).newDestination(simpleCombatant, simpleArea);

Test 66: 
BattleStatistics battleStatistics = new BattleStatistics(5, 2);
((BattleStatistics)5).numberOfShinyOil((CombatantSide) null);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
((BattleStatistics)30).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 68: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 3;
SimpleSector simpleSector = new SimpleSector(1, false, false, 2, 3, false, 4, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 6;
String string = "A sword";
int _int = 7;
int _int = 8;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 9;
String string = "Joe";
String string = "A shield";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).amountOfAttackBonus((CombatantSide) null);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfGraphitLubricants((CombatantSide) null);

Test 71: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
((BattleStatistics)4068).totalSwaps((CombatantSide) null);
int _int = 100;
int _int = 5000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 72: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Heavy Blade";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Heavy Blade";
String string = "Heavy Blade";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(20, 43);
((BattleStatistics)20).getFieldStatistics();

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).numberOfFettesOil((CombatantSide) null);

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfHipFlasks((CombatantSide) null);

Test 76: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
battleStatistics.criticalHits((CombatantSide) null);

Test 78: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 1000);
int _int = 200;
int _int = 4068;
SimpleSector simpleSector = new SimpleSector(200, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "M16";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "John Doe";
String string = "M16";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 79: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).amountOfDefenseBonus((CombatantSide) null);

Test 80: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).getShotsPerRound();

Test 81: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).setRound(50);
int _int = null;
((BattleStatistics) _int).setRound(_int);
int _int = 50;
((BattleStatistics) _int).setRound(_int);

Test 82: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "Awesome Sword";
int _int = 100;
int _int = 1200;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
String string = "John Doe";
String string = "John's Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
int _int = 4295;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 3000;
((BattleStatistics) _int).setRound(_int);

Test 83: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
String string = "offline";
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, (boolean) string);
int _int = 50;
String string = "the sword of light";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "not found: /bayonetdmg.csv";
String string = "the sword of light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 50;
((BattleStatistics) _int).setRound(_int);
int _int = 2;
((BattleStatistics) _int).setRound(_int);

Test 84: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "M16A2";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "the CSV file with the bayonet damages was not found: /bayonetdmg.csv";
String string = "M16A2";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 85: 
int _int = 12345;
BattleStatistics battleStatistics = new BattleStatistics(12345, 67890);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 12345, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1234567890;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Awesome Sword";
int _int = 0;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 123456789;
String string = "the CSV file with the sword damages was not found: /sworddmg.csv";
String string = "Awesome Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 86: 
int _int = 4056;
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
boolean _boolean = true;
int _int = 4056;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 87: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Lancer";
int _int = 0;
int _int = 15;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Tanky McTankface";
String string = "Sniper";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 88: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 15;
SimpleSector simpleSector = new SimpleSector(1, false, false, 10, 15, true, 4, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 250;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Golden Sword";
int _int = 35;
int _int = 456;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Awesome Warrior";
String string = "Strongest Sword in the Land";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 89: 
int _int = 4095;
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 20;
String string = "dagger";
int _int = 5;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 20;
String string = "adventurer";
String string = "dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 90: 
String string = "1024x768";
BattleStatistics battleStatistics = new BattleStatistics((int) "1024x768", (int) "1024x768");
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
String string = "1024x768";
String string = "1024x768";
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) string, (int) string, _boolean, _int, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) string, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) string).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) string).roundsTillOnline(combatantSide);

Test 91: 
int _int = 22;
BattleStatistics battleStatistics = new BattleStatistics(22, 44);
Point point = new Point();
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, 0, true, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Mythril Sword";
int _int = 25;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Mythril Warrior";
String string = "Mythril";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 92: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 50;
int _int = 100;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(50, false, true, 100, 100, false, 90, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 42;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1000;
String string = "Rocket Launcher";
int _int = 500;
int _int = 2000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1000;
String string = "Rocket Launcher";
String string = "Rocket Launcher";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 93: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (int) false, (boolean) 0, 0, (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _boolean, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
((SimpleCombatant) simpleArea).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.averageRoundsOnline(combatantSide);

Test 94: 
int _int = 4056;
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
boolean _boolean = true;
int _int = 4056;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(5, true, true, 4056, 4056, true, 0, (CharacterClass) 5);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 5;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 95: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "!;?&Zo4 <s8[%fUY";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "!;?&Zo4 <s8[%fUY";
String string = "!;?&Zo4 <s8[%fUY";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) simpleSector).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.averageRoundsOnline(combatantSide);

Test 96: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 4068;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Adamantine battleaxe";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "Abraham";
String string = "round statistics for players and shots differ!";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "round statistics for players and shots differ!");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 97: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 2;
((BattleStatistics)1).setRound(2);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) arg1);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "Stormbringer";
int _int = 123456789;
String string = "Fiery Hammer";
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, (int) string);
int _int = 10;
String string = "Stormbringer";
String string = "Fiery Hammer";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#((G");
int _int = 0;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 98: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "The Bayonet";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "the CSV file with the bayonet damages was not found: /bayonetdmg.csv";
String string = "The Bayonet";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 99: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Magnum";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Morty Smith";
String string = "Morty Smith";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
int _int = 0;
String string = "Rick Sanchez";
String string = "Rick Sanchez";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 100: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Wooden Sword";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Wooden Sword";
String string = "Wooden Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) simpleSector).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfSchmierOil(combatantSide);

Test 101: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).switchedPosList((CombatantSide) "East");

Test 102: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
((BattleStatistics)1249).criticalHitDamage((CombatantSide) null);

Test 103: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
((BattleStatistics)30).critList((CombatantSide) null);

Test 104: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
double _double = 0.5;
SimpleSector simpleSector = new SimpleSector(123456789, true, false, (int) 0.99999999, (int) 0.5, false, (int) 1.0E-8, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 4295;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Gladius";
double _double = 5.67;
double _double = 3.14;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, (int) _double);
int _int = 987654321;
String string = "Aeneas";
String string = "Dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
int _int = 4295;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _double).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 105: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
int _int = 0;
int _int = 13;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 13, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
int _int = 123;
int _int = 456;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 106: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 0;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Gladius";
int _int = 5;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Galen";
String string = "Mage";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 0;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 107: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
((BattleStatistics)100).numberOfMovesPerPlayer((CombatantSide) null);

Test 108: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).critList((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 109: 
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(5, 10);
((BattleStatistics)5).setRound(2714);
((BattleStatistics) _int).getNotShootersPerRound();

Test 110: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (int) true, true, (-6360), (CharacterClass) 0);
int _int = 0;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "";
int _int = 13;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (-6360), (String) null, (CharacterClass) _int, (Weapon) _boolean, (String) null);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 111: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 50;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) true, false, (boolean) 50, 50, (int) false, (boolean) 0, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 15;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = "Sword of Light";
int _int = 100;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Joe";
int _int = 0;
String string = "Rock";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) string, combatantState, _int, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 112: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 150;
String string = "Iron Sword";
int _int = 20;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Grimbold Ironfist";
String string = "Grimbold Ironfist";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 113: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
((BattleStatistics)1073741824).combatantLifetime((Combatant) null);

Test 114: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 115: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 50;
SimpleSector simpleSector = new SimpleSector(0, true, true, 50, (int) false, (boolean) 0, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 15;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = "Sword of Ares";
int _int = 50;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Attacker";
String string = "Attacker";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
int _int = 0;
String string = "Defender";
String string = "Defender";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 116: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, false, false, (-1279), (-1279), false, (-2385), (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1279), (Sector) _boolean);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "almost crit by ";
int _int = 50;
int _int = 1983;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1983);
String string = "almost crit by ";
String string = "almost crit by ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _boolean, (Weapon) _boolean, "almost crit by ");
((SimpleCombatant) combatantState).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

Test 117: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Longsword";
int _int = 3;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Geralt of Rivia";
String string = "Geralt of Rivia";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((double) (Double) null);

Test 119: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(25);

Test 120: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).round(5);
int _int = 3;
((BattleStatistics) _int).round(_int);
int _int = 7;
((BattleStatistics) _int).round(_int);
int _int = 12;
((BattleStatistics) _int).round(_int);

Test 121: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
int _int = 1162;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, (CharacterClass) battleStatistics);
int _int = 1445;
int _int = 1445;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1162;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Longsword";
String string = "C3GqwDLx} ";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
int _int = 1162;
String string = "C3GqwDLx} ";
String string = "iNIq9";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "iNIq9");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 122: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Greenhorn's Sword";
int _int = 5;
int _int = 1991;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Greenhorn";
String string = "players";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "players");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 123: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "The Sword of Light";
int _int = 50;
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, _int);
int _int = 50;
int _int = 1;
int _int = null;
((BattleStatistics) _int).isHit((Combatant) _int, _int, _int);

Test 124: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
((BattleStatistics)100).addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);

Test 125: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
battleStatistics.hasMoved((Combatant) null, (Area) null);

Test 126: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Rusty Sword";
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 31;
String string = "Arthur";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).isAlive(simpleCombatant);

Test 127: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).isDead((Combatant) null);


* Generated after the refinement and before minimization 128 tests with total length 1350
* test suite isTestSuite: 128
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.newDestination(simpleCombatant, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfHipFlasks(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$HipFlaskCounter", e);
}

Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
// Undeclared exception!
try { 
  battleStatistics.aimsAt(simpleCombatant, (Combatant) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.getShotsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3000);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(50);
battleStatistics.setRound(2);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, ",", characterClass, simpleWeapon, ",");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(22, 22);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 22, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "qhdfl?OolHT", characterClass, simpleWeapon, "round statistics for players and shots differ!");
battleStatistics.isOnline(simpleCombatant, false);
simpleCombatant.addObserver(battleStatistics);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
battleStatistics.setRound(2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "#((G", characterClass, simpleWeapon, "#((G");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
battleStatistics.switchedPosList((CombatantSide) null);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
battleStatistics.critList((CombatantSide) null);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder((CombatantSide) null);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
battleStatistics.setRound((-13));
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
battleStatistics.getNotShootersPerRound();
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6360), (String) null, characterClass, simpleWeapon, (String) null);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.combatantLifetime((Combatant) null);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), characterClass);
SimpleArea simpleArea = new SimpleArea((-1279), (-1279), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2385), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1279), "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((-934.36984));
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.round(1);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-159), "?", characterClass, simpleWeapon, "players");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 50, 1);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
// Undeclared exception!
try { 
  battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 61: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isAlive(simpleCombatant);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 64: 

Test 65: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Mythril Shortsword";
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 31;
String string = "";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).newDestination(simpleCombatant, simpleArea);

Test 66: 
BattleStatistics battleStatistics = new BattleStatistics(5, 2);
((BattleStatistics)5).numberOfShinyOil((CombatantSide) null);

Test 67: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
((BattleStatistics)30).numberOfLoadingChamerOrEnhancedPatrons((CombatantSide) null);

Test 68: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 3;
SimpleSector simpleSector = new SimpleSector(1, false, false, 2, 3, false, 4, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 5;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 6;
String string = "A sword";
int _int = 7;
int _int = 8;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 9;
String string = "Joe";
String string = "A shield";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfHipFlasks(combatantSide);

Test 69: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).amountOfAttackBonus((CombatantSide) null);

Test 70: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfGraphitLubricants((CombatantSide) null);

Test 71: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
((BattleStatistics)4068).totalSwaps((CombatantSide) null);
int _int = 100;
int _int = 5000;
BattleStatistics battleStatistics = new BattleStatistics(_int, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 72: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Heavy Blade";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Heavy Blade";
String string = "Heavy Blade";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
SimpleCombatant simpleCombatant = null;
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);

Test 73: 
BattleStatistics battleStatistics = new BattleStatistics(20, 43);
((BattleStatistics)20).getFieldStatistics();

Test 74: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).numberOfFettesOil((CombatantSide) null);

Test 75: 
BattleStatistics battleStatistics = new BattleStatistics(10, 5);
((BattleStatistics)10).numberOfHipFlasks((CombatantSide) null);

Test 76: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);

Test 77: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
battleStatistics.criticalHits((CombatantSide) null);

Test 78: 
int _int = 1000;
BattleStatistics battleStatistics = new BattleStatistics(1000, 1000);
int _int = 200;
int _int = 4068;
SimpleSector simpleSector = new SimpleSector(200, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 100;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "M16";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "John Doe";
String string = "M16";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 79: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).amountOfDefenseBonus((CombatantSide) null);

Test 80: 
BattleStatistics battleStatistics = new BattleStatistics(10, 20);
((BattleStatistics)10).getShotsPerRound();

Test 81: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).setRound(50);
int _int = null;
((BattleStatistics) _int).setRound(_int);
int _int = 50;
((BattleStatistics) _int).setRound(_int);

Test 82: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 123456789;
String string = "Awesome Sword";
int _int = 100;
int _int = 1200;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 987654321;
String string = "John Doe";
String string = "John's Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
int _int = 4295;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _int).addObserver(battleStatistics);
int _int = 3000;
((BattleStatistics) _int).setRound(_int);

Test 83: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
String string = "offline";
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, (boolean) string);
int _int = 50;
String string = "the sword of light";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "not found: /bayonetdmg.csv";
String string = "the sword of light";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
int _int = 50;
((BattleStatistics) _int).setRound(_int);
int _int = 2;
((BattleStatistics) _int).setRound(_int);

Test 84: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "M16A2";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "the CSV file with the bayonet damages was not found: /bayonetdmg.csv";
String string = "M16A2";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 85: 
int _int = 12345;
BattleStatistics battleStatistics = new BattleStatistics(12345, 67890);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 12345, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 1234567890;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Awesome Sword";
int _int = 0;
int _int = 4;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 123456789;
String string = "the CSV file with the sword damages was not found: /sworddmg.csv";
String string = "Awesome Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).percentAbleToShoot(combatantSide);

Test 86: 
int _int = 4056;
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
boolean _boolean = true;
int _int = 4056;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 87: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Lancer";
int _int = 0;
int _int = 15;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Tanky McTankface";
String string = "Sniper";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 88: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 15;
SimpleSector simpleSector = new SimpleSector(1, false, false, 10, 15, true, 4, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 250;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 100;
String string = "Golden Sword";
int _int = 35;
int _int = 456;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "Awesome Warrior";
String string = "Strongest Sword in the Land";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfOffliners(combatantSide);

Test 89: 
int _int = 4095;
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 100;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 20;
String string = "dagger";
int _int = 5;
int _int = 1;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 20;
String string = "adventurer";
String string = "dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, ",");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 90: 
String string = "1024x768";
BattleStatistics battleStatistics = new BattleStatistics((int) "1024x768", (int) "1024x768");
Point point = new Point();
int _int = 0;
boolean _boolean = true;
boolean _boolean = true;
String string = "1024x768";
String string = "1024x768";
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, (int) string, (int) string, _boolean, _int, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) string, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) string).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) string).roundsTillOnline(combatantSide);

Test 91: 
int _int = 22;
BattleStatistics battleStatistics = new BattleStatistics(22, 44);
Point point = new Point();
boolean _boolean = true;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, true, true, 100, 0, true, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Mythril Sword";
int _int = 25;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Mythril Warrior";
String string = "Mythril";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 92: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 50;
int _int = 100;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(50, false, true, 100, 100, false, 90, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 42;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1000;
String string = "Rocket Launcher";
int _int = 500;
int _int = 2000;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1000;
String string = "Rocket Launcher";
String string = "Rocket Launcher";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).roundsTillOnline(combatantSide);

Test 93: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
boolean _boolean = false;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, (int) false, (boolean) 0, 0, (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _boolean, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
((SimpleCombatant) simpleArea).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.averageRoundsOnline(combatantSide);

Test 94: 
int _int = 4056;
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
boolean _boolean = true;
int _int = 4056;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(5, true, true, 4056, 4056, true, 0, (CharacterClass) 5);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _boolean);
int _int = 10;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
int _int = 5;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 10;
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
String string = "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).averageRoundsOnline(combatantSide);

Test 95: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "!;?&Zo4 <s8[%fUY";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "!;?&Zo4 <s8[%fUY";
String string = "!;?&Zo4 <s8[%fUY";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) simpleSector).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.averageRoundsOnline(combatantSide);

Test 96: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 4068;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Adamantine battleaxe";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "Abraham";
String string = "round statistics for players and shots differ!";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "round statistics for players and shots differ!");
boolean _boolean = false;
((BattleStatistics) _int).isOnline(simpleCombatant, _boolean);
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 97: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 2;
((BattleStatistics)1).setRound(2);
int _int = 0;
boolean _boolean = false;
boolean _boolean = false;
int _int = 1;
int _int = 0;
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(_int, _boolean, _boolean, _int, _int, _boolean, _int, (CharacterClass) _int);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) arg1);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 5;
String string = "Stormbringer";
int _int = 123456789;
String string = "Fiery Hammer";
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, (int) string);
int _int = 10;
String string = "Stormbringer";
String string = "Fiery Hammer";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "#((G");
int _int = 0;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _int).addObserver(battleStatistics);

Test 98: 
int _int = 4068;
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "The Bayonet";
int _int = 2;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 4068;
String string = "the CSV file with the bayonet damages was not found: /bayonetdmg.csv";
String string = "The Bayonet";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "qhdfl?OolHT");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 99: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Magnum";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Morty Smith";
String string = "Morty Smith";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
int _int = 0;
String string = "Rick Sanchez";
String string = "Rick Sanchez";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
((BattleStatistics) _int).aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).targetNoOne(combatantSide);

Test 100: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, (int) true, (boolean) 0, 0, (CharacterClass) 0);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "Wooden Sword";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Wooden Sword";
String string = "Wooden Sword";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _int, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) simpleSector).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfSchmierOil(combatantSide);

Test 101: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).switchedPosList((CombatantSide) "East");

Test 102: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
((BattleStatistics)1249).criticalHitDamage((CombatantSide) null);

Test 103: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
((BattleStatistics)30).critList((CombatantSide) null);

Test 104: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
double _double = 0.5;
SimpleSector simpleSector = new SimpleSector(123456789, true, false, (int) 0.99999999, (int) 0.5, false, (int) 1.0E-8, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 4295;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Gladius";
double _double = 5.67;
double _double = 3.14;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, (int) _double, (int) _double);
int _int = 987654321;
String string = "Aeneas";
String string = "Dagger";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "`_azL");
int _int = 4295;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _double).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 105: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 1);
int _int = 0;
int _int = 13;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 13, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 0;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
int _int = 123;
int _int = 456;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 13;
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
String string = "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
int _int = 1;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 106: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 0;
int _int = 1;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Gladius";
int _int = 5;
int _int = 2;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 1;
String string = "Galen";
String string = "Mage";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
int _int = 0;
((BattleStatistics) _int).setRound(_int);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).turnOrder(combatantSide);

Test 107: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
((BattleStatistics)100).numberOfMovesPerPlayer((CombatantSide) null);

Test 108: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).critList((CombatantSide) null);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 109: 
int _int = 5;
BattleStatistics battleStatistics = new BattleStatistics(5, 10);
((BattleStatistics)5).setRound(2714);
((BattleStatistics) _int).getNotShootersPerRound();

Test 110: 
int _int = 0;
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
boolean _boolean = true;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (int) true, true, (-6360), (CharacterClass) 0);
int _int = 0;
int _int = 13;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 50;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "";
int _int = 13;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) simpleWeapon, (-6360), (String) null, (CharacterClass) _int, (Weapon) _boolean, (String) null);
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 111: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 50;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) true, false, (boolean) 50, 50, (int) false, (boolean) 0, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 15;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = "Sword of Light";
int _int = 100;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
String string = "Joe";
int _int = 0;
String string = "Rock";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) string, combatantState, _int, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).amountOfDefenseBonus(combatantSide);

Test 112: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 0;
int _int = 0;
boolean _boolean = true;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea((Point) simpleSector, (Sector) _int);
int _int = 0;
boolean _boolean = true;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 150;
String string = "Iron Sword";
int _int = 20;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 100;
String string = "Grimbold Ironfist";
String string = "Grimbold Ironfist";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _boolean).addObserver(battleStatistics);
((BattleStatistics) _int).combatantLifetime(simpleCombatant);

Test 113: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
((BattleStatistics)1073741824).combatantLifetime((Combatant) null);

Test 114: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);

Test 115: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int _int = 50;
SimpleSector simpleSector = new SimpleSector(0, true, true, 50, (int) false, (boolean) 0, 0, (CharacterClass) battleStatistics);
int _int = 0;
int _int = 50;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 15;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 13;
String string = "Sword of Ares";
int _int = 50;
int _int = 50;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Attacker";
String string = "Attacker";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
int _int = 0;
String string = "Defender";
String string = "Defender";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "could not determine turn order for ");
int _int = 1;
((BattleStatistics) _int).criticalShot(simpleCombatant, simpleCombatant, _int);
CombatantSide combatantSide = null;
((BattleStatistics) _int).critList(combatantSide);

Test 116: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
boolean _boolean = false;
boolean _boolean = false;
SimpleSector simpleSector = new SimpleSector((int) false, false, false, (-1279), (-1279), false, (-2385), (CharacterClass) false);
SimpleArea simpleArea = new SimpleArea((int) simpleSector, (-1279), (Sector) _boolean);
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, (int) simpleArea, (Area) _boolean, false);
String string = "almost crit by ";
int _int = 50;
int _int = 1983;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, 1983);
String string = "almost crit by ";
String string = "almost crit by ";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) string, (int) simpleWeapon, string, (CharacterClass) _boolean, (Weapon) _boolean, "almost crit by ");
((SimpleCombatant) combatantState).addObserver(battleStatistics);
CombatantSide combatantSide = null;
battleStatistics.numberOfMovesPerPlayer(combatantSide);

Test 117: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
boolean _boolean = false;
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) battleStatistics);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 10;
String string = "Longsword";
int _int = 3;
int _int = 5;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Geralt of Rivia";
String string = "Geralt of Rivia";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _boolean, "!;?&Zo4 <s8[%fUY");
((SimpleCombatant) _int).addObserver(battleStatistics);
CombatantSide combatantSide = null;
((BattleStatistics) _int).numberOfMovesPerPlayer(combatantSide);

Test 118: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((double) (Double) null);

Test 119: 
BattleStatistics battleStatistics = new BattleStatistics(100, 50);
((BattleStatistics)100).round(25);

Test 120: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
((BattleStatistics)0).round(5);
int _int = 3;
((BattleStatistics) _int).round(_int);
int _int = 7;
((BattleStatistics) _int).round(_int);
int _int = 12;
((BattleStatistics) _int).round(_int);

Test 121: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
int _int = 1162;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, (CharacterClass) battleStatistics);
int _int = 1445;
int _int = 1445;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1162;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "Longsword";
String string = "C3GqwDLx} ";
int _int = 0;
int _int = 0;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, string, _int, _int);
int _int = 1162;
String string = "C3GqwDLx} ";
String string = "iNIq9";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "iNIq9");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).switchedPosList(combatantSide);

Test 122: 
int _int = 0;
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
int _int = 0;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, (CharacterClass) point);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
int _int = 0;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 1;
String string = "Greenhorn's Sword";
int _int = 5;
int _int = 1991;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 0;
String string = "Greenhorn";
String string = "players";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "players");
((BattleStatistics) _int).hasSwappedPosition(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = null;
((BattleStatistics) _int).totalSwaps(combatantSide);

Test 123: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
String string = "The Sword of Light";
int _int = 50;
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon((int) string, (String) _int, _int, _int);
int _int = 50;
int _int = 1;
int _int = null;
((BattleStatistics) _int).isHit((Combatant) _int, _int, _int);

Test 124: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
((BattleStatistics)100).addAndResetRoundCounter(hashMap, (Map<CombatantSide, RoundStatistics>) null);

Test 125: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
battleStatistics.hasMoved((Combatant) null, (Area) null);

Test 126: 
int _int = 1;
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int _int = 1;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, (CharacterClass) battleStatistics);
int _int = 1;
int _int = 1;
SimpleArea simpleArea = new SimpleArea(_int, _int, simpleSector);
int _int = 1098;
boolean _boolean = false;
CombatantState combatantState = new CombatantState(simpleArea, _int, simpleArea, _boolean);
int _int = 50;
String string = "Rusty Sword";
int _int = 833;
int _int = 2599;
SimpleWeapon simpleWeapon = new SimpleWeapon(_int, string, _int, _int);
int _int = 31;
String string = "Arthur";
String string = "";
SimpleCombatant simpleCombatant = new SimpleCombatant((CombatantSide) combatantState, (CombatantState) _int, (int) string, (String) simpleWeapon, (CharacterClass) string, (Weapon) _int, "");
((BattleStatistics) _int).isAlive(simpleCombatant);

Test 127: 
BattleStatistics battleStatistics = new BattleStatistics(100, 200);
((BattleStatistics)100).isDead((Combatant) null);


* Minimizing test suite
* test suite isTestSuite: 66
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.newDestination(simpleCombatant, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 50, 1);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
// Undeclared exception!
try { 
  battleStatistics.aimsAt(simpleCombatant, (Combatant) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
battleStatistics.getFieldStatistics();
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isAlive(simpleCombatant);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
battleStatistics.criticalHits((CombatantSide) null);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((-934.36984));
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.getShotsPerRound();
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3000);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(50);
battleStatistics.setRound(2);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.combatantLifetime((Combatant) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, ",", characterClass, simpleWeapon, ",");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(22, 22);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 22, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "qhdfl?OolHT", characterClass, simpleWeapon, "round statistics for players and shots differ!");
battleStatistics.isOnline(simpleCombatant, false);
simpleCombatant.addObserver(battleStatistics);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
battleStatistics.setRound(2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "#((G", characterClass, simpleWeapon, "#((G");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfHipFlasks(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$HipFlaskCounter", e);
}

Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.switchedPosList(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
battleStatistics.switchedPosList((CombatantSide) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
battleStatistics.critList((CombatantSide) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
battleStatistics.setRound((-13));
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder((CombatantSide) null);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
battleStatistics.getNotShootersPerRound();
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6360), (String) null, characterClass, simpleWeapon, (String) null);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), characterClass);
SimpleArea simpleArea = new SimpleArea((-1279), (-1279), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2385), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1279), "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.round(1);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-159), "?", characterClass, simpleWeapon, "players");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
// Undeclared exception!
try { 
  battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 156
* Number of covered goals: 137
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 229
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 105
* Number of covered goals: 54
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 156
* Number of covered goals: 137
* Generated 66 tests with total length 480
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfBayonets = battleStatistics.numberOfBayonets(arg0);
assertEquals(0, numberOfBayonets);


** It was a parseable test case! 
refined test name is: testNumberOfBayonetsWhenOpponentHasNoBayonets
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfShinyOil = battleStatistics.numberOfShinyOil(arg0);
assertEquals(0, numberOfShinyOil);


** It was a parseable test case! 
refined test name is: testNumberOfShinyOilWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfLoadingChamerOrEnhancedPatrons = battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(arg0);
assertEquals(0, numberOfLoadingChamerOrEnhancedPatrons);


** It was a parseable test case! 
refined test name is: testNumberOfLoadingChamerOrEnhancedPatronsDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

** It was a parseable test case! 
refined test name is: testIsDeadWithNullCombatant
* Compiling Tests
refined test name is: testIsDeadWithNullCombatant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
int amountOfAttackBonus = battleStatistics.amountOfAttackBonus(arg0);
assertEquals(0, amountOfAttackBonus);


** It was a parseable test case! 
refined test name is: testAmountOfAttackBonusForAttacker
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfGraphitLubricants = battleStatistics.numberOfGraphitLubricants(arg0);
assertEquals(0, numberOfGraphitLubricants);


** It was a parseable test case! 
refined test name is: testNumberOfGraphitLubricantsnoLubricant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide arg0 = CombatantSide.DEFENDER;
int totalSwaps = battleStatistics.totalSwaps(arg0);
assertEquals(0, totalSwaps);


** It was a parseable test case! 
refined test name is: testTotalSwapsForDefenderIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
Map<Area, AreaStatistic> fieldStatistics = battleStatistics.getFieldStatistics();
assertEquals(0, fieldStatistics.size());


** It was a parseable test case! 
refined test name is: testGetFieldStatisticsNoFieldStatistics
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
int numberOfFettesOil = battleStatistics.numberOfFettesOil(arg0);
assertEquals(0, numberOfFettesOil);


** It was a parseable test case! 
refined test name is: testNumberOfFettesOilForDefender
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
int numberOfHipFlasks = battleStatistics.numberOfHipFlasks(arg0);
assertEquals(0, numberOfHipFlasks);


** It was a parseable test case! 
refined test name is: testNumberOfHipFlasksWhenNoSideIsSelected
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}


** It was a parseable test case! 
refined test name is: testMoveToAreaWithoutDeclaringExceptions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Map<CombatantSide, ? extends LabeledData> hitsPerRound = battleStatistics.getHitsPerRound();
assertEquals(2, hitsPerRound.size());


** It was a parseable test case! 
refined test name is: testGetHitsPerRoundReturnsMapOfSizesTwo
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
int criticalHits = battleStatistics.criticalHits((CombatantSide) null);
assertEquals(0, criticalHits);


** It was a parseable test case! 
refined test name is: testCriticalHitsWithNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
int round = battleStatistics.round((-934.36984));
assertEquals((-934), round);


** It was a parseable test case! 
refined test name is: testRoundMethodReturnsRoundedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
int amountOfDefenseBonus = battleStatistics.amountOfDefenseBonus(arg0);
assertEquals(0, amountOfDefenseBonus);


** It was a parseable test case! 
refined test name is: testAmountOfDefenseBonusForZeroAttacksAndDefenses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Map<CombatantSide, ? extends LabeledData> shotsPerRound = battleStatistics.getShotsPerRound();
assertEquals(2, shotsPerRound.size());


** It was a parseable test case! 
refined test name is: testGetShotsPerRound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);

** It was a parseable test case! 
refined test name is: testIncrementTotalRoundsWhenNewRoundIsSet
* Compiling Tests
refined test name is: testIncrementTotalRoundsWhenRoundIsSetToNewValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
int combatantLifetime = battleStatistics.combatantLifetime((Combatant) null);
assertEquals(0, combatantLifetime);


** It was a parseable test case! 
refined test name is: testCombatantLifetimeNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide arg0 = CombatantSide.ATTACKER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerZeroTolerance
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide arg0 = CombatantSide.DEFENDER;
double numberOfMovesPerPlayer = battleStatistics.numberOfMovesPerPlayer(arg0);
assertEquals(-0.0, numberOfMovesPerPlayer, 0.01);


** It was a parseable test case! 
refined test name is: testNumberOfMovesPerPlayerWithNegativeValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide arg0 = CombatantSide.ATTACKER;
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList(arg0);
assertTrue(switchedPosList.isEmpty());


** It was a parseable test case! 
refined test name is: testSwitchedPosListEmptyListForNoSwitches
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
Set<PositionSwitch> switchedPosList = battleStatistics.switchedPosList((CombatantSide) null);
assertTrue(switchedPosList.isEmpty());


** It was a parseable test case! 
refined test name is: testSwitchedPosListWithNullCombatantSide
* Compiling Tests
refined test name is: testNullCombatantSide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide arg0 = CombatantSide.ATTACKER;
List<CriticalHit> critList = battleStatistics.critList(arg0);
assertTrue(critList.isEmpty());


** It was a parseable test case! 
refined test name is: testEmptyCriticalHitList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
List<CriticalHit> critList = battleStatistics.critList((CombatantSide) null);
assertTrue(critList.isEmpty());


** It was a parseable test case! 
refined test name is: testEmptyCritListWithNoSideArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide arg0 = CombatantSide.DEFENDER;
long criticalHitDamage = battleStatistics.criticalHitDamage(arg0);
assertEquals(0L, criticalHitDamage);


** It was a parseable test case! 
refined test name is: testCriticalHitDamageZeroWhenDefenderHasNoUnits
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
Map<CombatantSide, ? extends LabeledData> notShootersPerRound = battleStatistics.getNotShootersPerRound();
assertEquals(2, notShootersPerRound.size());


** It was a parseable test case! 
refined test name is: testGetNotShootersPerRound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
int countWeaponMods = battleStatistics.countWeaponMods((CombatantSide) null, (WeaponModCounter) null);
assertEquals(0, countWeaponMods);


** It was a parseable test case! 
refined test name is: testCountWeaponModsWithNullParametersReturnsZero
* Compiling Tests
refined test name is: testCountWeaponModsNullValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(1, 1);
int round = battleStatistics.round(1);
assertEquals(1, round);


** It was a parseable test case! 
refined test name is: testRoundMethodWithValidArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics(0, 0);
int round = battleStatistics.round(0);
assertEquals(0, round);


** It was a parseable test case! 
refined test name is: testZeroRounds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> arg1 = new HashMap<CombatantSide, RoundStatistics>();
// Undeclared exception!
try { 
  battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}


** It was a parseable test case! 
refined test name is: testAddAndResetRoundCounterWithNullArgument
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.541 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.622 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.624 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:28.758 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.759 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.811 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.812 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.868 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.927 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:28.976 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:28.977 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.025 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.026 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.092 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.171 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:20:29.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
* Compiling Tests
[MASTER] 12:20:29.241 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.242 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.321 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.323 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.375 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.376 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.444 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.517 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.519 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:29.585 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.586 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.650 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.651 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.721 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.723 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.811 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.819 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:29.881 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.883 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:29.945 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:29.946 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.017 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.018 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.100 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.102 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.168 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.240 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.241 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:30.307 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.308 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.383 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.732 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:30.778 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.779 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 16 called: 1 to improve: false
** Write a test suite: 21 called: 2 to improve: false
** Write a test suite: 26 called: 3 to improve: false
[MASTER] 12:20:30.959 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:30.960 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 13 called: 2 to improve: false
** Write a test suite: 26 called: 3 to improve: false
[MASTER] 12:20:31.160 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:31.160 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
[MASTER] 12:20:31.491 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 65
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.newDestination(simpleCombatant, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfHipFlasks(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$HipFlaskCounter", e);
}

Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
// Undeclared exception!
try { 
  battleStatistics.aimsAt(simpleCombatant, (Combatant) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 9: 
BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
battleStatistics.getFieldStatistics();
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 11: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.getShotsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3000);
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(50);
battleStatistics.setRound(2);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, ",", characterClass, simpleWeapon, ",");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(22, 22);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 22, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "qhdfl?OolHT", characterClass, simpleWeapon, "round statistics for players and shots differ!");
battleStatistics.isOnline(simpleCombatant, false);
simpleCombatant.addObserver(battleStatistics);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
battleStatistics.setRound(2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "#((G", characterClass, simpleWeapon, "#((G");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(999, 3432);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.switchedPosList(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
battleStatistics.switchedPosList((CombatantSide) null);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
battleStatistics.critList((CombatantSide) null);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder((CombatantSide) null);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
battleStatistics.setRound((-13));
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 45: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
battleStatistics.getNotShootersPerRound();
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6360), (String) null, characterClass, simpleWeapon, (String) null);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.combatantLifetime((Combatant) null);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), characterClass);
SimpleArea simpleArea = new SimpleArea((-1279), (-1279), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2385), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1279), "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((-934.36984));
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.round(1);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-159), "?", characterClass, simpleWeapon, "players");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 50, 1);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
// Undeclared exception!
try { 
  battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 62: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isAlive(simpleCombatant);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);

* Minimizing test suite
[MASTER] 12:20:40.102 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 66
Test 0: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfBayonets(combatantSide);
Test 1: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.newDestination(simpleCombatant, simpleArea);
Test 2: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
battleStatistics.criticalShot(simpleCombatant, simpleCombatant, 0);
battleStatistics.critList(combatantSide);
Test 3: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isHit(simpleCombatant, 50, 1);
Test 4: 
BattleStatistics battleStatistics = new BattleStatistics((-1), (-1));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfShinyOil(combatantSide);
Test 5: 
BattleStatistics battleStatistics = new BattleStatistics(30, 30);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfLoadingChamerOrEnhancedPatrons(combatantSide);
Test 6: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.isDead((Combatant) null);
Test 7: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfAttackBonus(combatantSide);
Test 8: 
BattleStatistics battleStatistics = new BattleStatistics((-2), (-2));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfGraphitLubricants(combatantSide);
Test 9: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.totalSwaps(combatantSide);
Test 10: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
// Undeclared exception!
try { 
  battleStatistics.aimsAt(simpleCombatant, (Combatant) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
}

Test 11: 
BattleStatistics battleStatistics = new BattleStatistics((-855), (-5199));
battleStatistics.getFieldStatistics();
Test 12: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfFettesOil(combatantSide);
Test 13: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfHipFlasks(combatantSide);
Test 14: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
CombatantSide combatantSide = CombatantSide.ATTACKER;
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(31, true, false, 1, 31, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(1, 1, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1098, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, ":K(t6F^[", 833, 2599);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 31, "", characterClass, simpleWeapon, "");
battleStatistics.isAlive(simpleCombatant);
Test 15: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
// Undeclared exception!
try { 
  battleStatistics.hasMoved((Combatant) null, (Area) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
}

Test 16: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.getHitsPerRound();
Test 17: 
BattleStatistics battleStatistics = new BattleStatistics((-1328), (-1328));
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.criticalHits(combatantSide);
Test 18: 
BattleStatistics battleStatistics = new BattleStatistics((-809), (-809));
battleStatistics.round((-934.36984));
Test 19: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 20: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.getShotsPerRound();
Test 21: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.setRound(50);
battleStatistics.setRound((-1));
battleStatistics.setRound(50);
Test 22: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.setRound(3000);
Test 23: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.setRound(50);
battleStatistics.setRound(2);
Test 24: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.combatantLifetime(simpleCombatant);
Test 25: 
BattleStatistics battleStatistics = new BattleStatistics(1073741824, 1073741824);
battleStatistics.combatantLifetime((Combatant) null);
Test 26: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 27: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 0, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.percentAbleToShoot(combatantSide);
Test 28: 
BattleStatistics battleStatistics = new BattleStatistics(100, 100);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 29: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 30: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 31: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfOffliners(combatantSide);
Test 32: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfOffliners(combatantSide);
Test 33: 
BattleStatistics battleStatistics = new BattleStatistics(4095, 4095);
CombatantSide combatantSide = CombatantSide.ATTACKER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4095, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, ",", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, ",", characterClass, simpleWeapon, ",");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne((CombatantSide) null);
Test 34: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 35: 
BattleStatistics battleStatistics = new BattleStatistics(22, 22);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, 22, 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 22, "", characterClass, simpleWeapon, "");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.roundsTillOnline(combatantSide);
Test 36: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.roundsTillOnline(combatantSide);
Test 37: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 38: 
BattleStatistics battleStatistics = new BattleStatistics(4056, 4056);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, true, true, 4056, 4056, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.gui.battlefield.BattlefieldCell$SectorBorders");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.averageRoundsOnline(combatantSide);
Test 39: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.averageRoundsOnline(combatantSide);
Test 40: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 4068, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "qhdfl?OolHT", characterClass, simpleWeapon, "round statistics for players and shots differ!");
battleStatistics.isOnline(simpleCombatant, false);
simpleCombatant.addObserver(battleStatistics);
Test 41: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
battleStatistics.setRound(2);
CharacterClass characterClass = CharacterClass.WORKER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "#((G", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "#((G", characterClass, simpleWeapon, "#((G");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
Test 42: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.targetNoOne(combatantSide);
Test 43: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.targetNoOne(combatantSide);
Test 44: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
simpleCombatant.addObserver(battleStatistics);
// Undeclared exception!
try { 
  battleStatistics.numberOfHipFlasks(combatantSide);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("de.outstare.fortbattleplayer.statistics.WeaponModCounter$HipFlaskCounter", e);
}

Test 45: 
BattleStatistics battleStatistics = new BattleStatistics((-16), (-16));
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-16), 0, true, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-16), "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.numberOfSchmierOil(combatantSide);
Test 46: 
BattleStatistics battleStatistics = new BattleStatistics(0, 1445);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(1445, true, true, 1162, 0, true, 886, characterClass);
SimpleArea simpleArea = new SimpleArea(1445, 1445, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 1162, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(1162, "C3GqwDLx} ", 0, 0);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1162, "C3GqwDLx} ", characterClass, simpleWeapon, "iNIq9");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.switchedPosList(combatantSide);
Test 47: 
BattleStatistics battleStatistics = new BattleStatistics(999, 3432);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.switchedPosList(combatantSide);
Test 48: 
BattleStatistics battleStatistics = new BattleStatistics(3504, 3504);
battleStatistics.switchedPosList((CombatantSide) null);
Test 49: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
battleStatistics.critList(combatantSide);
Test 50: 
BattleStatistics battleStatistics = new BattleStatistics(30, 1073741824);
battleStatistics.critList((CombatantSide) null);
Test 51: 
BattleStatistics battleStatistics = new BattleStatistics(1249, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.criticalHitDamage(combatantSide);
Test 52: 
BattleStatistics battleStatistics = new BattleStatistics((-13), (-13));
Point point = new Point();
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, false, false, (-13), 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-13), "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter", characterClass, simpleWeapon, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$SchmierOilCounter");
battleStatistics.setRound((-13));
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder(combatantSide);
Test 53: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "`_azL", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "`_azL", characterClass, simpleWeapon, "`_azL");
battleStatistics.setRound(4295);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.turnOrder((CombatantSide) null);
Test 54: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 1, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "", 0, 0);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 1, "", characterClass, simpleWeapon, "");
battleStatistics.setRound(0);
simpleCombatant.addObserver(battleStatistics);
CombatantSide combatantSide = CombatantSide.DEFENDER;
battleStatistics.turnOrder(combatantSide);
Test 55: 
BattleStatistics battleStatistics = new BattleStatistics(2714, 2714);
battleStatistics.setRound(2714);
battleStatistics.getNotShootersPerRound();
Test 56: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(4422, true, true, 13, (-495), true, (-6360), characterClass);
SimpleArea simpleArea = new SimpleArea(0, 13, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 50, simpleArea, true);
SimpleWeapon simpleWeapon = new SimpleWeapon((-6360), "", 13, 50);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-6360), (String) null, characterClass, simpleWeapon, (String) null);
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 57: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.SOLDIER;
SimpleSector simpleSector = new SimpleSector(0, true, true, (-1264), 50, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(0, 50, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 15, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(13, "could not determine turn order for ", 50, 50);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "could not determine turn order for ", characterClass, simpleWeapon, "could not determine turn order for ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.amountOfDefenseBonus(combatantSide);
Test 58: 
BattleStatistics battleStatistics = new BattleStatistics((-1282), (-1282));
CombatantSide combatantSide = CombatantSide.DEFENDER;
WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter = new WeaponModCounter.BayonetCounter();
battleStatistics.countWeaponMods(combatantSide, weaponModCounter_BayonetCounter);
Test 59: 
BattleStatistics battleStatistics = new BattleStatistics((-1279), (-1279));
CombatantSide combatantSide = CombatantSide.DEFENDER;
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector((-1279), false, false, (-1279), (-1279), false, (-2385), characterClass);
SimpleArea simpleArea = new SimpleArea((-1279), (-1279), simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, (-2385), simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon((-2385), "almost crit by ", 50, 1983);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-1279), "almost crit by ", characterClass, simpleWeapon, "almost crit by ");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 60: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
Point point = new Point();
CharacterClass characterClass = CharacterClass.DUELANT;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "!;?&Zo4 <s8[%fUY", 0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 0, "!;?&Zo4 <s8[%fUY", characterClass, simpleWeapon, "!;?&Zo4 <s8[%fUY");
simpleCombatant.addObserver(battleStatistics);
battleStatistics.numberOfMovesPerPlayer(combatantSide);
Test 61: 
BattleStatistics battleStatistics = new BattleStatistics(4068, 4068);
Point point = new Point();
CharacterClass characterClass = CharacterClass.ADVENTURER;
SimpleSector simpleSector = new SimpleSector(0, false, false, 4068, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(50, "qhdfl?OolHT", 2, 2);
CombatantSide combatantSide = CombatantSide.ATTACKER;
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, 4068, "the CSV file with the bayonet damages was not found: /bayonetdmg.csv", characterClass, simpleWeapon, "qhdfl?OolHT");
battleStatistics.isOnline(simpleCombatant, false);
battleStatistics.aimsAt(simpleCombatant, simpleCombatant);
battleStatistics.percentAbleToShoot(combatantSide);
Test 62: 
BattleStatistics battleStatistics = new BattleStatistics(1, 1);
battleStatistics.round(1);
Test 63: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
battleStatistics.round(0);
Test 64: 
BattleStatistics battleStatistics = new BattleStatistics(0, 0);
CombatantSide combatantSide = CombatantSide.DEFENDER;
Point point = new Point();
CharacterClass characterClass = CharacterClass.GREENHORN;
SimpleSector simpleSector = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass);
SimpleArea simpleArea = new SimpleArea(point, simpleSector);
CombatantState combatantState = new CombatantState(simpleArea, 0, simpleArea, false);
SimpleWeapon simpleWeapon = new SimpleWeapon(0, "?", 0, 1991);
SimpleCombatant simpleCombatant = new SimpleCombatant(combatantSide, combatantState, (-159), "?", characterClass, simpleWeapon, "players");
battleStatistics.hasSwappedPosition(simpleCombatant, simpleCombatant);
battleStatistics.totalSwaps(combatantSide);
Test 65: 
BattleStatistics battleStatistics = new BattleStatistics((-2314), (-2314));
HashMap<CombatantSide, RoundStatistics> hashMap = new HashMap<CombatantSide, RoundStatistics>();
// Undeclared exception!
try { 
  battleStatistics.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 156
* Number of covered goals: 137
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 236
* Number of covered goals: 229
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 105
* Number of covered goals: 54
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 156
* Number of covered goals: 137
[MASTER] 12:20:40.247 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Generated 66 tests with total length 483
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
[MASTER] 12:20:47.345 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.458 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.459 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.501 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.547 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.549 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.595 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.645 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.692 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.693 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.784 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.784 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.839 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.844 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.893 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.894 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.933 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.933 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:50.976 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:50.977 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.017 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.017 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.060 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.103 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.103 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.150 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.151 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.197 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.243 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.244 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.291 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.292 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.334 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.380 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.381 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.426 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.427 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.472 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.514 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.515 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.559 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.560 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.606 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.606 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.652 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.653 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.697 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.739 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.740 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.781 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:51.781 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:20:51.839 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:20:51.840 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
[MASTER] 12:20:52.466 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:52.467 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
[MASTER] 12:20:53.112 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar1381683052591067806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:20:53.113 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1381683052591067806.jar
[MASTER] 12:20:53.115 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing tests to file
* Writing JUnit test case 'BattleStatistics_ESTest' to evosuite-tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 13 called: 2 to improve: false
** Write a test suite: 26 called: 3 to improve: false
* Writing JUnit test case 'BattleStatistics_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
* Done!

* Computation finished
