* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ioproject.server.network.ClientGroup
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/77_io-project/evosuite-files/evosuite.properties
* Connecting to master process on port 20841
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:15:21.910 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:15:22.369 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:15:22.370 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:15:22.434 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class ioproject.server.network.ClientGroup
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 222
* Using seed 1710296120259
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 83 / 222
[Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:============================>      81%][Progress:>                             1%] [Cov:=============================>     85%][Progress:>                             3%] [Cov:=============================>     85%][Progress:>                             3%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          13%] [Cov:==============================>    87%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:======>                       22%] [Cov:===============================>   90%][Progress:======>                       23%] [Cov:===============================>   90%][Progress:======>                       23%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][MASTER] 02:16:27.662 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%]
* Search finished after 203s and 38 generations, 30441 statements, best individual has fitness: 18.0
* Generated before the refinement 18 tests with total length 148
statement is: org.evosuite.testcase.statements.ArrayStatement@79361ba5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: sendUdpPacket(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendUdpPacket = NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, arg1)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains(arg0)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, (ClientHandler) null)
test data is: byte[] byteArray = new byte[0];
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, byteArray);
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
clientGroup.size();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 10, 20, 30 };
        NetworkHandling.sendUdpPacket(((EvoSuiteLocalAddress) (null)), byteArray);
        ClientGroup clientGroup = new ClientGroup("Group 1", "Group 2");
        Client client = new Client("Client 1", "Client 2");
        clientGroup.contains(client);
        clientGroup.size();
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler("Error Message");
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, ((ClientHandler) (null)));
    }
}
statement is: byte[] byteArray = new byte[]{ 10, 20, 30 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ 10, 20, 30 } Elements: [10, 20, 30]
lengths: [0] []
statement is: NetworkHandling.sendUdpPacket(((EvoSuiteLocalAddress) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.sendUdpPacket(((EvoSuiteLocalAddress) (null)), byteArray) target is: NetworkHandling method is: sendUdpPacket(EvoSuiteLocalAddress,byte[])
Matched Method is: sendUdpPacket(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: ClientGroup clientGroup = new ClientGroup("Group 1", "Group 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("Client 1", "Client 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.contains(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(client) target is: clientGroup method is: contains(Client)
statement is: clientGroup.size(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.size() target is: clientGroup method is: size()
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler("Error Message"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, ((ClientHandler) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V
TestCase is: EvoSuiteLocalAddress evoSuiteLocalAddress = null;
byte[] byteArray = null;
NetworkHandling.sendUdpPacket(evoSuiteLocalAddress, byteArray);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: org.apache.mina.transport.vmpipe.VmPipeAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.VmPipeAddress
statement code is: VmPipeAddress vmPipeAddress = new VmPipeAddress(403)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, arg1)
statement is: org.apache.mina.common.support.IoServiceListenerSupport()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.support.IoServiceListenerSupport
statement code is: IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport()
statement is: org.apache.mina.common.IoHandlerAdapter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.IoHandlerAdapter
statement code is: IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("my_client_group");
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(100);
        VmPipeAddress vmPipeAddress = new VmPipeAddress("localhost", 403);
        Client client = new Client("my_client", vmPipeAddress);
        clientGroup.add(client);
        Iterator<Client> iterator = clientGroup.iterator();
        assertTrue(clientGroup.contains(client));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("my_client_group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeAddress vmPipeAddress = new VmPipeAddress("localhost", 403), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("my_client", vmPipeAddress), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
statement is: Iterator<Client> iterator = clientGroup.iterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.iterator() target is: clientGroup method is: iterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: iterator()Ljava/util/Iterator;
statement is: assertTrue(clientGroup.contains(client)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(clientGroup.contains(client)) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "my_client_group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).iterator();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: org.apache.mina.transport.vmpipe.VmPipeAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.VmPipeAddress
statement code is: VmPipeAddress vmPipeAddress = new VmPipeAddress(403)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: spliterator()Ljava/util/Spliterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Spliterator<ioproject.server.network.Client>
statement code is: Spliterator<Client> spliterator = clientGroup.spliterator()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, arg1)
statement is: org.apache.mina.transport.socket.nio.SocketAcceptorConfig()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.socket.nio.SocketAcceptorConfig
statement code is: SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig()
statement is: org.apache.mina.common.support.IoServiceListenerSupport()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.support.IoServiceListenerSupport
statement code is: IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new ClientGroup(((ClientGroup) (null))));
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
        VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
        Client client = new Client(new IoSession(null));
        clientGroup.add(client);
        clientGroup.spliterator();
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.remove(client);
        Iterator<Client> iterator = clientGroup.iterator();
        clientGroup.notifyMessageSent(client, iterator);
        SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
        IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new ClientGroup(((ClientGroup) (null)))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeAddress vmPipeAddress = new VmPipeAddress(403), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client(new IoSession(null)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.spliterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.spliterator() target is: clientGroup method is: spliterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: spliterator()Ljava/util/Spliterator;
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.remove(client) target is: createSubGroup method is: remove(Client)
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 6, type ioproject.server.network.ClientGroupindex is: 8
Matched Method is: remove(Lioproject/server/network/Client;)Z
statement is: Iterator<Client> iterator = clientGroup.iterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.iterator() target is: clientGroup method is: iterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: iterator()Ljava/util/Iterator;
statement is: clientGroup.notifyMessageSent(client, iterator), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(client, iterator) target is: clientGroup method is: notifyMessageSent(Client,Iterator)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
statement is: SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
int _int = 403;
VmPipeAddress vmPipeAddress = new VmPipeAddress(_int);
Client client = new Client((IoSession) null);
boolean add = clientGroup.add(client);
clientGroup.spliterator();
clientGroup.createSubGroup();
((ClientGroup) add).remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.client.network.StateMultiplexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.StateMultiplexer
statement code is: StateMultiplexer stateMultiplexer = new StateMultiplexer()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageSent(client, createSubGroup);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Main Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup("Sub Group 1");
        StateMultiplexer stateMultiplexer = new StateMultiplexer();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        Client client = new Client("Client 1");
        clientGroup.add(client);
        clientGroup.notifyMessageSent(client, createSubGroup);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Main Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup("Sub Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup("Sub Group 1") target is: clientGroup method is: createSubGroup(java.lang.String)
statement is: StateMultiplexer stateMultiplexer = new StateMultiplexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: Client client = new Client("Client 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageSent(client, createSubGroup), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(client, createSubGroup) target is: clientGroup method is: notifyMessageSent(Client,ClientGroup)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "Client 1";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageSent(client, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: spliterator()Ljava/util/Spliterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Spliterator<ioproject.server.network.Client>
statement code is: Spliterator<Client> spliterator = clientGroup.spliterator()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable("3")
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable("3");
clientGroup.notifyMessageReceived(client, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        clientGroup.spliterator();
        clientGroup.createSubGroup();
        Client client = new Client(((IoSession) (null)));
        MockThrowable mockThrowable = new MockThrowable("This is a descriptive and representative string");
        clientGroup.notifyMessageReceived(client, ((Object) (null)));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.spliterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.spliterator() target is: clientGroup method is: spliterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: spliterator()Ljava/util/Spliterator;
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThrowable mockThrowable = new MockThrowable("This is a descriptive and representative string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageReceived(client, ((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, ((Object) (null))) target is: clientGroup method is: notifyMessageReceived(Client,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
String string = "This is a descriptive and representative string";
MockThrowable mockThrowable = new MockThrowable(string);
ClientGroup clientGroup = null;
clientGroup.notifyMessageReceived(client, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable("3")
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("3");
clientGroup.notifyMessageReceived(client, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        clientGroup.createSubGroup();
        Client client = new Client(((IoSession) (null)));
        clientGroup.add(client);
        MockThrowable mockThrowable = new MockThrowable("An error occurred while processing the request (Error code: 302, Details: Invalid request parameters.)");
        clientGroup.notifyMessageReceived(client, ((Object) (null)));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: MockThrowable mockThrowable = new MockThrowable("An error occurred while processing the request (Error code: 302, Details: Invalid request parameters.)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageReceived(client, ((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, ((Object) (null))) target is: clientGroup method is: notifyMessageReceived(Client,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
String string = "An error occurred while processing the request (Error code: 302, Details: Invalid request parameters.)";
MockThrowable mockThrowable = new MockThrowable(string);
ClientGroup clientGroup = null;
clientGroup.notifyMessageReceived(client, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: spliterator()Ljava/util/Spliterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Spliterator<ioproject.server.network.Client>
statement code is: Spliterator<Client> spliterator = clientGroup.spliterator()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, "3")
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, "3");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
        clientGroup.spliterator();
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        Client client = new Client(((IoSession) (null)));
        createSubGroup.parentGroup();
        clientGroup.add(client);
        createSubGroup.add(client);
        clientGroup.notifyMessageReceived(client, "3");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.spliterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.spliterator() target is: clientGroup method is: spliterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: spliterator()Ljava/util/Spliterator;
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: createSubGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.parentGroup() target is: createSubGroup method is: parentGroup()
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 3, type ioproject.server.network.ClientGroupindex is: 3
Matched Method is: parentGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 3, type ioproject.server.network.ClientGroupindex is: 3
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: createSubGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(client) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 3, type ioproject.server.network.ClientGroupindex is: 3
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageReceived(client, "3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, "3") target is: clientGroup method is: notifyMessageReceived(Client,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
clientGroup.add(client);
String string = "3";
clientGroup.notifyMessageReceived(client, string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable(arg0)
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught(arg0, arg1)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: java.lang.ref.ReferenceQueue()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.ReferenceQueue<java.lang.Object>
statement code is: ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for testing the exception handling mechanism in the ClientGroup class
        ClientGroup testClientGroup = new ClientGroup(((ClientGroup) (null)));
        Client client1 = new Client(new IoSession("TestClient", "localhost", 80));
        client1.setId("123456789");
        testClientGroup.add(client1);
        testClientGroup.createSubGroup();
        MockThrowable mockThrowable = new MockThrowable("SocketException: Connection refused");
        mockThrowable.setStackTrace(new StackTraceElement[]{ new StackTraceElement("Client", "connect", "Client.java", 20) });
        testClientGroup.notifyExceptionCaught(client1, mockThrowable);
        ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>();
    }
}
statement is: // Improved test data for testing the exception handling mechanism in the ClientGroup class
ClientGroup testClientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client1 = new Client(new IoSession("TestClient", "localhost", 80)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: client1.setId("123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: client1.setId("123456789") target is: client1 method is: setId(java.lang.String)
statement is: testClientGroup.add(client1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: testClientGroup.add(client1) target is: testClientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: testClientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: testClientGroup.createSubGroup() target is: testClientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: MockThrowable mockThrowable = new MockThrowable("SocketException: Connection refused"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockThrowable.setStackTrace(new StackTraceElement[]{ new StackTraceElement("Client", "connect", "Client.java", 20) }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockThrowable.setStackTrace(new StackTraceElement[]{ new StackTraceElement("Client", "connect", "Client.java", 20) }) target is: mockThrowable method is: setStackTrace(java.lang.StackTraceElement[])
statement is: testClientGroup.notifyExceptionCaught(client1, mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: testClientGroup.notifyExceptionCaught(client1, mockThrowable) target is: testClientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
statement is: ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
String string = "SocketException: Connection refused";
MockThrowable mockThrowable = new MockThrowable((Throwable) string);
clientGroup.notifyExceptionCaught(client, mockThrowable);
ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable(arg0)
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught(arg0, arg1)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: java.lang.ref.WeakReference(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.WeakReference<ioproject.server.network.Client>
statement code is: WeakReference<Client> weakReference = new WeakReference<Client>(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
WeakReference<Client> weakReference = new WeakReference<Client>(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Improve
        the test;
        by changing;
        primitive values;
        Strings to;
        illustrative examples;
        of constructor;
        of use;
        valid example;
        an IoSession;
        of constructor;
        of use;
        valid example;
        a ClientGroup;
        of using;
        as the;
        exception type;
        exception use;
        more descriptive;
        representative exception;
        such as;
        "IOException".d.Instead = $missing$;
        of using;
        the method;
        the use;
        more descriptive;
        representative example;
        a client;
    }
}
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings to, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: illustrative examples, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of constructor, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of use, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: valid example, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: an IoSession, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of constructor, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of use, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: valid example, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: a ClientGroup, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of using, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: as the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: exception type, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: exception use, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: more descriptive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: representative exception, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: such as, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: "IOException".d.Instead = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: of using, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the method, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the use, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: more descriptive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: representative example, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: a client, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: ioproject.client.network.StateMultiplexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.StateMultiplexer
statement code is: StateMultiplexer stateMultiplexer = new StateMultiplexer()
statement is: ioproject.common.network.MessageMultiplexer(Lioproject/common/network/MessageHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.MessageMultiplexer
statement code is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(arg0)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable("")
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught(arg0, arg1)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("");
clientGroup.notifyExceptionCaught(client, mockThrowable);
Object object = new Object();
clientGroup.notifyMessageReceived(client, object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        Client client = new Client(((IoSession) (null)));
        StateMultiplexer stateMultiplexer = new StateMultiplexer();
        MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.add(client);
        MockThrowable mockThrowable = new MockThrowable("Test Exception");
        clientGroup.notifyExceptionCaught(client, mockThrowable);
        Object object = new Object();
        clientGroup.notifyMessageReceived(client, object);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StateMultiplexer stateMultiplexer = new StateMultiplexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: MockThrowable mockThrowable = new MockThrowable("Test Exception"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(client, mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(client, mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageReceived(client, object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, object) target is: clientGroup method is: notifyMessageReceived(Client,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
String string = "Test Exception";
MockThrowable mockThrowable = new MockThrowable(string);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Object object = new Object();
clientGroup.notifyMessageReceived(client, object);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Client client = new Client((IoSession) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Group 1");
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
        Client client = new Client("John Doe", "johndoe@example.com", "1234567890");
        clientGroup.add(client);
        Client client = new Client("Jane Smith", "janesmith@example.com", "9876543210");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("John Doe", "johndoe@example.com", "1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
statement is: Client client = new Client("Jane Smith", "janesmith@example.com", "9876543210"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("New Client Group");
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
        clientGroup.createSubGroup();
        Client client = new Client("John Doe", 25, "johndoe@gmail.com");
        clientGroup.add(client);
        clientGroup.remove(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("New Client Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("John Doe", 25, "johndoe@gmail.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "New Client Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.evosuite.runtime.mock.java.net.MockInetSocketAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockInetSocketAddress
statement code is: MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: sendUdpPacket(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendUdpPacket = NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null)
statement is: getHostName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String hostName = mockInetSocketAddress.getHostName()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, arg1)
statement is: String string = "org.apache.mina.common.support.IoServiceListenerSupport" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = "org.apache.mina.common.support.IoServiceListenerSupport"
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
mockInetSocketAddress.getHostName();
createSubGroup.add(client);
Client client = new Client((IoSession) null);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
String string = "org.apache.mina.common.support.IoServiceListenerSupport";
MockThrowable mockThrowable = new MockThrowable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);// improved: set a more descriptive port number, such as 80 or 443

        Client client = new Client(((IoSession) (null)));
        clientGroup.add(client);
        Client client = new Client(((IoSession) (null)));
        clientGroup.add(client);
        ClientGroup createSubGroup = clientGroup.createSubGroup();// improved: use a more descriptive name for the sub-group variable, such as "subGroup"

        NetworkHandling.sendUdpPacket(((EvoSuiteLocalAddress) (null)), ((byte[]) (null)));// improved: set more descriptive values for the arguments, such as "targetAddress" and "dataBytes"

        mockInetSocketAddress.getHostName();// improved: use a more descriptive name for the method call, such as "getHostname"

        createSubGroup.add(client);// improved: use a more descriptive name for the sub-group variable, such as "subGroup"

        Client client = new Client(((IoSession) (null)));
        Object object = new Object();
        clientGroup.notifyMessageSent(client, client);// improved: use a more descriptive name for the method call, such as "notifyMessageReceived"

        String string = "org.apache.mina.common.support.IoServiceListenerSupport";// improved: set a more descriptive value for the String variable, such as "expectedClassName"

        MockThrowable mockThrowable = new MockThrowable();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158)// improved: set a more descriptive port number, such as 80 or 443
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup()// improved: use a more descriptive name for the sub-group variable, such as "subGroup"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: NetworkHandling.sendUdpPacket(((EvoSuiteLocalAddress) (null)), ((byte[]) (null)))// improved: set more descriptive values for the arguments, such as "targetAddress" and "dataBytes"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.sendUdpPacket(((EvoSuiteLocalAddress) (null)), ((byte[]) (null)))// improved: set more descriptive values for the arguments, such as "targetAddress" and "dataBytes"
 target is: NetworkHandling method is: sendUdpPacket(EvoSuiteLocalAddress,byte[])
Matched Method is: sendUdpPacket(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: mockInetSocketAddress.getHostName()// improved: use a more descriptive name for the method call, such as "getHostname"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockInetSocketAddress.getHostName()// improved: use a more descriptive name for the method call, such as "getHostname"
 target is: mockInetSocketAddress method is: getHostName()
source statement: org.evosuite.runtime.mock.java.net.MockInetSocketAddress(I)V callee: VariableReference: Statement 1, type org.evosuite.runtime.mock.java.net.MockInetSocketAddressindex is: 2
Matched Method is: getHostName()Ljava/lang/String;
statement is: createSubGroup.add(client)// improved: use a more descriptive name for the sub-group variable, such as "subGroup"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(client)// improved: use a more descriptive name for the sub-group variable, such as "subGroup"
 target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 6, type ioproject.server.network.ClientGroupindex is: 7
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: Client client = new Client(((IoSession) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageSent(client, client)// improved: use a more descriptive name for the method call, such as "notifyMessageReceived"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(client, client)// improved: use a more descriptive name for the method call, such as "notifyMessageReceived"
 target is: clientGroup method is: notifyMessageSent(Client,Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
statement is: String string = "org.apache.mina.common.support.IoServiceListenerSupport"// improved: set a more descriptive value for the String variable, such as "expectedClassName"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: MockThrowable mockThrowable = new MockThrowable(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "org.apache.mina.common.support.IoServiceListenerSupport"
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
int _int = 158;
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(_int);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
EvoSuiteLocalAddress evoSuiteLocalAddress = null;
byte[] byteArray = null;
NetworkHandling.sendUdpPacket(evoSuiteLocalAddress, byteArray);
((InetSocketAddress) _int).getHostName();
clientGroup.add(client);
Client client = new Client((IoSession) null);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
String string = "org.apache.mina.common.support.IoServiceListenerSupport";
MockThrowable mockThrowable = new MockThrowable();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: org.apache.mina.transport.vmpipe.VmPipeAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.VmPipeAddress
statement code is: VmPipeAddress vmPipeAddress = new VmPipeAddress(403)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: spliterator()Ljava/util/Spliterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Spliterator<ioproject.server.network.Client>
statement code is: Spliterator<Client> spliterator = clientGroup.spliterator()
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains(arg0)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
clientGroup.contains(client);
clientGroup.remove(client);
clientGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
        VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
        Client client1 = new Client("Client 1", "client1@example.com");
        Client client2 = new Client("Client 2", "client2@example.com");
        Client client3 = new Client("Client 3", "client3@example.com");
        clientGroup.add(client1);
        clientGroup.add(client2);
        clientGroup.add(client3);
        clientGroup.spliterator();
        clientGroup.contains(client1);
        clientGroup.contains(client2);
        clientGroup.contains(client3);
        clientGroup.remove(client1);
        clientGroup.remove(client2);
        clientGroup.remove(client3);
        clientGroup.parentGroup();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeAddress vmPipeAddress = new VmPipeAddress(403), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client1 = new Client("Client 1", "client1@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client2 = new Client("Client 2", "client2@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client3 = new Client("Client 3", "client3@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client1) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.add(client2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client2) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.add(client3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client3) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.spliterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.spliterator() target is: clientGroup method is: spliterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: spliterator()Ljava/util/Spliterator;
statement is: clientGroup.contains(client1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(client1) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.contains(client2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(client2) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.contains(client3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(client3) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.remove(client1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client1) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.remove(client2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client2) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.remove(client3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client3) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.parentGroup() target is: clientGroup method is: parentGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: parentGroup()Lioproject/server/network/ClientGroup;
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
int _int = 403;
VmPipeAddress vmPipeAddress = new VmPipeAddress(_int);
Client client = null;
clientGroup.add(client);
Client client = null;
clientGroup.add(client);
Client client = null;
clientGroup.add(client);
clientGroup.spliterator();
Client client = null;
clientGroup.contains(client);
Client client = null;
clientGroup.contains(client);
Client client = null;
clientGroup.contains(client);
Client client = null;
clientGroup.remove(client);
Client client = null;
clientGroup.remove(client);
Client client = null;
clientGroup.remove(client);
clientGroup.parentGroup();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.apache.mina.common.ExpiringSessionRecycler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.ExpiringSessionRecycler
statement code is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler()
statement is: ioproject.client.network.StateMultiplexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.StateMultiplexer
statement code is: StateMultiplexer stateMultiplexer = new StateMultiplexer()
statement is: ioproject.common.network.MessageMultiplexer(Lioproject/common/network/MessageHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.MessageMultiplexer
statement code is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(arg0)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.remove(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
        StateMultiplexer stateMultiplexer = new StateMultiplexer();
        MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        Client client = new Client("192.168.0.1", 8080);
        clientGroup.remove(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StateMultiplexer stateMultiplexer = new StateMultiplexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: Client client = new Client("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
clientGroup.remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U")
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(null);
        MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
        clientGroup.notifyExceptionCaught(((Client) (null)), mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(((Client) (null)), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(((Client) (null)), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
String string = "^hq[1Q__U";
MockThrowable mockThrowable = new MockThrowable(string);
MockThrowable mockThrowable = null;
clientGroup.notifyExceptionCaught((Client) mockThrowable, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Group 1");
        ClientGroup createSubGroup = clientGroup.createSubGroup("Sub Group 1");
        Client client = new Client("Client 1");
        clientGroup.add(client);
        createSubGroup.parentGroup();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup("Sub Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup("Sub Group 1") target is: clientGroup method is: createSubGroup(java.lang.String)
statement is: Client client = new Client("Client 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: createSubGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.parentGroup() target is: createSubGroup method is: parentGroup()
TestCase is: String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "Client 1";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Online Shopping");
        Client client1 = new Client("John Doe", "johndoe@gmail.com");
        clientGroup.add(client1);
        Client client2 = new Client("Jane Doe", "janedoe@gmail.com");
        clientGroup.add(client2);
        // Test that the size of the group is correct
        assertEquals(2, clientGroup.size());
        // Test that the clients are in the group
        assertTrue(client1.isInGroup(clientGroup));
        assertTrue(client2.isInGroup(clientGroup));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Online Shopping"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client1 = new Client("John Doe", "johndoe@gmail.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client1) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Client client2 = new Client("Jane Doe", "janedoe@gmail.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client2) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Test that the size of the group is correct
assertEquals(2, clientGroup.size()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test that the size of the group is correct
assertEquals(2, clientGroup.size()) target is:  method is: assertEquals(int,<unknown>)
statement is: // Test that the clients are in the group
assertTrue(client1.isInGroup(clientGroup)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test that the clients are in the group
assertTrue(client1.isInGroup(clientGroup)) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(client2.isInGroup(clientGroup)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(client2.isInGroup(clientGroup)) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "Online Shopping";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);

* test suite isTestSuite: 35
Test 0: 
byte[] byteArray = new byte[0];
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, byteArray);
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
clientGroup.size();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.add(client);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent(client, createSubGroup);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable("3");
clientGroup.notifyMessageReceived(client, (Object) null);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("3");
clientGroup.notifyMessageReceived(client, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, "3");
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>();
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
WeakReference<Client> weakReference = new WeakReference<Client>(client);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("");
clientGroup.notifyExceptionCaught(client, mockThrowable);
Object object = new Object();
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived(client, object);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Client client = new Client((IoSession) null);
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
mockInetSocketAddress.getHostName();
createSubGroup.add(client);
Client client = new Client((IoSession) null);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
MockThrowable mockThrowable = new MockThrowable();
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
clientGroup.contains(client);
clientGroup.remove(client);
clientGroup.parentGroup();
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.remove(client);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.size();
Test 18: 
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);

Test 19: 
String string = "my_client_group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "my_client_group");
((ClientGroup) string).iterator();

Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
clientGroup.createSubGroup();
((ClientGroup)true).remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();

Test 21: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "Client 1";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageSent(client, clientGroup);

Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable("This is a descriptive and representative string");
clientGroup.notifyMessageReceived(client, (Object) null);

Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("An error occurred while processing the request (Error code: 302, Details: Invalid request parameters.)");
clientGroup.notifyMessageReceived(client, (Object) null);

Test 24: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, "3");

Test 25: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
MockThrowable mockThrowable = new MockThrowable((Throwable) "SocketException: Connection refused");
clientGroup.notifyExceptionCaught(client, mockThrowable);
ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>();

Test 26: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("Test Exception");
clientGroup.notifyExceptionCaught(client, mockThrowable);
Object object = new Object();
clientGroup.notifyMessageReceived(client, object);

Test 27: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();

Test 28: 
String string = "New Client Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "New Client Group");
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).remove(client);

Test 29: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
((InetSocketAddress)158).getHostName();
clientGroup.add(client);
Client client = new Client((IoSession) null);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
MockThrowable mockThrowable = new MockThrowable();

Test 30: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
clientGroup.add((Client) null);
clientGroup.add((Client) null);
clientGroup.add((Client) null);
clientGroup.spliterator();
clientGroup.contains((Client) null);
clientGroup.contains((Client) null);
clientGroup.contains((Client) null);
clientGroup.remove((Client) null);
clientGroup.remove((Client) null);
clientGroup.remove((Client) null);
clientGroup.parentGroup();

Test 31: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
clientGroup.notifyExceptionCaught((Client) mockThrowable, (Throwable) null);

Test 33: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
String string = "Client 1";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);

Test 34: 
String string = "Online Shopping";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Online Shopping");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);


* Generated after the refinement and before minimization 35 tests with total length 275
* test suite isTestSuite: 35
Test 0: 
byte[] byteArray = new byte[0];
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, byteArray);
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
clientGroup.size();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.add(client);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent(client, createSubGroup);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable("3");
clientGroup.notifyMessageReceived(client, (Object) null);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("3");
clientGroup.notifyMessageReceived(client, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, "3");
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>();
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
WeakReference<Client> weakReference = new WeakReference<Client>(client);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("");
clientGroup.notifyExceptionCaught(client, mockThrowable);
Object object = new Object();
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived(client, object);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Client client = new Client((IoSession) null);
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
mockInetSocketAddress.getHostName();
createSubGroup.add(client);
Client client = new Client((IoSession) null);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
MockThrowable mockThrowable = new MockThrowable();
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
clientGroup.contains(client);
clientGroup.remove(client);
clientGroup.parentGroup();
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.remove(client);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.size();
Test 18: 
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);

Test 19: 
String string = "my_client_group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "my_client_group");
((ClientGroup) string).iterator();

Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
clientGroup.createSubGroup();
((ClientGroup)true).remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();

Test 21: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "Client 1";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageSent(client, clientGroup);

Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable("This is a descriptive and representative string");
clientGroup.notifyMessageReceived(client, (Object) null);

Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("An error occurred while processing the request (Error code: 302, Details: Invalid request parameters.)");
clientGroup.notifyMessageReceived(client, (Object) null);

Test 24: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, "3");

Test 25: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
MockThrowable mockThrowable = new MockThrowable((Throwable) "SocketException: Connection refused");
clientGroup.notifyExceptionCaught(client, mockThrowable);
ReferenceQueue<Object> referenceQueue = new ReferenceQueue<Object>();

Test 26: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("Test Exception");
clientGroup.notifyExceptionCaught(client, mockThrowable);
Object object = new Object();
clientGroup.notifyMessageReceived(client, object);

Test 27: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();

Test 28: 
String string = "New Client Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "New Client Group");
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).remove(client);

Test 29: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
((InetSocketAddress)158).getHostName();
clientGroup.add(client);
Client client = new Client((IoSession) null);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
MockThrowable mockThrowable = new MockThrowable();

Test 30: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
clientGroup.add((Client) null);
clientGroup.add((Client) null);
clientGroup.add((Client) null);
clientGroup.spliterator();
clientGroup.contains((Client) null);
clientGroup.contains((Client) null);
clientGroup.contains((Client) null);
clientGroup.remove((Client) null);
clientGroup.remove((Client) null);
clientGroup.remove((Client) null);
clientGroup.parentGroup();

Test 31: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
clientGroup.notifyExceptionCaught((Client) mockThrowable, (Throwable) null);

Test 33: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
String string = "Client 1";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);

Test 34: 
String string = "Online Shopping";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Online Shopping");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);


* Minimizing test suite
* test suite isTestSuite: 18
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(client);
clientGroup.add(client);
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, "3");
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.remove(client);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client client = new Client((IoSession) null);
clientGroup.add(client);
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
mockInetSocketAddress.getHostName();
createSubGroup.add(client);
Object object = new Object();
clientGroup.notifyMessageSent(client, client);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
Client client = new Client((IoSession) null);
clientGroup.add(client);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
WeakReference<Client> weakReference = new WeakReference<Client>(client);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.createSubGroup();
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);
Client client = new Client((IoSession) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable("");
clientGroup.notifyExceptionCaught(client, mockThrowable);
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
clientGroup.add((Client) null);
clientGroup.remove((Client) null);
clientGroup.parentGroup();
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = new Client((IoSession) null);
clientGroup.remove(client);
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
clientGroup.size();
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.spliterator();
clientGroup.contains(client);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("^hq[1Q__U");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageReceived(client, (Object) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(client, iterator);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.size();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 66
* Number of covered goals: 57
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 53
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 25
* Number of covered goals: 19
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 66
* Number of covered goals: 53
* Generated 18 tests with total length 118
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 51%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
createSubGroup.parentGroup();
clientGroup.add(arg0);
boolean add = clientGroup.add(arg0);
assertEquals(1, clientGroup.size());
assertTrue(add);


** It was a parseable test case! 
refined test name is: testCreateSubgroupAndAddClient
* Compiling Tests
refined test name is: testCreateSubgroupAndAddClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.spliterator();
clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, "3");
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testSpliterator
* Compiling Tests
refined test name is: testSpliteratorReturnsNonNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
clientGroup.spliterator();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.remove(arg0);
Iterator<Client> arg1 = clientGroup.iterator();
clientGroup.notifyMessageSent(arg0, arg1);
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
IoServiceListenerSupport ioServiceListenerSupport = new IoServiceListenerSupport();

** It was a parseable test case! 
refined test name is: testCreateSubGroupAndNotifyMessageSent
* Compiling Tests
refined test name is: testClientGroupCreateSubGroupAndNotifyMessageSent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(158);
Client arg1 = new Client((IoSession) null);
clientGroup.add(arg1);
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
ClientGroup createSubGroup = clientGroup.createSubGroup();
NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, (byte[]) null);
mockInetSocketAddress.getHostName();
createSubGroup.add(arg1);
Object object = new Object();
boolean notifyMessageSent = clientGroup.notifyMessageSent(arg1, arg1);
assertEquals(2, clientGroup.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testClientGroupAddRemoveAndSendUdpPacket
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
clientGroup.createSubGroup();
MockThrowable arg1 = new MockThrowable();
clientGroup.notifyExceptionCaught(arg0, arg1);
Client client = new Client((IoSession) null);
assertFalse(client.equals((Object)arg0));


** It was a parseable test case! 
refined test name is: testClientExceptionHandling
* Compiling Tests
refined test name is: testClientGroupRemovesClientOnException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
clientGroup.add((Client) null);
assertEquals(1, clientGroup.size());

clientGroup.remove((Client) null);
clientGroup.parentGroup();
assertEquals(0, clientGroup.size());


** It was a parseable test case! 
refined test name is: testAddAndRemoveClientFromExpiringSessionRecycler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ExpiringSessionRecycler expiringSessionRecycler = new ExpiringSessionRecycler();
clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
assertEquals(1, clientGroup.size());

boolean remove = clientGroup.remove(arg0);
assertTrue(remove);


** It was a parseable test case! 
refined test name is: testCreateSubGroupAndAddClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
clientGroup.contains(arg0);
int size = clientGroup.size();
assertEquals(0, size);


** It was a parseable test case! 
refined test name is: testContainsClientNoClients
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
VmPipeAddress vmPipeAddress = new VmPipeAddress(403);
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
clientGroup.spliterator();
boolean contains = clientGroup.contains(arg0);
assertEquals(1, clientGroup.size());
assertTrue(contains);


** It was a parseable test case! 
refined test name is: testContainsMethodWithSingleClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable arg1 = new MockThrowable("^hq[1Q__U");
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1);
assertFalse(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testNotifyExceptionCaughtNullClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, (Object) null);
assertFalse(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testNotifyMessageReceivedWithNullClient
* Compiling Tests
refined test name is: testNotifyMessageReceivedWithNullClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
Iterator<Client> arg1 = clientGroup.iterator();
boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, arg1);
assertFalse(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentWithClientNotInGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
ClientGroup parentGroup = createSubGroup.parentGroup();
assertEquals(1, clientGroup.size());
assertSame(clientGroup, parentGroup);


** It was a parseable test case! 
refined test name is: testCreateSubGroupAndAddClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
int size = clientGroup.size();
assertEquals(1, size);


** It was a parseable test case! 
refined test name is: testAddClientToClientGroupSizeOne
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:35:24.273 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:24.374 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:35:25.035 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:25.039 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 03:35:25.823 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:25.824 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 03:35:26.518 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:26.519 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:35:27.243 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:27.245 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:29.839 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:29.840 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:30.420 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:30.424 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:31.009 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:31.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:31.576 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:31.577 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:32.135 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:32.137 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:35:32.744 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:32.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:33.309 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:33.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:33.941 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:33.943 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:35:34.513 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:34.515 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 4 called: 3 to improve: false
** Write a test suite: 10 called: 4 to improve: false
[MASTER] 03:35:42.544 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:42.547 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
[MASTER] 03:35:50.870 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar331754065747562678.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:35:50.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar331754065747562678.jar
[MASTER] 03:36:04.970 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 03:40:36.613 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
