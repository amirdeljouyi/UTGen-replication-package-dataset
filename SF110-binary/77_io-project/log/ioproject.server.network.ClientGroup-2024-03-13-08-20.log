* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ioproject.server.network.ClientGroup
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/77_io-project/evosuite-files/evosuite.properties
* Connecting to master process on port 4247
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:20:21.747 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:20:23.408 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:20:23.420 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:20:23.564 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class ioproject.server.network.ClientGroup
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 222
* Using seed 1710318018358
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 83 / 222
[Progress:>                             1%] [Cov:========================>          71%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===============================>   90%][Progress:===>                          13%] [Cov:===============================>   90%][Progress:===>                          13%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   [Pr[Progress:====>                         16%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  [Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Pr[Progress:=========>                    32%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  [Pr[Progress:=============>                45%] [Cov:================================>  94%][Progress:=============>                46%] [Cov:================================>  94%][Progress:==============>               48%] [Cov:================================>  94%][Progress:==============>               48%] [Cov:================================>  [Pr[Progress:===============>              51%] [Cov:================================>  [Pr[Progress:================>             54%] [Cov:================================>  94%][Progress:=================>            57%] [Cov:================================>  94%][Progress:=================>            57%] [Cov:================================>  [Progress:=================>            59%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Pr[Progress:===================>          64%] [Cov:================================>  [Pr[Progress:====================>         69%] [Cov:================================>  [Pr[Progress:======================>       76%] [Cov:================================>  [Progress:======================>       76%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%]
* Search finished after 202s and 59 generations, 35190 statements, best individual has fitness: 14.0
* Generated before the refinement 22 tests with total length 106
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

* Computation finished
roup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = arg1.notifyMessageSent((Client) null, arg1)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
test data is: ClientGroup clientGroup = null;
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, clientGroup);
ClientGroup clientGroup = new ClientGroup(clientGroup);

* Computation finished
