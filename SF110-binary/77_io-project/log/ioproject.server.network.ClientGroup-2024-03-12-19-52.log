* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ioproject.server.network.ClientGroup
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/77_io-project/evosuite-files/evosuite.properties
* Connecting to master process on port 10362
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:52:09.212 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:52:09.699 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:52:09.700 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:52:09.763 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class ioproject.server.network.ClientGroup
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 222
* Using seed 1710273127714
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 83 / 222
[Progress:>                             0%] [Cov:===================>               56%][Progress:>                             0%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:==========================>        76%][Progress:>                             3%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:=============================>     85%][Progress:>                             3%] [Cov:=============================>     85%][Progress:>                             3%] [Cov:==============================>    87%][Progress:>                             3%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            6%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   91%][MASTER] 19:52:24.171 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.ref.ReferenceQueue<T> : Type points to itself
[Progress:==>                           7%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:=============>                46%] [Cov:================================>  94%][Progress:=============>                46%] [Cov:================================>  94%][Progress:=============>                46%] [Cov:================================>  94%][Progress:==============>               47%] [Cov:================================>  94%][Progress:==============>               47%] [Cov:================================>  94%][Progress:==============>               48%] [Cov:================================>  94%][Progress:===============>              50%] [Cov:================================>  94%][Progress:===============>              53%] [Cov:================================>  94%][Progress:=================>            58%] [Cov:================================>  94%][Progress:==================>           61%] [Cov:================================>  94%][Progress:==================>           61%] [Cov:================================>  94%][Progress:==================>           61%] [Cov:================================>  94%][Progress:==================>           61%] [Cov:================================>  94%][Progress:===================>          65%] [Cov:================================>  94%][Progress:===================>          65%] [Cov:================================>  94%][Progress:====================>         67%] [Cov:================================>  94%][Progress:====================>         67%] [Cov:================================>  94%][Progress:====================>         68%] [Cov:================================>  94%][Progress:====================>         68%] [Cov:================================>  94%][Progress:=====================>        70%] [Cov:================================>  94%][Progress:=====================>        72%] [Cov:================================>  94%][Progress:======================>       76%] [Cov:================================>  94%][Progress:========================>     82%] [Cov:================================>  94%][Progress:========================>     82%] [Cov:================================>  94%][Progress:==========================>   87%] [Cov:================================>  94%][Progress:==========================>   89%] [Cov:================================>  94%][Progress:===========================>  91%] [Cov:================================>  94%][Progress:===========================>  91%] [Cov:================================>  94%][Progress:===========================>  91%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%]
* Search finished after 204s and 93 generations, 57484 statements, best individual has fitness: 8.0
* Generated before the refinement 23 tests with total length 113
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("New Client Group");
        clientGroup.setDescription("This is a new client group created for testing.");
        clientGroup.addClient(new Client("John Doe", "johndoe@example.com"));
        clientGroup.addClient(new Client("Jane Doe", "janedoe@example.com"));
        assertEquals(2, clientGroup.size());
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("New Client Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.setDescription("This is a new client group created for testing."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.setDescription("This is a new client group created for testing.") target is: clientGroup method is: setDescription(java.lang.String)
statement is: clientGroup.addClient(new Client("John Doe", "johndoe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClient(new Client("John Doe", "johndoe@example.com")) target is: clientGroup method is: addClient(Client)
statement is: clientGroup.addClient(new Client("Jane Doe", "janedoe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClient(new Client("Jane Doe", "janedoe@example.com")) target is: clientGroup method is: addClient(Client)
statement is: assertEquals(2, clientGroup.size()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(2, clientGroup.size()) target is:  method is: assertEquals(int,<unknown>)
TestCase is: String string = "New Client Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClientGroup parentGroup = new ClientGroup("Parent Group");
        clientGroup.addChildGroup(new ClientGroup("Child Group 1"));
        clientGroup.addChildGroup(new ClientGroup("Child Group 2"));
        // Actual test data
        ClientGroup childGroup = new ClientGroup(parentGroup);
        clientGroup.parentGroup();
    }
}
statement is: // Improved test data
ClientGroup parentGroup = new ClientGroup("Parent Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addChildGroup(new ClientGroup("Child Group 1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addChildGroup(new ClientGroup("Child Group 1")) target is: clientGroup method is: addChildGroup(ClientGroup)
statement is: clientGroup.addChildGroup(new ClientGroup("Child Group 2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addChildGroup(new ClientGroup("Child Group 2")) target is: clientGroup method is: addChildGroup(ClientGroup)
statement is: // Actual test data
ClientGroup childGroup = new ClientGroup(parentGroup), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.parentGroup() target is: clientGroup method is: parentGroup()
TestCase is: String string = "Parent Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
ClientGroup clientGroup = new ClientGroup(clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new String[]{ "Alice", "Bob", "Charlie" });
        Iterator<Client> iterator = clientGroup.iterator();
        clientGroup.add("Alice");
        clientGroup.notifyMessageSent("Alice", iterator);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new String[]{ "Alice", "Bob", "Charlie" }), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Iterator<Client> iterator = clientGroup.iterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.iterator() target is: clientGroup method is: iterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: iterator()Ljava/util/Iterator;
statement is: clientGroup.add("Alice"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add("Alice") target is: clientGroup method is: add(java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageSent("Alice", iterator), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent("Alice", iterator) target is: clientGroup method is: notifyMessageSent(java.lang.String,Iterator)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
String string = "Alice";
clientGroup.add((Client) string);
String string = "Alice";
clientGroup.notifyMessageSent((Client) string, iterator);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent((Client) null, iterator);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 32));
        Iterator<Client> iterator = clientGroup.iterator();
        clientGroup.notifyMessageSent(new Client("Jane Smith", 25), iterator);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 32)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Iterator<Client> iterator = clientGroup.iterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.iterator() target is: clientGroup method is: iterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: iterator()Ljava/util/Iterator;
statement is: clientGroup.notifyMessageSent(new Client("Jane Smith", 25), iterator), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(new Client("Jane Smith", 25), iterator) target is: clientGroup method is: notifyMessageSent(Client,Iterator)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
Iterator<Client> iterator = null;
clientGroup.notifyMessageSent(iterator, iterator);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Iterator<Client> iterator = createSubGroup.iterator();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Group 1");
        ClientGroup createSubGroup = clientGroup.createSubGroup("Subgroup 2");
        Iterator<Client> iterator = createSubGroup.iterator();
        clientGroup.add(new Client("John Doe"));
        createSubGroup.add(new Client("Jane Smith"));
        clientGroup.notifyMessageSent(new Client("Bob Brown"), iterator);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup("Subgroup 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup("Subgroup 2") target is: clientGroup method is: createSubGroup(java.lang.String)
statement is: Iterator<Client> iterator = createSubGroup.iterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.iterator() target is: createSubGroup method is: iterator()
statement is: clientGroup.add(new Client("John Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: createSubGroup.add(new Client("Jane Smith")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("Jane Smith")) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.notifyMessageSent(new Client("Bob Brown"), iterator), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(new Client("Bob Brown"), iterator) target is: clientGroup method is: notifyMessageSent(Client,Iterator)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
Iterator<Client> iterator = null;
((ClientGroup) string).notifyMessageSent(client, iterator);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Group A");
        clientGroup.add(new Client("Client 1"));
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.add(new Client("Client 2"));
        clientGroup.notifyMessageSent(new Client("Sender"), "Hello World!");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Group A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("Client 1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Client 1")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.add(new Client("Client 2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("Client 2")) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 2, type ioproject.server.network.ClientGroupindex is: 4
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.notifyMessageSent(new Client("Sender"), "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(new Client("Sender"), "Hello World!") target is: clientGroup method is: notifyMessageSent(Client,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Group A";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Hello World!";
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageSent((Client) string, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: ioproject.common.network.MessageMultiplexer(Lioproject/common/network/MessageHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.MessageMultiplexer
statement code is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(arg0)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Test Group");
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.add("John Doe");
        clientGroup.notifyMessageSent("John Doe", "Hello World!");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Test Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.add("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add("John Doe") target is: clientGroup method is: add(java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageSent("John Doe", "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent("John Doe", "Hello World!") target is: clientGroup method is: notifyMessageSent(java.lang.String,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "John Doe";
((ClientGroup) string).add((Client) string);
String string = "John Doe";
String string = "Hello World!";
((ClientGroup) string).notifyMessageSent((Client) string, string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = arg1.notifyMessageReceived((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        ClientGroup clientGroup = new ClientGroup("group1");
        clientGroup.notifyMessageReceived(new Client("client1", Role.REGULAR_USER), "New order received from customer XYZ.");
    }
}
statement is: // Improved test data for the above code snippet
ClientGroup clientGroup = new ClientGroup("group1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageReceived(new Client("client1", Role.REGULAR_USER), "New order received from customer XYZ."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(new Client("client1", Role.REGULAR_USER), "New order received from customer XYZ.") target is: clientGroup method is: notifyMessageReceived(Client,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "New order received from customer XYZ.";
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageReceived((Client) string, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = arg1.notifyMessageReceived((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Group 1");
        clientGroup.createSubGroup();
        clientGroup.add(new Client("John Doe"));
        clientGroup.notifyMessageReceived(new Client("Jane Smith"), clientGroup);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(new Client("John Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.notifyMessageReceived(new Client("Jane Smith"), clientGroup), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(new Client("Jane Smith"), clientGroup) target is: clientGroup method is: notifyMessageReceived(Client,ClientGroup)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageReceived((Client) clientGroup, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, createSubGroup);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(null);
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        clientGroup.add(new Client("John", 35));
        createSubGroup.add(new Client("Jane", 28));
        clientGroup.notifyMessageReceived(new Client("Bob", 42), createSubGroup);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(new Client("John", 35)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John", 35)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: createSubGroup.add(new Client("Jane", 28)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("Jane", 28)) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.notifyMessageReceived(new Client("Bob", 42), createSubGroup), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(new Client("Bob", 42), createSubGroup) target is: clientGroup method is: notifyMessageReceived(Client,ClientGroup)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = null;
clientGroup.add(client);
Client client = null;
clientGroup.add(client);
ClientGroup clientGroup = null;
clientGroup.notifyMessageReceived((Client) createSubGroup, clientGroup);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, (ClientHandler) null)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageReceived((Client) null, object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        clientGroup.add(((Client) (null)));
        Object object = new Object();// Improved: replaced with a more descriptive and representative object

        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, ((ClientHandler) (null)));
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.notifyMessageReceived(((Client) (null)), object);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(((Client) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(((Client) (null))) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Object object = new Object()// Improved: replaced with a more descriptive and representative object
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, ((ClientHandler) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.notifyMessageReceived(((Client) (null)), object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(((Client) (null)), object) target is: clientGroup method is: notifyMessageReceived(Client,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = null;
clientGroup.add(client);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Object object = null;
clientGroup.notifyMessageReceived((Client) object, object);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable("192.168.1.42")
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("MyGroup");
        MockThrowable mockThrowable = new MockThrowable(new IOException());
        clientGroup.notifyExceptionCaught(((Client) (null)), mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("MyGroup"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThrowable mockThrowable = new MockThrowable(new IOException()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(((Client) (null)), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(((Client) (null)), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "MyGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Example Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        clientGroup.add(new Client("Jane Doe"));
        createSubGroup.add(new Client("John Smith"));
        MockThrowable mockThrowable = new MockThrowable("Test exception");
        clientGroup.notifyExceptionCaught(new Client("Bob Johnson"), mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Example Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(new Client("Jane Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Jane Doe")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: createSubGroup.add(new Client("John Smith")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("John Smith")) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable("Test exception"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(new Client("Bob Johnson"), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(new Client("Bob Johnson"), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: String string = "Example Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught(client, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.client.network.StateMultiplexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.StateMultiplexer
statement code is: StateMultiplexer stateMultiplexer = new StateMultiplexer()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        ClientGroup clientGroup = new ClientGroup(new ArrayList<>());
        StateMultiplexer stateMultiplexer = new StateMultiplexer();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.add(new Client(null));
        MockThrowable mockThrowable = new MockThrowable("Connection timed out");
        clientGroup.notifyExceptionCaught(new Client(null), mockThrowable);
    }
}
statement is: // Improved test data:
ClientGroup clientGroup = new ClientGroup(new ArrayList<>()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StateMultiplexer stateMultiplexer = new StateMultiplexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.add(new Client(null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client(null)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable("Connection timed out"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(new Client(null), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(new Client(null), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
clientGroup.add(client);
Client client = null;
MockThrowable mockThrowable = null;
clientGroup.notifyExceptionCaught(client, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClientGroup clientGroup = new ClientGroup("gold");
        clientGroup.contains(new Client("John Doe", 25));
    }
}
statement is: // Improved test data
ClientGroup clientGroup = new ClientGroup("gold"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.contains(new Client("John Doe", 25)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(new Client("John Doe", 25)) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).contains(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new ClientGroup());
        Client client = new Client(new IoSession("session1"));
        ClientGroup clientGroup2 = new ClientGroup();
        clientGroup2.add(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new ClientGroup()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client(new IoSession("session1")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup clientGroup2 = new ClientGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup2.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup2.add(client) target is: clientGroup2 method is: add(Client)
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Main Group");
        clientGroup.add(new Client("John Doe", 25));
        clientGroup.add(new Client("Jane Smith", 30));
        clientGroup.createSubGroup();
        clientGroup.remove(new Client("John Doe", 25));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Main Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John Doe", 25)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe", 25)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.add(new Client("Jane Smith", 30)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Jane Smith", 30)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.remove(new Client("John Doe", 25)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(new Client("John Doe", 25)) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        Client client = new Client("127.0.0.1", 8080, "username", "password");
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.remove(client);
    }
}
statement is: // Improved test data
ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("127.0.0.1", 8080, "username", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
clientGroup.remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable((String) null)
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((String) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Main Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        clientGroup.add(new Client("John Doe"));
        MockThrowable mockThrowable = new MockThrowable("Exception message");
        clientGroup.notifyExceptionCaught(new Client("Jane Smith"), mockThrowable);
        createSubGroup.add(new Client("Bob Johnson"));
        clientGroup.notifyExceptionCaught(new Client("Alice Brown"), mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Main Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(new Client("John Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable("Exception message"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(new Client("Jane Smith"), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(new Client("Jane Smith"), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: createSubGroup.add(new Client("Bob Johnson")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("Bob Johnson")) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.notifyExceptionCaught(new Client("Alice Brown"), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(new Client("Alice Brown"), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Exception message";
MockThrowable mockThrowable = new MockThrowable(string);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);
Client client = null;
((ClientGroup) string).add(client);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Gold");
        clientGroup.add(new Client("John", "Doe"));
        clientGroup.contains(new Client("Jane", "Smith"));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Gold"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John", "Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John", "Doe")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.contains(new Client("Jane", "Smith")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(new Client("Jane", "Smith")) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "Gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).contains(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Main Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup("Sub Group 1");
        clientGroup.add(new Client("Jane Doe", "janedoe@example.com"));
        createSubGroup.parentGroup();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Main Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup("Sub Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup("Sub Group 1") target is: clientGroup method is: createSubGroup(java.lang.String)
statement is: clientGroup.add(new Client("Jane Doe", "janedoe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Jane Doe", "janedoe@example.com")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: createSubGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.parentGroup() target is: createSubGroup method is: parentGroup()
TestCase is: String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.evosuite.runtime.mock.java.net.MockInetSocketAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockInetSocketAddress
statement code is: MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18)
statement is: org.apache.mina.transport.vmpipe.VmPipeAcceptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.VmPipeAcceptor
statement code is: VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor()
statement is: org.apache.mina.common.IoHandlerAdapter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.IoHandlerAdapter
statement code is: IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter()
statement is: org.apache.mina.transport.vmpipe.VmPipeAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.VmPipeAddress
statement code is: VmPipeAddress vmPipeAddress = new VmPipeAddress(1)
statement is: org.apache.mina.transport.vmpipe.support.VmPipe(Lorg/apache/mina/transport/vmpipe/VmPipeAcceptor;Lorg/apache/mina/transport/vmpipe/VmPipeAddress;Lorg/apache/mina/common/IoHandler;Lorg/apache/mina/common/IoServiceConfig;Lorg/apache/mina/common/support/IoServiceListenerSupport;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.support.VmPipe
statement code is: VmPipe vmPipe = new VmPipe(arg0, arg1, arg2, (IoServiceConfig) null, (IoServiceListenerSupport) null)
statement is: org.apache.mina.transport.vmpipe.support.VmPipeSessionImpl(Lorg/apache/mina/common/IoService;Lorg/apache/mina/common/IoServiceConfig;Lorg/apache/mina/common/support/IoServiceListenerSupport;Ljava/net/SocketAddress;Lorg/apache/mina/common/IoHandler;Lorg/apache/mina/transport/vmpipe/support/VmPipe;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.support.VmPipeSessionImpl
statement code is: VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(arg0, (IoServiceConfig) null, (IoServiceListenerSupport) null, arg3, arg4, arg5)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) null, (IoServiceListenerSupport) null, mockInetSocketAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
        VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
        IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
        VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
        VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, ((IoServiceConfig) (null)), ((IoServiceListenerSupport) (null)));
        VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, ((IoServiceConfig) (null)), ((IoServiceListenerSupport) (null)), mockInetSocketAddress, ioHandlerAdapter, vmPipe);
        Client client = new Client(vmPipeSessionImpl);
        clientGroup.add(client);
        clientGroup.size();// returns the number of clients in the group, which is 1 in this case }}

    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeAddress vmPipeAddress = new VmPipeAddress(1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, ((IoServiceConfig) (null)), ((IoServiceListenerSupport) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, ((IoServiceConfig) (null)), ((IoServiceListenerSupport) (null)), mockInetSocketAddress, ioHandlerAdapter, vmPipe), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client(vmPipeSessionImpl), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.size()// returns the number of clients in the group, which is 1 in this case }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.size()// returns the number of clients in the group, which is 1 in this case }}
 target is: clientGroup method is: size()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: size()I
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
int _int = 18;
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(_int);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
int _int = 1;
VmPipeAddress vmPipeAddress = new VmPipeAddress(_int);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) mockInetSocketAddress, (IoServiceListenerSupport) ioHandlerAdapter, (SocketAddress) vmPipe, (IoHandler) vmPipeAcceptor, (VmPipe) _int);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();

* test suite isTestSuite: 45
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent((Client) null, iterator);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Iterator<Client> iterator = createSubGroup.iterator();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, (Object) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.common.network.MessageMultiplexer", e);
}

Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, createSubGroup);
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived((Client) null, object);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // Method called with the following arguments: null (node), java.lang.Object@4f8cbfe7 (message).
   //
}

Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove(client);
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((String) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);
Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.parentGroup();
Test 21: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();
Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) null, (IoServiceListenerSupport) null, mockInetSocketAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();
Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "New Client Group");

Test 24: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Parent Group");
ClientGroup clientGroup = new ClientGroup(clientGroup);

Test 25: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.add((Client) "Alice");
String string = "Alice";
clientGroup.notifyMessageSent((Client) string, iterator);

Test 26: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(iterator, (Object) null);

Test 27: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
Iterator<Client> iterator = null;
((ClientGroup) string).notifyMessageSent(client, iterator);

Test 28: 
String string = "Group A";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group A");
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Hello World!";
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageSent((Client) string, clientGroup);

Test 29: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "John Doe";
((ClientGroup) string).add((Client) string);
String string = "John Doe";
String string = "Hello World!";
((ClientGroup) string).notifyMessageSent((Client) string, string);

Test 30: 
String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "group1");
String string = "New order received from customer XYZ.";
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageReceived((Client) string, clientGroup);

Test 31: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageReceived((Client) clientGroup, clientGroup);

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) createSubGroup, (Object) null);

Test 33: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageReceived((Client) object, (Object) null);

Test 34: 
String string = "MyGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "MyGroup");
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);

Test 35: 
String string = "Example Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Example Group");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught(client, mockThrowable);

Test 36: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);

Test 37: 
String string = "gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "gold");
Client client = null;
((ClientGroup) string).contains(client);

Test 38: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);

Test 39: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).remove(client);

Test 40: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);

Test 41: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Exception message";
MockThrowable mockThrowable = new MockThrowable(string);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);
Client client = null;
((ClientGroup) string).add(client);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);

Test 42: 
String string = "Gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Gold");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).contains(client);

Test 43: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
Client client = null;
((ClientGroup) string).add(client);

Test 44: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) mockInetSocketAddress, (IoServiceListenerSupport) ioHandlerAdapter, (SocketAddress) vmPipe, (IoHandler) vmPipeAcceptor, (VmPipe) 1);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();


* Generated after the refinement and before minimization 45 tests with total length 255
* test suite isTestSuite: 45
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent((Client) null, iterator);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Iterator<Client> iterator = createSubGroup.iterator();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, (Object) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.common.network.MessageMultiplexer", e);
}

Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, createSubGroup);
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived((Client) null, object);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // Method called with the following arguments: null (node), java.lang.Object@4f8cbfe7 (message).
   //
}

Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove(client);
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((String) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);
Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.parentGroup();
Test 21: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();
Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) null, (IoServiceListenerSupport) null, mockInetSocketAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();
Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "New Client Group");

Test 24: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Parent Group");
ClientGroup clientGroup = new ClientGroup(clientGroup);

Test 25: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.add((Client) "Alice");
String string = "Alice";
clientGroup.notifyMessageSent((Client) string, iterator);

Test 26: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent(iterator, (Object) null);

Test 27: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
Iterator<Client> iterator = null;
((ClientGroup) string).notifyMessageSent(client, iterator);

Test 28: 
String string = "Group A";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group A");
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Hello World!";
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageSent((Client) string, clientGroup);

Test 29: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "John Doe";
((ClientGroup) string).add((Client) string);
String string = "John Doe";
String string = "Hello World!";
((ClientGroup) string).notifyMessageSent((Client) string, string);

Test 30: 
String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "group1");
String string = "New order received from customer XYZ.";
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageReceived((Client) string, clientGroup);

Test 31: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
ClientGroup clientGroup = null;
((ClientGroup) string).notifyMessageReceived((Client) clientGroup, clientGroup);

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) createSubGroup, (Object) null);

Test 33: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageReceived((Client) object, (Object) null);

Test 34: 
String string = "MyGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "MyGroup");
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);

Test 35: 
String string = "Example Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Example Group");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught(client, mockThrowable);

Test 36: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);

Test 37: 
String string = "gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "gold");
Client client = null;
((ClientGroup) string).contains(client);

Test 38: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);

Test 39: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).remove(client);

Test 40: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);

Test 41: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Exception message";
MockThrowable mockThrowable = new MockThrowable(string);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);
Client client = null;
((ClientGroup) string).add(client);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);

Test 42: 
String string = "Gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Gold");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).contains(client);

Test 43: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
Client client = null;
((ClientGroup) string).add(client);

Test 44: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) mockInetSocketAddress, (IoServiceListenerSupport) ioHandlerAdapter, (SocketAddress) vmPipe, (IoHandler) vmPipeAcceptor, (VmPipe) 1);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
clientGroup.notifyMessageSent((Client) null, iterator);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Iterator<Client> iterator = createSubGroup.iterator();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, iterator);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(alwaysFailMessageHandler);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, (Object) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.common.network.MessageMultiplexer", e);
}

Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, clientGroup);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageReceived((Client) null, createSubGroup);
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived((Client) null, object);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // Method called with the following arguments: null (node), java.lang.Object@5c60ba0 (message).
   //
}

Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable("192.168.1.42");
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((String) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(stateMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.add(client);
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);
Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.parentGroup();
Test 21: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();
Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockInetSocketAddress mockInetSocketAddress = new MockInetSocketAddress(18);
VmPipeAcceptor vmPipeAcceptor = new VmPipeAcceptor();
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
VmPipeAddress vmPipeAddress = new VmPipeAddress(1);
VmPipe vmPipe = new VmPipe(vmPipeAcceptor, vmPipeAddress, ioHandlerAdapter, (IoServiceConfig) null, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(vmPipeAcceptor, (IoServiceConfig) null, (IoServiceListenerSupport) null, mockInetSocketAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.add(client);
clientGroup.size();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 66
* Number of covered goals: 66
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 25
* Number of covered goals: 19
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 97%
* Total number of goals: 66
* Number of covered goals: 64
* Generated 23 tests with total length 111
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 50%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
int size = clientGroup.size();
assertEquals(0, size);


** It was a parseable test case! 
refined test name is: testSizeOfEmptyClientGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup parentGroup = clientGroup.parentGroup();
assertNull(parentGroup);


** It was a parseable test case! 
refined test name is: testParentGroupWithNullInputReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Iterator<Client> arg1 = clientGroup.iterator();
clientGroup.add((Client) null);
boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentWithClientAddedToSubgroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> arg1 = clientGroup.iterator();
boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1);
assertFalse(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Iterator<Client> arg1 = createSubGroup.iterator();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1);
assertEquals(1, createSubGroup.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentWithClientInBothGroups
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
createSubGroup.add((Client) null);
boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, (Object) null);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testClientGroupNotifyMessageSentWithSubGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg1 = new ClientGroup((ClientGroup) null);
boolean notifyMessageReceived = arg1.notifyMessageReceived((Client) null, arg1);
assertFalse(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testNotifyMessageReceivedClientIsNotMemberOfGroup
* Compiling Tests
refined test name is: testNotifyMessageReceivedNonMemberClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg1 = new ClientGroup((ClientGroup) null);
arg1.createSubGroup();
arg1.add((Client) null);
boolean notifyMessageReceived = arg1.notifyMessageReceived((Client) null, arg1);
assertEquals(1, arg1.size());
assertTrue(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testCreateSubGroupAndNotifyMessageReceived
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup arg1 = clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.createSubGroup();
arg1.add((Client) null);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testNotifyMessageReceivedValidArgumentsReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable arg1 = new MockThrowable("192.168.1.42");
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1);
assertFalse(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testNotifyExceptionCaughtWithNullClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable arg1 = new MockThrowable((String) null);
clientGroup.notifyExceptionCaught((Client) null, arg1);
createSubGroup.add((Client) null);
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testAddSubGroupAndNotifyException
* Compiling Tests
refined test name is: testClientGroupCreationAndNotificationOfException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.add((Client) null);
MockThrowable arg1 = new MockThrowable();
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testNotifyExceptionCaughtnonNullClientAndThrowable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
boolean contains = clientGroup.contains((Client) null);
assertFalse(contains);


** It was a parseable test case! 
refined test name is: testContainsNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
assertEquals(1, clientGroup.size());

boolean remove = clientGroup.remove((Client) null);
assertTrue(remove);


** It was a parseable test case! 
refined test name is: testRemoveClientFromGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
boolean contains = clientGroup.contains((Client) null);
assertEquals(1, clientGroup.size());
assertTrue(contains);


** It was a parseable test case! 
refined test name is: testContainsClient
* Compiling Tests
refined test name is: testClientGroupContains
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
createSubGroup.parentGroup();
assertEquals(1, clientGroup.size());
assertNotSame(clientGroup, createSubGroup);


** It was a parseable test case! 
refined test name is: testCreateSubGroupCreatesNewClientGroupAsSubGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg0 = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(arg0);
ClientGroup parentGroup = clientGroup.parentGroup();
assertSame(parentGroup, arg0);


** It was a parseable test case! 
refined test name is: testParentGroupReturnsSameObjectAsArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:55.732 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:55.791 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:55.884 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:55.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 20:25:56.003 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
* Compiling Tests
[MASTER] 20:25:56.136 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.137 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:56.258 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.260 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:56.361 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.362 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:25:56.444 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:56.536 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:56.615 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.616 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:56.725 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.726 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:25:56.885 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.886 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:56.995 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:56.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:57.081 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:57.082 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:57.200 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:57.201 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:25:57.324 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:57.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:57.438 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:57.439 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:25:57.600 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:57.601 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 14 called: 2 to improve: false
[MASTER] 20:25:58.935 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:25:58.936 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 6 called: 1 to improve: false
** Write a test suite: 10 called: 2 to improve: false
[MASTER] 20:26:02.043 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar6537843208130664945.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:26:02.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6537843208130664945.jar
[MASTER] 20:26:04.343 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 20:26:07.042 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
