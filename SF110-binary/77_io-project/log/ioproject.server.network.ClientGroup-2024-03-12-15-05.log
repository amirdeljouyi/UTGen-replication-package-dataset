* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ioproject.server.network.ClientGroup
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/77_io-project/evosuite-files/evosuite.properties
* Connecting to master process on port 15812
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 15:05:30.222 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 15:05:30.726 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 15:05:30.727 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 15:05:30.885 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class ioproject.server.network.ClientGroup
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 222
* Using seed 1710255928291
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 83 / 222
[Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:====================>              58%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:============================>      80%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:==============>               48%] [Cov:==============================>    88%][Progress:==============>               49%] [Cov:==============================>    88%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   90%][Progress:=================>            59%] [Cov:===============================>   90%][Progress:=================>            59%] [Cov:===============================>   90%][Progress:==================>           60%] [Cov:===============================>   90%][Progress:==================>           60%] [Cov:===============================>   90%][MASTER] 15:06:31.713 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.evosuite.runtime.mock.java.lang.MockThread due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.evosuite.runtime.mock.java.lang.MockThread due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.evosuite.runtime.mock.java.lang.MockThread due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.evosuite.runtime.mock.java.lang.MockThread due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.evosuite.runtime.mock.java.lang.MockThread due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[Progress:==================>           60%] [Cov:===============================>   90%][Progress:==================>           60%] [Cov:===============================>   90%][Progress:====================>         68%] [Cov:===============================>   90%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%]
* Search finished after 101s and 36 generations, 20669 statements, best individual has fitness: 18.0
* Generated before the refinement 23 tests with total length 104
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClientGroup clientGroup = new ClientGroup("MyClientGroup");
        clientGroup.add(new Client("John Doe", 30, "johndoe@example.com"));
        clientGroup.add(new Client("Jane Smith", 25, "janesmith@example.com"));
        clientGroup.add(new Client("Bob Johnson", 40, "bobjohnson@example.com"));
        // Assertions
        assertEquals(3, clientGroup.size());
        assertTrue(clientGroup.containsClient("John Doe"));
        assertFalse(clientGroup.containsClient("Jim Brown"));
    }
}
statement is: // Improved test data
ClientGroup clientGroup = new ClientGroup("MyClientGroup"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John Doe", 30, "johndoe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe", 30, "johndoe@example.com")) target is: clientGroup method is: add(Client)
statement is: clientGroup.add(new Client("Jane Smith", 25, "janesmith@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Jane Smith", 25, "janesmith@example.com")) target is: clientGroup method is: add(Client)
statement is: clientGroup.add(new Client("Bob Johnson", 40, "bobjohnson@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Bob Johnson", 40, "bobjohnson@example.com")) target is: clientGroup method is: add(Client)
statement is: // Assertions
assertEquals(3, clientGroup.size()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assertions
assertEquals(3, clientGroup.size()) target is:  method is: assertEquals(int,<unknown>)
statement is: assertTrue(clientGroup.containsClient("John Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(clientGroup.containsClient("John Doe")) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(clientGroup.containsClient("Jim Brown")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(clientGroup.containsClient("Jim Brown")) target is:  method is: assertFalse(<unknown>)
TestCase is: String string = "MyClientGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the ClientGroup class
        // Create a parent group with 2 child groups
        ClientGroup parentGroup = new ClientGroup("Parent Group");
        ClientGroup childGroup1 = new ClientGroup("Child Group 1");
        ClientGroup childGroup2 = new ClientGroup("Child Group 2");
        parentGroup.addSubGroup(childGroup1);
        parentGroup.addSubGroup(childGroup2);
        // Create a client with a parent group association
        Client client = new Client("John Doe", parentGroup);
    }
}
statement is: // Improved test data for the ClientGroup class
// Create a parent group with 2 child groups
ClientGroup parentGroup = new ClientGroup("Parent Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup childGroup1 = new ClientGroup("Child Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup childGroup2 = new ClientGroup("Child Group 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parentGroup.addSubGroup(childGroup1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parentGroup.addSubGroup(childGroup1) target is: parentGroup method is: addSubGroup(ClientGroup)
statement is: parentGroup.addSubGroup(childGroup2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parentGroup.addSubGroup(childGroup2) target is: parentGroup method is: addSubGroup(ClientGroup)
statement is: // Create a client with a parent group association
Client client = new Client("John Doe", parentGroup), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Parent Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "Child Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "Child Group 2";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageSent(client, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        clientGroup.createSubGroup();
        Client client = new Client("John Doe");
        clientGroup.add(client);
        clientGroup.notifyMessageSent(client, "Hello World!");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageSent(client, "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(client, "Hello World!") target is: clientGroup method is: notifyMessageSent(Client,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
String string = "John Doe";
Client client = new Client((IoSession) string);
clientGroup.add(client);
String string = "Hello World!";
clientGroup.notifyMessageSent(client, string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageSent(client, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("online");
        Client client = new Client("1234567890", "John Doe", 18, Gender.MALE);
        clientGroup.notifyMessageSent(client, "Hello World!");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("online"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("1234567890", "John Doe", 18, Gender.MALE), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageSent(client, "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(client, "Hello World!") target is: clientGroup method is: notifyMessageSent(Client,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "online";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "Hello World!";
Delayed delayed = null;
((ClientGroup) string).notifyMessageSent((Client) string, delayed);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new String[]{ "group1", "group2" });
        clientGroup.add(new String[]{ "client1", "client2" });
        Object object = new Object();
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.add(new String[]{ "subgroup1", "subgroup2" });
        clientGroup.notifyMessageSent("client1", object);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new String[]{ "group1", "group2" }), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new String[]{ "client1", "client2" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new String[]{ "client1", "client2" }) target is: clientGroup method is: add(java.lang.String[])
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.add(new String[]{ "subgroup1", "subgroup2" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new String[]{ "subgroup1", "subgroup2" }) target is: createSubGroup method is: add(java.lang.String[])
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 3, type ioproject.server.network.ClientGroupindex is: 4
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.notifyMessageSent("client1", object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent("client1", object) target is: clientGroup method is: notifyMessageSent(java.lang.String,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = null;
clientGroup.add(client);
Object object = new Object();
clientGroup.createSubGroup();
Client client = null;
clientGroup.add(client);
String string = "client1";
clientGroup.notifyMessageSent((Client) string, object);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageSent((Client) null, object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("group1");
        clientGroup.add("client1");
        Object object = new Object();
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(new MyMessageHandler(), new MyClientHandler());
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.notifyMessageSent("client1", object);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("group1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add("client1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add("client1") target is: clientGroup method is: add(java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(new MyMessageHandler(), new MyClientHandler()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.notifyMessageSent("client1", object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent("client1", object) target is: clientGroup method is: notifyMessageSent(java.lang.String,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "client1";
((ClientGroup) string).add((Client) string);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "client1";
((ClientGroup) string).notifyMessageSent((Client) string, object);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg1, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageReceived(client, client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Test Group");
        Client client = new Client("John Doe", "johndoe@example.com", 123456789);
        clientGroup.notifyMessageReceived(client, client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Test Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("John Doe", "johndoe@example.com", 123456789), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageReceived(client, client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, client) target is: clientGroup method is: notifyMessageReceived(Client,Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
Client client = null;
((ClientGroup) string).notifyMessageReceived(client, client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg1, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClientGroup clientGroup = new ClientGroup("Test Group");
        clientGroup.createSubGroup();
        Client client = new Client("John Doe");
        clientGroup.add(client);
        clientGroup.notifyMessageReceived(client, "Hello World!");
    }
}
statement is: // Improved test data
ClientGroup clientGroup = new ClientGroup("Test Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageReceived(client, "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, "Hello World!") target is: clientGroup method is: notifyMessageReceived(Client,java.lang.String)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
String string = "John Doe";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);
String string = "Hello World!";
((ClientGroup) string).notifyMessageReceived(client, string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: TimeUnit timeUnit = TimeUnit.DAYS type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class java.util.concurrent.TimeUnit
statement code is: TimeUnit timeUnit = TimeUnit.DAYS
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
TimeUnit timeUnit = TimeUnit.DAYS;
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, timeUnit);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        Client client = new Client("Jane Doe");
        clientGroup.add(client);
        TimeUnit timeUnit = TimeUnit.DAYS;
        createSubGroup.add(client);
        clientGroup.notifyMessageReceived(client, timeUnit);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("Jane Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: TimeUnit timeUnit = TimeUnit.DAYS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: TimeUnit.DAYS is TimeUnit
statement is: createSubGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(client) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
statement is: clientGroup.notifyMessageReceived(client, timeUnit), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(client, timeUnit) target is: clientGroup method is: notifyMessageReceived(Client,TimeUnit)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
String string = "Jane Doe";
Client client = new Client((IoSession) string);
clientGroup.add(client);
clientGroup.add(client);
TimeUnit timeUnit = null;
clientGroup.notifyMessageReceived(client, timeUnit);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThread()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThread
statement code is: MockThread mockThread = new MockThread()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThread mockThread = new MockThread();
clientGroup.add((Client) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageReceived((Client) null, mockThread);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new ClientGroup(null));
        MockThread mockThread = new MockThread();
        clientGroup.add(new Client("John", "1234567890"));
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.notifyMessageReceived(new Client("Jane", "9876543210"), mockThread);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new ClientGroup(null)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThread mockThread = new MockThread(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John", "1234567890")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John", "1234567890")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.notifyMessageReceived(new Client("Jane", "9876543210"), mockThread), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(new Client("Jane", "9876543210"), mockThread) target is: clientGroup method is: notifyMessageReceived(Client,MockThread)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
MockThread mockThread = new MockThread();
Client client = null;
clientGroup.add(client);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
MockThread mockThread = null;
clientGroup.notifyMessageReceived((Client) mockThread, mockThread);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught(arg0, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        Client client = new Client("John Doe");
        MockThrowable mockThrowable = new MockThrowable();
        clientGroup.notifyExceptionCaught(client, mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThrowable mockThrowable = new MockThrowable(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(client, mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(client, mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
String string = "John Doe";
Client client = new Client((IoSession) string);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught(arg0, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        clientGroup.createSubGroup();
        Client client = new Client("John Doe", 35, "johndoe@example.com");
        clientGroup.add(client);
        MockThrowable mockThrowable = new MockThrowable("Connection lost", new IOException());
        clientGroup.notifyExceptionCaught(client, mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("John Doe", 35, "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable("Connection lost", new IOException()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(client, mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(client, mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = null;
clientGroup.add(client);
Client client = null;
MockThrowable mockThrowable = null;
clientGroup.notifyExceptionCaught(client, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Test Group");
        clientGroup.add(new Client("John Doe", 35));
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.add(new Client("Jane Doe", 28));
        MockThrowable mockThrowable = new MockThrowable("Test Exception");
        clientGroup.notifyExceptionCaught(new Client("Bob Smith", 42), mockThrowable);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Test Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John Doe", 35)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe", 35)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.add(new Client("Jane Doe", 28)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("Jane Doe", 28)) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 2, type ioproject.server.network.ClientGroupindex is: 4
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable("Test Exception"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(new Client("Bob Smith", 42), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(new Client("Bob Smith", 42), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught(client, mockThrowable);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.add(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Test Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        Client client = new Client("John Doe", "johndoe@example.com");
        createSubGroup.add(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Test Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("John Doe", "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: createSubGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(client) target is: createSubGroup method is: add(Client)
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
clientGroup.add(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Test Group");
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.add(new Client("Test Client"));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Test Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.add(new Client("Test Client")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Test Client")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
((ClientGroup) string).add(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        clientGroup.createSubGroup();
        Client client = new Client("John Doe", 35, "johndoe@example.com");
        clientGroup.add(client);
        clientGroup.remove(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: Client client = new Client("John Doe", 35, "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = null;
clientGroup.add(client);
Client client = null;
clientGroup.remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null)));
        Client client = new Client("127.0.0.1", 8080, "username", "password");
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.remove(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(((ClientGroup) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("127.0.0.1", 8080, "username", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
clientGroup.remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 25));
        clientGroup.contains(new Client("Jane Smith", 30));
    }
}
statement is: // Improved test data
ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 25)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.contains(new Client("Jane Smith", 30)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(new Client("Jane Smith", 30)) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = null;
clientGroup.contains(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.contains(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Client Group 1");
        Client client1 = new Client("John Doe", "johndoe@email.com", "555-555-5555");
        Client client2 = new Client("Jane Smith", "janesmith@email.com", "555-666-7777");
        clientGroup.add(client1);
        clientGroup.add(client2);
        assertTrue(clientGroup.contains(client1));
        assertTrue(clientGroup.contains(client2));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Client Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client1 = new Client("John Doe", "johndoe@email.com", "555-555-5555"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client2 = new Client("Jane Smith", "janesmith@email.com", "555-666-7777"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(client1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client1) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.add(client2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client2) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: assertTrue(clientGroup.contains(client1)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(clientGroup.contains(client1)) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(clientGroup.contains(client2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(clientGroup.contains(client2)) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "Client Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Finance", "2019-01-01", 5);
        clientGroup.iterator();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Finance", "2019-01-01", 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.iterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.iterator() target is: clientGroup method is: iterator()
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add(arg0)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet above
        // Create a mock IoSession object to use as the "session" parameter in the Client constructor
        IoSession session = EasyMock.createNiceMock(IoSession.class);
        EasyMock.expect(session.getRemoteAddress()).andReturn(new InetSocketAddress("localhost", 8080)).anyTimes();
        EasyMock.replay(session);
        // Create a mock ClientGroup object to use as the "parent" parameter in the createSubGroup method
        ClientGroup parent = EasyMock.createNiceMock(ClientGroup.class);
        EasyMock.expect(parent.getParent()).andReturn(null).anyTimes();
        EasyMock.replay(parent);
        // Create a mock Client object to use as the "client" parameter in the add method
        Client client = EasyMock.createNiceMock(Client.class);
        EasyMock.expect(client.getSession()).andReturn(session).anyTimes();
        EasyMock.replay(client);
        // Create a mock ClientGroup object to use as the "parent" parameter in the parentGroup method
        ClientGroup child = EasyMock.createNiceMock(ClientGroup.class);
        EasyMock.expect(child.getParent()).andReturn(parent).anyTimes();
        EasyMock.replay(child);
        // Use the mock objects to test the code snippet
        ClientGroup clientGroup = new ClientGroup(null);
        ClientGroup createSubGroup = clientGroup.createSubGroup(parent);
        clientGroup.add(client);
        createSubGroup.parentGroup(child);
    }
}
statement is: // Improved test data for the code snippet above
// Create a mock IoSession object to use as the "session" parameter in the Client constructor
IoSession session = EasyMock.createNiceMock(IoSession.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.createNiceMock(IoSession.class) target is: EasyMock method is: createNiceMock(java.lang.Class)
statement is: EasyMock.expect(session.getRemoteAddress()).andReturn(new InetSocketAddress("localhost", 8080)).anyTimes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.expect(session.getRemoteAddress()).andReturn(new InetSocketAddress("localhost", 8080)).anyTimes() target is: EasyMock.expect(session.getRemoteAddress()).andReturn(new InetSocketAddress("localhost", 8080)) method is: anyTimes()
statement is: EasyMock.replay(session), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.replay(session) target is: EasyMock method is: replay(IoSession)
statement is: // Create a mock ClientGroup object to use as the "parent" parameter in the createSubGroup method
ClientGroup parent = EasyMock.createNiceMock(ClientGroup.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.createNiceMock(ClientGroup.class) target is: EasyMock method is: createNiceMock(java.lang.Class)
statement is: EasyMock.expect(parent.getParent()).andReturn(null).anyTimes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.expect(parent.getParent()).andReturn(null).anyTimes() target is: EasyMock.expect(parent.getParent()).andReturn(null) method is: anyTimes()
statement is: EasyMock.replay(parent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.replay(parent) target is: EasyMock method is: replay(ClientGroup)
statement is: // Create a mock Client object to use as the "client" parameter in the add method
Client client = EasyMock.createNiceMock(Client.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.createNiceMock(Client.class) target is: EasyMock method is: createNiceMock(java.lang.Class)
statement is: EasyMock.expect(client.getSession()).andReturn(session).anyTimes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.expect(client.getSession()).andReturn(session).anyTimes() target is: EasyMock.expect(client.getSession()).andReturn(session) method is: anyTimes()
statement is: EasyMock.replay(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.replay(client) target is: EasyMock method is: replay(Client)
statement is: // Create a mock ClientGroup object to use as the "parent" parameter in the parentGroup method
ClientGroup child = EasyMock.createNiceMock(ClientGroup.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.createNiceMock(ClientGroup.class) target is: EasyMock method is: createNiceMock(java.lang.Class)
statement is: EasyMock.expect(child.getParent()).andReturn(parent).anyTimes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.expect(child.getParent()).andReturn(parent).anyTimes() target is: EasyMock.expect(child.getParent()).andReturn(parent) method is: anyTimes()
statement is: EasyMock.replay(child), class spoon.support.reflect.code.CtInvocationImpl
invocation is: EasyMock.replay(child) target is: EasyMock method is: replay(ClientGroup)
statement is: // Use the mock objects to test the code snippet
ClientGroup clientGroup = new ClientGroup(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(parent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup(parent) target is: clientGroup method is: createSubGroup(ClientGroup)
statement is: clientGroup.add(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(client) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: createSubGroup.parentGroup(child), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.parentGroup(child) target is: createSubGroup method is: parentGroup(ClientGroup)
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = null;
clientGroup.add(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Marketing Department");
        ClientGroup createSubGroup = clientGroup.createSubGroup("Sales Sub-Group");
        createSubGroup.parentGroup().equals("Marketing Department");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Marketing Department"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup("Sales Sub-Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup("Sales Sub-Group") target is: clientGroup method is: createSubGroup(java.lang.String)
statement is: createSubGroup.parentGroup().equals("Marketing Department"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.parentGroup().equals("Marketing Department") target is: createSubGroup.parentGroup() method is: equals(java.lang.String)
TestCase is: String string = "Marketing Department";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 32));
        clientGroup.add(new Client("Jane Smith", 28));
        clientGroup.size();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 32)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("Jane Smith", 28)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Jane Smith", 28)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.size(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.size() target is: clientGroup method is: size()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: size()I
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = null;
clientGroup.add(client);
clientGroup.size();

* test suite isTestSuite: 45
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageSent(client, (Object) null);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageSent(client, (Object) null);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, object);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, object);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.server.network.ClientToMessageHandlerAdapter", e);
}

Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageReceived(client, client);
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, client);
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
TimeUnit timeUnit = TimeUnit.DAYS;
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, timeUnit);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThread mockThread = new MockThread();
clientGroup.add((Client) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived((Client) null, mockThread);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // Method called with the following arguments: null (node), Thread[MockThread-0,5,Test_Execution_Group] (message).
   //
}

Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.add(client);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove(client);
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.contains(client);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();
Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();
Test 21: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();
Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();
Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "MyClientGroup");

Test 24: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Parent Group");
String string = "Child Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "Child Group 2";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

Test 25: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) "John Doe");
clientGroup.add(client);
String string = "Hello World!";
clientGroup.notifyMessageSent(client, string);

Test 26: 
String string = "online";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "online");
String string = "Hello World!";
Delayed delayed = null;
((ClientGroup) string).notifyMessageSent((Client) string, delayed);

Test 27: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) "client1", object);

Test 28: 
String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "group1");
String string = "client1";
((ClientGroup) string).add((Client) string);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "client1";
((ClientGroup) string).notifyMessageSent((Client) string, object);

Test 29: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
Client client = null;
Client client = null;
((ClientGroup) string).notifyMessageReceived(client, client);

Test 30: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
((ClientGroup) string).createSubGroup();
String string = "John Doe";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);
String string = "Hello World!";
((ClientGroup) string).notifyMessageReceived(client, string);

Test 31: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) "Jane Doe");
clientGroup.add(client);
clientGroup.add(client);
TimeUnit timeUnit = null;
clientGroup.notifyMessageReceived(client, timeUnit);

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
MockThread mockThread = new MockThread();
clientGroup.add((Client) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageReceived((Client) mockThread, (Object) null);

Test 33: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) "John Doe");
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);

Test 34: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);

Test 35: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught(client, mockThrowable);

Test 36: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
((ClientGroup) string).createSubGroup();
Client client = null;
clientGroup.add(client);

Test 37: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
((ClientGroup) string).add(client);

Test 38: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.remove((Client) null);

Test 39: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);

Test 40: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);

Test 41: 
String string = "Client Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Client Group 1");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);

Test 42: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);

Test 43: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Marketing Department");

Test 44: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();


* Generated after the refinement and before minimization 45 tests with total length 220
* test suite isTestSuite: 45
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageSent(client, (Object) null);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageSent(client, (Object) null);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, object);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, object);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.server.network.ClientToMessageHandlerAdapter", e);
}

Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageReceived(client, client);
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, client);
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
TimeUnit timeUnit = TimeUnit.DAYS;
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, timeUnit);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThread mockThread = new MockThread();
clientGroup.add((Client) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived((Client) null, mockThread);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // Method called with the following arguments: null (node), Thread[MockThread-0,5,Test_Execution_Group] (message).
   //
}

Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.add(client);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.remove(client);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove(client);
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.contains(client);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();
Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();
Test 21: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();
Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();
Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "MyClientGroup");

Test 24: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Parent Group");
String string = "Child Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "Child Group 2";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

Test 25: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) "John Doe");
clientGroup.add(client);
String string = "Hello World!";
clientGroup.notifyMessageSent(client, string);

Test 26: 
String string = "online";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "online");
String string = "Hello World!";
Delayed delayed = null;
((ClientGroup) string).notifyMessageSent((Client) string, delayed);

Test 27: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) "client1", object);

Test 28: 
String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "group1");
String string = "client1";
((ClientGroup) string).add((Client) string);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
String string = "client1";
((ClientGroup) string).notifyMessageSent((Client) string, object);

Test 29: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
Client client = null;
Client client = null;
((ClientGroup) string).notifyMessageReceived(client, client);

Test 30: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
((ClientGroup) string).createSubGroup();
String string = "John Doe";
Client client = new Client((IoSession) string);
((ClientGroup) string).add(client);
String string = "Hello World!";
((ClientGroup) string).notifyMessageReceived(client, string);

Test 31: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) "Jane Doe");
clientGroup.add(client);
clientGroup.add(client);
TimeUnit timeUnit = null;
clientGroup.notifyMessageReceived(client, timeUnit);

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
MockThread mockThread = new MockThread();
clientGroup.add((Client) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.notifyMessageReceived((Client) mockThread, (Object) null);

Test 33: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) "John Doe");
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught(client, mockThrowable);

Test 34: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);

Test 35: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught(client, mockThrowable);

Test 36: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
((ClientGroup) string).createSubGroup();
Client client = null;
clientGroup.add(client);

Test 37: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
((ClientGroup) string).add(client);

Test 38: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.remove((Client) null);

Test 39: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);

Test 40: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);

Test 41: 
String string = "Client Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Client Group 1");
Client client = null;
((ClientGroup) string).add(client);
Client client = null;
((ClientGroup) string).add(client);

Test 42: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);

Test 43: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Marketing Department");

Test 44: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageSent(client, (Object) null);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageSent(client, (Object) null);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, object);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object object = new Object();
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, object);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.server.network.ClientToMessageHandlerAdapter", e);
}

Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.notifyMessageReceived(client, client);
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.notifyMessageReceived(client, client);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
TimeUnit timeUnit = TimeUnit.DAYS;
createSubGroup.add(client);
clientGroup.notifyMessageReceived(client, timeUnit);
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThread mockThread = new MockThread();
clientGroup.add((Client) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageReceived((Client) null, mockThread);
  fail("Expecting exception: AssertionError");

} catch(AssertionError e) {
   //
   // Method called with the following arguments: null (node), Thread[MockThread-0,5,Test_Execution_Group] (message).
   //
}

Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.contains((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
createSubGroup.add(client);
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
clientGroup.remove((Client) null);
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.remove((Client) null);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.add(client);
clientGroup.contains(client);
Test 20: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client client = new Client((IoSession) null);
clientGroup.add(client);
createSubGroup.parentGroup();
Test 21: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();
Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 66
* Number of covered goals: 62
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 53
* Number of covered goals: 52
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 25
* Number of covered goals: 19
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 66
* Number of covered goals: 59
* Generated 23 tests with total length 98
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 49%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
int size = clientGroup.size();
assertEquals(0, size);


** It was a parseable test case! 
refined test name is: testGetSizeOfEmptyClientGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup parentGroup = clientGroup.parentGroup();
assertNull(parentGroup);


** It was a parseable test case! 
refined test name is: testGetParentGroupWithNullParent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, (Object) null);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentWithValidClientAndMessage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
assertNotNull(iterator);


** It was a parseable test case! 
refined test name is: testIteratorIsNotNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
boolean notifyMessageSent = clientGroup.notifyMessageSent(arg0, (Object) null);
assertFalse(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentClientNotPartOfTheGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object arg1 = new Object();
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentClientAddedToGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
Object arg1 = new Object();
ClientToMessageHandlerAdapter arg0 = new ClientToMessageHandlerAdapter((MessageHandler) null, (ClientHandler) null);
clientGroup.addClientHandler(arg0);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("ioproject.server.network.ClientToMessageHandlerAdapter", e);
}


** It was a parseable test case! 
refined test name is: testNotifyMessageSentThrowsNullPointerException
* Compiling Tests
refined test name is: testNotifyMessageSentWithNullClientAndArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg1 = new Client((IoSession) null);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg1, arg1);
assertFalse(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testNotifyMessageReceivedNullClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
Client arg1 = new Client((IoSession) null);
clientGroup.add(arg1);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg1, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testClientGroupAdd
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
TimeUnit arg1 = TimeUnit.DAYS;
createSubGroup.add(arg0);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived(arg0, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testNotifyMessageReceived
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);
assertFalse(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testNotifyExceptionCaughtWithNullThrowable
* Compiling Tests
refined test name is: testNotifyExceptionCaughtWithNullThrowable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, (Throwable) null);
assertEquals(1, clientGroup.size());
assertTrue(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testNotifyExceptionCaughtOnClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
MockThrowable arg1 = new MockThrowable();
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testCreateSubGroupAndNotifyExceptionCaught
* Compiling Tests
refined test name is: testCreateSubGroupAndNotifyExceptionCaught
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
boolean contains = clientGroup.contains((Client) null);
assertFalse(contains);


** It was a parseable test case! 
refined test name is: testContainsWithNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
boolean add = createSubGroup.add(arg0);
assertEquals(0, createSubGroup.size());
assertFalse(add);


** It was a parseable test case! 
refined test name is: testClientGroupCreationAndAddition
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
assertEquals(1, clientGroup.size());

boolean remove = clientGroup.remove((Client) null);
assertTrue(remove);


** It was a parseable test case! 
refined test name is: testCreateSubGroupAndAddClientWithNullAsParent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
boolean contains = clientGroup.contains(arg0);
assertEquals(1, clientGroup.size());
assertTrue(contains);


** It was a parseable test case! 
refined test name is: testAddClientToEmptyGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
Client arg0 = new Client((IoSession) null);
clientGroup.add(arg0);
createSubGroup.parentGroup();
assertEquals(1, clientGroup.size());


** It was a parseable test case! 
refined test name is: testClientGroupAddAndParentGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
ClientGroup parentGroup = createSubGroup.parentGroup();
assertNotNull(parentGroup);
assertSame(parentGroup, clientGroup);


** It was a parseable test case! 
refined test name is: testCreateSubGroupParentGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
int size = clientGroup.size();
assertEquals(1, size);


** It was a parseable test case! 
refined test name is: testSizeOfClientGroupWithOneClient
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.207 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.234 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.323 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
[MASTER] 15:23:28.380 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.381 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
[MASTER] 15:23:28.431 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.433 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.492 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.495 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.552 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.552 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:23:28.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.784 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.786 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.883 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.885 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:28.936 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:28.937 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:23:29.020 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.023 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.107 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.108 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:23:29.163 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.164 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.213 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.214 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.270 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.272 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.327 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 15:23:29.328 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
* Compiling Tests
[MASTER] 15:23:29.395 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.464 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.466 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.520 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.522 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:23:29.577 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.580 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
[MASTER] 15:23:29.789 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:29.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 13 called: 2 to improve: false
[MASTER] 15:23:30.064 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6803541350911539771.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:23:30.066 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6803541350911539771.jar
[MASTER] 15:23:30.821 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 15:23:33.350 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
