* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: ioproject.server.network.ClientGroup
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/77_io-project/evosuite-files/evosuite.properties
* Connecting to master process on port 2245
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:20:29.299 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:20:29.863 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:20:29.866 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:20:29.915 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class ioproject.server.network.ClientGroup
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 222
* Using seed 1709270427286
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 83 / 222
[Progress:=>                            6%] [Cov:==================>                54%][MASTER] 05:20:37.189 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was ioproject.server.network.ClientGroup.remove(Lioproject/server/network/Client;)Z: I33 Branch 29 IFEQ L226 - true
[MASTER] 05:20:37.191 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was ioproject.server.network.ClientGroup.notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z: I30 Branch 3 IFEQ L91 - true
[Progress:==>                           8%] [Cov:=======================>           67%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:======>                       23%] [Cov:===========================>       78%][Progress:=========>                    33%] [Cov:===========================>       78%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:============================>      81%][Progress:================>             54%] [Cov:============================>      81%][Progress:=================>            59%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 102s and 14 generations, 11164 statements, best individual has fitness: 27.0
* Generated before the refinement 19 tests with total length 104
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(Arrays.asList("John", "Alice", "Bob"));
        clientGroup.size();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(Arrays.asList("John", "Alice", "Bob")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.size(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.size() target is: clientGroup method is: size()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: size()I
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(100);
        clientGroup.parentGroup();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.parentGroup() target is: clientGroup method is: parentGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: parentGroup()Lioproject/server/network/ClientGroup;
TestCase is: int _int = 100;
ClientGroup clientGroup = new ClientGroup((ClientGroup) _int);
((ClientGroup) _int).parentGroup();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<ioproject.server.network.Client>
statement code is: Iterator<Client> iterator = clientGroup.iterator()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(100);
        clientGroup.iterator();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.iterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.iterator() target is: clientGroup method is: iterator()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: iterator()Ljava/util/Iterator;
TestCase is: int _int = 100;
ClientGroup clientGroup = new ClientGroup((ClientGroup) _int);
((ClientGroup) _int).iterator();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable((Throwable) null)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
statement is: java.util.concurrent.DelayQueue()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.concurrent.DelayQueue<java.util.concurrent.Delayed>
statement code is: DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.notifyMessageSent((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(Arrays.asList(new Client("Jane Doe", 25), new Client("John Smith", 30)));
        clientGroup.notifyMessageSent(new Client("Alice Brown", 45), new MockThrowable(new IOException()));
        DelayQueue<Delayed> delayQueue = new DelayQueue<>();
        delayQueue.add(new TestDelayed(10));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(Arrays.asList(new Client("Jane Doe", 25), new Client("John Smith", 30))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageSent(new Client("Alice Brown", 45), new MockThrowable(new IOException())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(new Client("Alice Brown", 45), new MockThrowable(new IOException())) target is: clientGroup method is: notifyMessageSent(Client,MockThrowable)
statement is: DelayQueue<Delayed> delayQueue = new DelayQueue<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: delayQueue.add(new TestDelayed(10)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: delayQueue.add(new TestDelayed(10)) target is: delayQueue method is: add(TestDelayed)
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: java.lang.ref.WeakReference(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.WeakReference<java.lang.Object>
statement code is: WeakReference<Object> weakReference = new WeakReference<Object>(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new ClientGroup());
        WeakReference<Object> weakReference = new WeakReference<Object>(new Object());
        clientGroup.add(new Client());
        Object object = new Object();
        clientGroup.notifyMessageSent(new Client(), new WeakReference<Client>(new Client()));
        clientGroup.notifyMessageReceived(new Client(), new Object());
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new ClientGroup()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: WeakReference<Object> weakReference = new WeakReference<Object>(new Object()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client()) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageSent(new Client(), new WeakReference<Client>(new Client())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(new Client(), new WeakReference<Client>(new Client())) target is: clientGroup method is: notifyMessageSent(Client,WeakReference)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: clientGroup.notifyMessageReceived(new Client(), new Object()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(new Client(), new Object()) target is: clientGroup method is: notifyMessageReceived(Client,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Object object = new Object();
WeakReference<Object> weakReference = new WeakReference<Object>(object);
Client client = null;
clientGroup.add(client);
Object object = new Object();
WeakReference<Object> weakReference = new WeakReference<Object>(object);
WeakReference<Object> weakReference = null;
clientGroup.notifyMessageSent(weakReference, weakReference);
Object object = new Object();
Delayed delayed = null;
clientGroup.notifyMessageReceived((Client) object, delayed);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: java.lang.ref.WeakReference(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.WeakReference<java.lang.Object>
statement code is: WeakReference<Object> weakReference = new WeakReference<Object>(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, (Object) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        ClientGroup clientGroup = new ClientGroup("Group 1");
        clientGroup.createSubGroup();
        WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
        clientGroup.add(new Client("Client 1"));
        Object object = new Object();
        clientGroup.notifyMessageSent(new Client("Client 2"), weakReference);
        clientGroup.notifyMessageReceived(new Client("Client 3"), object);
    }
}
statement is: // Improved test data for the given code snippet
ClientGroup clientGroup = new ClientGroup("Group 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("Client 1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Client 1")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyMessageSent(new Client("Client 2"), weakReference), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageSent(new Client("Client 2"), weakReference) target is: clientGroup method is: notifyMessageSent(Client,WeakReference)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: clientGroup.notifyMessageReceived(new Client("Client 3"), object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyMessageReceived(new Client("Client 3"), object) target is: clientGroup method is: notifyMessageReceived(Client,java.lang.Object)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
Object object = new Object();
WeakReference<Object> weakReference = null;
((ClientGroup) string).notifyMessageSent(weakReference, weakReference);
Delayed delayed = null;
((ClientGroup) string).notifyMessageReceived((Client) object, delayed);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: java.lang.ref.WeakReference(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.WeakReference<java.lang.Object>
statement code is: WeakReference<Object> weakReference = new WeakReference<Object>(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: ioproject.client.network.StateMultiplexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.StateMultiplexer
statement code is: StateMultiplexer stateMultiplexer = new StateMultiplexer()
statement is: ioproject.common.network.MessageMultiplexer(Lioproject/common/network/MessageHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.MessageMultiplexer
statement code is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(arg0)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: enqueue()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean enqueue = weakReference.enqueue()
statement is: notifyMessageSent(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
weakReference.enqueue();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable((Throwable) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable(arg0)
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
statement is: java.util.concurrent.DelayQueue()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.concurrent.DelayQueue<java.util.concurrent.Delayed>
statement code is: DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
createSubGroup.notifyExceptionCaught((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("parentGroup");
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        clientGroup.add(new Client("child1"));
        MockThrowable mockThrowable = new MockThrowable(new RuntimeException("test exception"));
        MockThrowable mockThrowable = new MockThrowable(mockThrowable);
        createSubGroup.notifyExceptionCaught(new Client("child2"), mockThrowable);
        DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();
        delayQueue.add(new Delayed() {
            @Override
            public long getDelay(TimeUnit unit) {
                return 10;
            }

            @Override
            public int compareTo(Delayed o) {
                return 0;
            }
        });
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("parentGroup"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(new Client("child1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("child1")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable(new RuntimeException("test exception")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThrowable mockThrowable = new MockThrowable(mockThrowable), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: createSubGroup.notifyExceptionCaught(new Client("child2"), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.notifyExceptionCaught(new Client("child2"), mockThrowable) target is: createSubGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: delayQueue.add(new Delayed() {
    @Override
    public long getDelay(TimeUnit unit) {
        return 10;
    }

    @Override
    public int compareTo(Delayed o) {
        return 0;
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: delayQueue.add(new Delayed() {
    @Override
    public long getDelay(TimeUnit unit) {
        return 10;
    }

    @Override
    public int compareTo(Delayed o) {
        return 0;
    }
}) target is: delayQueue method is: add(DummyClass$1)
TestCase is: String string = "parentGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
MockThrowable mockThrowable = null;
clientGroup.notifyExceptionCaught((Client) mockThrowable, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable()
statement is: org.evosuite.runtime.mock.java.lang.MockThrowable(Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.lang.MockThrowable
statement code is: MockThrowable mockThrowable = new MockThrowable(arg0)
statement is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1)
statement is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, "")
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.notifyMessageReceived((Client) null, "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Example Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        clientGroup.add(new Client("John Doe"));
        MockThrowable mockThrowable = new MockThrowable("Exception message");
        MockThrowable mockThrowable = new MockThrowable(mockThrowable);
        clientGroup.notifyExceptionCaught(new Client("Jane Smith"), mockThrowable);
        createSubGroup.notifyMessageReceived(new Client("Bob Brown"), "Hello, World!");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Example Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.add(new Client("John Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockThrowable mockThrowable = new MockThrowable("Exception message"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockThrowable mockThrowable = new MockThrowable(mockThrowable), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.notifyExceptionCaught(new Client("Jane Smith"), mockThrowable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.notifyExceptionCaught(new Client("Jane Smith"), mockThrowable) target is: clientGroup method is: notifyExceptionCaught(Client,MockThrowable)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: notifyExceptionCaught(Lioproject/server/network/Client;Ljava/lang/Throwable;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: createSubGroup.notifyMessageReceived(new Client("Bob Brown"), "Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.notifyMessageReceived(new Client("Bob Brown"), "Hello, World!") target is: createSubGroup method is: notifyMessageReceived(Client,java.lang.String)
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: notifyMessageReceived(Lioproject/server/network/Client;Ljava/lang/Object;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Example Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Exception message";
MockThrowable mockThrowable = new MockThrowable((Throwable) string);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);
String string = "Hello, World!";
String string = null;
clientGroup.notifyMessageReceived((Client) string, string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Main Group");
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.add(new Client("John Doe"));
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Main Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.add(new Client("John Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("John Doe")) target is: createSubGroup method is: add(Client)
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 1, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
TestCase is: String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
((ClientGroup) string).createSubGroup();
Client client = null;
clientGroup.add(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: java.lang.ref.WeakReference(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.WeakReference<java.lang.Object>
statement code is: WeakReference<Object> weakReference = new WeakReference<Object>(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Group A");
        WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
        clientGroup.add(new Client("Client 1"));
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.add(new Client("Client 2"));
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Group A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("Client 1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Client 1")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.add(new Client("Client 2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.add(new Client("Client 2")) target is: createSubGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 3, type ioproject.server.network.ClientGroupindex is: 5
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
TestCase is: String string = "Group A";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: java.lang.ref.WeakReference(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.lang.ref.WeakReference<java.lang.Object>
statement code is: WeakReference<Object> weakReference = new WeakReference<Object>(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove((Client) null)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Gold");
        WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
        clientGroup.add(new Client("John Doe", 35, "johndoe@email.com"));
        clientGroup.createSubGroup();
        clientGroup.remove(new Client("Jane Smith", 28, "janesmith@email.com"));
        ClientGroup clientGroup = new ClientGroup("Silver");
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Gold"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John Doe", 35, "johndoe@email.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe", 35, "johndoe@email.com")) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.createSubGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: clientGroup.remove(new Client("Jane Smith", 28, "janesmith@email.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(new Client("Jane Smith", 28, "janesmith@email.com")) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: remove(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientGroup clientGroup = new ClientGroup("Silver"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).remove(client);
String string = "Silver";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.common.network.AlwaysFailMessageHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.AlwaysFailMessageHandler
statement code is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler()
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: org.apache.mina.transport.vmpipe.VmPipeAddress(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.VmPipeAddress
statement code is: VmPipeAddress vmPipeAddress = new VmPipeAddress(0)
statement is: org.apache.mina.common.IoHandlerAdapter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.common.IoHandlerAdapter
statement code is: IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter()
statement is: org.apache.mina.transport.socket.nio.SocketAcceptorConfig()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.socket.nio.SocketAcceptorConfig
statement code is: SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig()
statement is: org.apache.mina.transport.vmpipe.support.VmPipe(Lorg/apache/mina/transport/vmpipe/VmPipeAcceptor;Lorg/apache/mina/transport/vmpipe/VmPipeAddress;Lorg/apache/mina/common/IoHandler;Lorg/apache/mina/common/IoServiceConfig;Lorg/apache/mina/common/support/IoServiceListenerSupport;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.support.VmPipe
statement code is: VmPipe vmPipe = new VmPipe((VmPipeAcceptor) null, arg1, arg2, arg3, (IoServiceListenerSupport) null)
statement is: org.apache.mina.transport.vmpipe.support.VmPipeSessionImpl(Lorg/apache/mina/common/IoService;Lorg/apache/mina/common/IoServiceConfig;Lorg/apache/mina/common/support/IoServiceListenerSupport;Ljava/net/SocketAddress;Lorg/apache/mina/common/IoHandler;Lorg/apache/mina/transport/vmpipe/support/VmPipe;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.mina.transport.vmpipe.support.VmPipeSessionImpl
statement code is: VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) null, arg1, (IoServiceListenerSupport) null, arg3, arg4, arg5)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client(arg0)
statement is: remove(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = clientGroup.remove(arg0)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
VmPipeAddress vmPipeAddress = new VmPipeAddress(0);
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
VmPipe vmPipe = new VmPipe((VmPipeAcceptor) null, vmPipeAddress, ioHandlerAdapter, socketAcceptorConfig, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) null, socketAcceptorConfig, (IoServiceListenerSupport) null, vmPipeAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.remove(client);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new ClientGroup("Test Group"));
        AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        VmPipeAddress vmPipeAddress = new VmPipeAddress(0);
        IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
        SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
        VmPipe vmPipe = new VmPipe(((VmPipeAcceptor) (null)), vmPipeAddress, ioHandlerAdapter, socketAcceptorConfig, ((IoServiceListenerSupport) (null)));
        VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(((IoService) (null)), socketAcceptorConfig, ((IoServiceListenerSupport) (null)), vmPipeAddress, ioHandlerAdapter, vmPipe);
        Client client = new Client(vmPipeSessionImpl);
        clientGroup.remove(client);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new ClientGroup("Test Group")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: VmPipeAddress vmPipeAddress = new VmPipeAddress(0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipe vmPipe = new VmPipe(((VmPipeAcceptor) (null)), vmPipeAddress, ioHandlerAdapter, socketAcceptorConfig, ((IoServiceListenerSupport) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl(((IoService) (null)), socketAcceptorConfig, ((IoServiceListenerSupport) (null)), vmPipeAddress, ioHandlerAdapter, vmPipe), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client(vmPipeSessionImpl), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.remove(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.remove(client) target is: clientGroup method is: remove(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 2
Matched Method is: remove(Lioproject/server/network/Client;)Z
TestCase is: String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
ClientGroup clientGroup = new ClientGroup(clientGroup);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
int _int = 0;
VmPipeAddress vmPipeAddress = new VmPipeAddress(_int);
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
VmPipe vmPipe = new VmPipe((VmPipeAcceptor) vmPipeAddress, (VmPipeAddress) ioHandlerAdapter, (IoHandler) socketAcceptorConfig, (IoServiceConfig) _int, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) socketAcceptorConfig, (IoServiceConfig) vmPipeAddress, (IoServiceListenerSupport) ioHandlerAdapter, (SocketAddress) vmPipe, (IoHandler) arg4, (VmPipe) vmPipeAddress);
Client client = new Client(vmPipeSessionImpl);
((ClientGroup) string).remove(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.Client(Lorg/apache/mina/common/IoSession;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.Client
statement code is: Client client = new Client((IoSession) null)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains(arg0)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("group1");
        Client client = new Client("client1");
        clientGroup.contains(client);
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("group1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Client client = new Client("client1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.contains(client), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(client) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: contains(Lioproject/server/network/Client;)Z
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
TestCase is: String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
String string = "client1";
Client client = new Client((IoSession) string);
((ClientGroup) string).contains(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: contains(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean contains = clientGroup.contains((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 35));
        clientGroup.add(new Client("Jane Doe", 28));
        clientGroup.contains(new Client("Bob Smith", 42));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new Client("John Doe", 35)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("Jane Doe", 28)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("Jane Doe", 28)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: clientGroup.contains(new Client("Bob Smith", 42)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.contains(new Client("Bob Smith", 42)) target is: clientGroup method is: contains(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 0
Matched Method is: contains(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = null;
clientGroup.add(client);
Client client = null;
clientGroup.contains(client);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: createSubGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup createSubGroup = clientGroup.createSubGroup()
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("My Group");
        clientGroup.add(new Client("John Doe", 30));
        ClientGroup createSubGroup = clientGroup.createSubGroup();
        createSubGroup.parentGroup();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("My Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.add(new Client("John Doe", 30)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe", 30)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClientGroup createSubGroup = clientGroup.createSubGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.createSubGroup() target is: clientGroup method is: createSubGroup()
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: createSubGroup()Lioproject/server/network/ClientGroup;
statement is: createSubGroup.parentGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: createSubGroup.parentGroup() target is: createSubGroup method is: parentGroup()
source statement: createSubGroup()Lioproject/server/network/ClientGroup; callee: VariableReference: Statement 2, type ioproject.server.network.ClientGroupindex is: 4
Matched Method is: parentGroup()Lioproject/server/network/ClientGroup;
TestCase is: String string = "My Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
((ClientGroup) client).parentGroup();

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup(arg0)
statement is: parentGroup()Lioproject/server/network/ClientGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup parentGroup = clientGroup.parentGroup()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup("Parent Group");
        ClientGroup childGroup = new ClientGroup("Child Group", clientGroup);
        childGroup.parentGroup().equals(clientGroup);
    }
}
statement is: ClientGroup clientGroup = new ClientGroup("Parent Group"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientGroup childGroup = new ClientGroup("Child Group", clientGroup), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: childGroup.parentGroup().equals(clientGroup), class spoon.support.reflect.code.CtInvocationImpl
invocation is: childGroup.parentGroup().equals(clientGroup) target is: childGroup.parentGroup() method is: equals(ClientGroup)
TestCase is: String string = "Parent Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
statement is: size()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = clientGroup.size()
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(new Client("John", 25), new Client("Jane", 30), new Client("Bob", 40));
        clientGroup.size();
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(new Client("John", 25), new Client("Jane", 30), new Client("Bob", 40)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.size(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.size() target is: clientGroup method is: size()
statement is: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientGroup
statement code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null)
statement is: ioproject.client.network.StateMultiplexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.StateMultiplexer
statement code is: StateMultiplexer stateMultiplexer = new StateMultiplexer()
statement is: ioproject.common.network.MessageMultiplexer(Lioproject/common/network/MessageHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.common.network.MessageMultiplexer
statement code is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(arg0)
statement is: ioproject.client.network.ServerToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/client/network/ServerHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.client.network.ServerToMessageHandlerAdapter
statement code is: ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(arg0, arg1)
statement is: mock(interface ioproject.server.network.ClientHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface ioproject.server.network.ClientHandler
statement code is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer())
statement is: ioproject.server.network.ClientToMessageHandlerAdapter(Lioproject/common/network/MessageHandler;Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ioproject.server.network.ClientToMessageHandlerAdapter
statement code is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(arg0, arg1)
statement is: addClientHandler(Lioproject/server/network/ClientHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: clientGroup.addClientHandler(arg0)
statement is: add(Lioproject/server/network/Client;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = clientGroup.add((Client) null)
test data is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ClientGroup clientGroup = new ClientGroup(12345);
        StateMultiplexer stateMultiplexer = new StateMultiplexer();
        MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
        ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
        ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
        ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
        clientGroup.addClientHandler(clientToMessageHandlerAdapter);
        clientGroup.add(new Client("John Doe", 12345));
    }
}
statement is: ClientGroup clientGroup = new ClientGroup(12345), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StateMultiplexer stateMultiplexer = new StateMultiplexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ClientHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: ClientHandler argument is: ClientHandler.class
Matched Method is: mock(interface ioproject.server.network.ClientHandler)
statement is: ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: clientGroup.addClientHandler(clientToMessageHandlerAdapter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.addClientHandler(clientToMessageHandlerAdapter) target is: clientGroup method is: addClientHandler(ClientToMessageHandlerAdapter)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: addClientHandler(Lioproject/server/network/ClientHandler;)V
statement is: clientGroup.add(new Client("John Doe", 12345)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: clientGroup.add(new Client("John Doe", 12345)) target is: clientGroup method is: add(Client)
source statement: ioproject.server.network.ClientGroup(Lioproject/server/network/ClientGroup;)V callee: VariableReference: Statement 0, type ioproject.server.network.ClientGroupindex is: 1
Matched Method is: add(Lioproject/server/network/Client;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 12345;
ClientGroup clientGroup = new ClientGroup((ClientGroup) _int);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
((ClientGroup) _int).addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
((ClientGroup) _int).add(client);

* test suite isTestSuite: 36
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.notifyMessageSent((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
weakReference.enqueue();
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, weakReference);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
createSubGroup.notifyExceptionCaught((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.notifyMessageReceived((Client) null, "");
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
VmPipeAddress vmPipeAddress = new VmPipeAddress(0);
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
VmPipe vmPipe = new VmPipe((VmPipeAcceptor) null, vmPipeAddress, ioHandlerAdapter, socketAcceptorConfig, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) null, socketAcceptorConfig, (IoServiceListenerSupport) null, vmPipeAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.remove(client);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

Test 20: 
int _int = 100;
ClientGroup clientGroup = new ClientGroup((ClientGroup) 100);
((ClientGroup) _int).parentGroup();

Test 21: 
int _int = 100;
ClientGroup clientGroup = new ClientGroup((ClientGroup) 100);
((ClientGroup) _int).iterator();

Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Object object = new Object();
WeakReference<Object> weakReference = new WeakReference<Object>(object);
clientGroup.add((Client) null);
Object object = new Object();
WeakReference<Object> weakReference = new WeakReference<Object>(object);
clientGroup.notifyMessageSent(weakReference, (Object) null);
Object object = new Object();
Delayed delayed = null;
clientGroup.notifyMessageReceived((Client) object, delayed);

Test 24: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
((ClientGroup) string).createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
Object object = new Object();
WeakReference<Object> weakReference = null;
((ClientGroup) string).notifyMessageSent(weakReference, weakReference);
Delayed delayed = null;
((ClientGroup) string).notifyMessageReceived((Client) object, delayed);

Test 25: 
String string = "parentGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "parentGroup");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
MockThrowable mockThrowable = null;
clientGroup.notifyExceptionCaught((Client) mockThrowable, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

Test 26: 
String string = "Example Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Example Group");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Exception message";
MockThrowable mockThrowable = new MockThrowable((Throwable) string);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);
String string = "Hello, World!";
String string = null;
clientGroup.notifyMessageReceived((Client) string, string);

Test 27: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
((ClientGroup) string).createSubGroup();
Client client = null;
clientGroup.add(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

Test 28: 
String string = "Group A";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group A");
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

Test 29: 
String string = "Gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Gold");
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).remove(client);
String string = "Silver";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

Test 30: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
ClientGroup clientGroup = new ClientGroup(clientGroup);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
int _int = 0;
VmPipeAddress vmPipeAddress = new VmPipeAddress(_int);
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
VmPipe vmPipe = new VmPipe((VmPipeAcceptor) vmPipeAddress, (VmPipeAddress) ioHandlerAdapter, (IoHandler) socketAcceptorConfig, (IoServiceConfig) _int, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) socketAcceptorConfig, (IoServiceConfig) vmPipeAddress, (IoServiceListenerSupport) ioHandlerAdapter, (SocketAddress) vmPipe, (IoHandler) arg4, (VmPipe) vmPipeAddress);
Client client = new Client(vmPipeSessionImpl);
((ClientGroup) string).remove(client);

Test 31: 
String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "group1");
String string = "client1";
Client client = new Client((IoSession) string);
((ClientGroup) string).contains(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);

Test 33: 
String string = "My Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "My Group");
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
((ClientGroup) client).parentGroup();

Test 34: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Parent Group");

Test 35: 
int _int = 12345;
ClientGroup clientGroup = new ClientGroup((ClientGroup) 12345);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
((ClientGroup) _int).addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
((ClientGroup) _int).add(client);


* Generated after the refinement and before minimization 36 tests with total length 224
* test suite isTestSuite: 36
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.notifyMessageSent((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
weakReference.enqueue();
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, weakReference);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

clientGroup.addClientHandler(clientToMessageHandlerAdapter);
Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
createSubGroup.notifyExceptionCaught((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
createSubGroup.notifyMessageReceived((Client) null, "");
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
VmPipeAddress vmPipeAddress = new VmPipeAddress(0);
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
VmPipe vmPipe = new VmPipe((VmPipeAcceptor) null, vmPipeAddress, ioHandlerAdapter, socketAcceptorConfig, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) null, socketAcceptorConfig, (IoServiceListenerSupport) null, vmPipeAddress, ioHandlerAdapter, vmPipe);
Client client = new Client(vmPipeSessionImpl);
clientGroup.remove(client);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
Test 19: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();

Test 20: 
int _int = 100;
ClientGroup clientGroup = new ClientGroup((ClientGroup) 100);
((ClientGroup) _int).parentGroup();

Test 21: 
int _int = 100;
ClientGroup clientGroup = new ClientGroup((ClientGroup) 100);
((ClientGroup) _int).iterator();

Test 22: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

Test 23: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Object object = new Object();
WeakReference<Object> weakReference = new WeakReference<Object>(object);
clientGroup.add((Client) null);
Object object = new Object();
WeakReference<Object> weakReference = new WeakReference<Object>(object);
clientGroup.notifyMessageSent(weakReference, (Object) null);
Object object = new Object();
Delayed delayed = null;
clientGroup.notifyMessageReceived((Client) object, delayed);

Test 24: 
String string = "Group 1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group 1");
((ClientGroup) string).createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
Object object = new Object();
WeakReference<Object> weakReference = null;
((ClientGroup) string).notifyMessageSent(weakReference, weakReference);
Delayed delayed = null;
((ClientGroup) string).notifyMessageReceived((Client) object, delayed);

Test 25: 
String string = "parentGroup";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "parentGroup");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
MockThrowable mockThrowable = null;
clientGroup.notifyExceptionCaught((Client) mockThrowable, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

Test 26: 
String string = "Example Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Example Group");
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
String string = "Exception message";
MockThrowable mockThrowable = new MockThrowable((Throwable) string);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
MockThrowable mockThrowable = null;
((ClientGroup) string).notifyExceptionCaught((Client) mockThrowable, mockThrowable);
String string = "Hello, World!";
String string = null;
clientGroup.notifyMessageReceived((Client) string, string);

Test 27: 
String string = "Main Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Main Group");
((ClientGroup) string).createSubGroup();
Client client = null;
clientGroup.add(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

Test 28: 
String string = "Group A";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Group A");
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).add(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

Test 29: 
String string = "Gold";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Gold");
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
Client client = null;
((ClientGroup) string).remove(client);
String string = "Silver";
ClientGroup clientGroup = new ClientGroup((ClientGroup) string);

Test 30: 
String string = "Test Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Test Group");
ClientGroup clientGroup = new ClientGroup(clientGroup);
AlwaysFailMessageHandler alwaysFailMessageHandler = new AlwaysFailMessageHandler();
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(alwaysFailMessageHandler, clientHandler);
((ClientGroup) string).addClientHandler(clientToMessageHandlerAdapter);
int _int = 0;
VmPipeAddress vmPipeAddress = new VmPipeAddress(_int);
IoHandlerAdapter ioHandlerAdapter = new IoHandlerAdapter();
SocketAcceptorConfig socketAcceptorConfig = new SocketAcceptorConfig();
VmPipe vmPipe = new VmPipe((VmPipeAcceptor) vmPipeAddress, (VmPipeAddress) ioHandlerAdapter, (IoHandler) socketAcceptorConfig, (IoServiceConfig) _int, (IoServiceListenerSupport) null);
VmPipeSessionImpl vmPipeSessionImpl = new VmPipeSessionImpl((IoService) socketAcceptorConfig, (IoServiceConfig) vmPipeAddress, (IoServiceListenerSupport) ioHandlerAdapter, (SocketAddress) vmPipe, (IoHandler) arg4, (VmPipe) vmPipeAddress);
Client client = new Client(vmPipeSessionImpl);
((ClientGroup) string).remove(client);

Test 31: 
String string = "group1";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "group1");
String string = "client1";
Client client = new Client((IoSession) string);
((ClientGroup) string).contains(client);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

Test 32: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);

Test 33: 
String string = "My Group";
ClientGroup clientGroup = new ClientGroup((ClientGroup) "My Group");
Client client = null;
((ClientGroup) string).add(client);
((ClientGroup) string).createSubGroup();
((ClientGroup) client).parentGroup();

Test 34: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) "Parent Group");

Test 35: 
int _int = 12345;
ClientGroup clientGroup = new ClientGroup((ClientGroup) 12345);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
((ClientGroup) _int).addClientHandler(clientToMessageHandlerAdapter);
Client client = null;
((ClientGroup) _int).add(client);


* Minimizing test suite
* test suite isTestSuite: 19
Test 0: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.size();
Test 1: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.parentGroup();
Test 2: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ServerToMessageHandlerAdapter serverToMessageHandlerAdapter = new ServerToMessageHandlerAdapter(messageMultiplexer, stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(serverToMessageHandlerAdapter, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
clientGroup.add((Client) null);
Test 3: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
clientGroup.notifyMessageSent((Client) null, mockThrowable);
Test 4: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
clientGroup.notifyMessageSent((Client) null, weakReference);
Test 5: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
Object object = new Object();
clientGroup.notifyMessageSent((Client) null, weakReference);
clientGroup.notifyMessageReceived((Client) null, (Object) null);
Test 6: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
StateMultiplexer stateMultiplexer = new StateMultiplexer();
MessageMultiplexer messageMultiplexer = new MessageMultiplexer(stateMultiplexer);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
ClientToMessageHandlerAdapter clientToMessageHandlerAdapter = new ClientToMessageHandlerAdapter(messageMultiplexer, clientHandler);
clientGroup.addClientHandler(clientToMessageHandlerAdapter);
// Undeclared exception!
try { 
  clientGroup.notifyMessageSent((Client) null, weakReference);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // You must set a state before events can be handled.
   //
   verifyException("ioproject.client.network.StateMultiplexer", e);
}

Test 7: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable((Throwable) null);
MockThrowable mockThrowable = new MockThrowable(mockThrowable);
createSubGroup.notifyExceptionCaught((Client) null, mockThrowable);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();
Test 8: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable mockThrowable = new MockThrowable();
clientGroup.notifyExceptionCaught((Client) null, mockThrowable);
Test 9: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client client = new Client((IoSession) null);
clientGroup.contains(client);
Test 10: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.contains((Client) null);
Test 11: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());
Test 12: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(clientGroup);
clientGroup.add((Client) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
Test 13: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
Test 14: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.iterator();
Test 15: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.notifyMessageReceived((Client) null, "");
Test 16: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.parentGroup();
Test 17: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(clientGroup);
clientGroup.parentGroup();
Test 18: 
ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
clientGroup.size();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 79%
* Total number of goals: 66
* Number of covered goals: 52
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 53
* Number of covered goals: 49
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 25
* Number of covered goals: 19
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 66
* Number of covered goals: 50
* Generated 19 tests with total length 82
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 50%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
int size = clientGroup.size();
assertEquals(0, size);


** It was a parseable test case! 
refined test name is: testSizeOfEmptyClientGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup parentGroup = clientGroup.parentGroup();
assertNull(parentGroup);


** It was a parseable test case! 
refined test name is: testParentGroupReturnsNullWhenNoParent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
MockThrowable arg1 = new MockThrowable((Throwable) null);
boolean notifyMessageSent = clientGroup.notifyMessageSent((Client) null, arg1);
assertFalse(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSentreturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg0 = new ClientGroup((ClientGroup) null);
WeakReference<Object> arg1 = new WeakReference<Object>(arg0);
arg0.add((Client) null);
boolean notifyMessageSent = arg0.notifyMessageSent((Client) null, arg1);
assertEquals(1, arg0.size());
assertTrue(notifyMessageSent);


** It was a parseable test case! 
refined test name is: testNotifyMessageSent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg0 = new ClientGroup((ClientGroup) null);
arg0.createSubGroup();
WeakReference<Object> arg1 = new WeakReference<Object>(arg0);
arg0.add((Client) null);
Object object = new Object();
arg0.notifyMessageSent((Client) null, arg1);
boolean notifyMessageReceived = arg0.notifyMessageReceived((Client) null, (Object) null);
assertEquals(1, arg0.size());
assertTrue(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testAddClientToGroupSendsNotificationMessage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable arg0 = new MockThrowable((Throwable) null);
MockThrowable arg1 = new MockThrowable(arg0);
createSubGroup.notifyExceptionCaught((Client) null, arg1);
DelayQueue<Delayed> delayQueue = new DelayQueue<Delayed>();

** It was a parseable test case! 
refined test name is: testNotifyExceptionCaught
* Compiling Tests
refined test name is: testNotifyExceptionCaught
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.createSubGroup();
clientGroup.add((Client) null);
MockThrowable arg1 = new MockThrowable();
boolean notifyExceptionCaught = clientGroup.notifyExceptionCaught((Client) null, arg1);
assertEquals(1, clientGroup.size());
assertTrue(notifyExceptionCaught);


** It was a parseable test case! 
refined test name is: testNotifyExceptionCaughtSingleSubgroupAndClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Client arg0 = new Client((IoSession) null);
boolean contains = clientGroup.contains(arg0);
assertFalse(contains);


** It was a parseable test case! 
refined test name is: testContainsNullParentGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
boolean contains = clientGroup.contains((Client) null);
assertEquals(1, clientGroup.size());
assertTrue(contains);


** It was a parseable test case! 
refined test name is: testAddClientToClientGroup
* Compiling Tests
refined test name is: testAddClientToClientGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
createSubGroup.add((Client) null);
ClientHandler clientHandler = mock(ClientHandler.class, new ViolatedAssumptionAnswer());

** It was a parseable test case! 
refined test name is: testAddingNullClientToSubGroupThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg0 = new ClientGroup((ClientGroup) null);
WeakReference<Object> weakReference = new WeakReference<Object>(arg0);
arg0.add((Client) null);
arg0.createSubGroup();
assertEquals(1, arg0.size());

arg0.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(arg0);
assertEquals(0, arg0.size());


** It was a parseable test case! 
refined test name is: testAddAndRemoveClients
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg0 = new ClientGroup((ClientGroup) null);
ClientGroup createSubGroup = arg0.createSubGroup();
arg0.remove((Client) null);
ClientGroup clientGroup = new ClientGroup(arg0);
assertFalse(clientGroup.equals((Object)createSubGroup));


** It was a parseable test case! 
refined test name is: testCreateSubGroupEquals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
Iterator<Client> iterator = clientGroup.iterator();
assertNotNull(iterator);


** It was a parseable test case! 
refined test name is: testNextClientFromIteratorReturnsNonNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
boolean notifyMessageReceived = clientGroup.notifyMessageReceived((Client) null, "");
assertFalse(notifyMessageReceived);


** It was a parseable test case! 
refined test name is: testNotifyMessageReceivedWithNullClient
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
ClientGroup createSubGroup = clientGroup.createSubGroup();
ClientGroup parentGroup = createSubGroup.parentGroup();
assertEquals(1, clientGroup.size());
assertSame(clientGroup, parentGroup);


** It was a parseable test case! 
refined test name is: testAddingClientToEmptyGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup arg0 = new ClientGroup((ClientGroup) null);
ClientGroup clientGroup = new ClientGroup(arg0);
ClientGroup parentGroup = clientGroup.parentGroup();
assertNotSame(parentGroup, clientGroup);


** It was a parseable test case! 
refined test name is: testGetParentGroupReturnsNonNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClientGroup clientGroup = new ClientGroup((ClientGroup) null);
clientGroup.add((Client) null);
int size = clientGroup.size();
assertEquals(1, size);


** It was a parseable test case! 
refined test name is: testSizeOfClientGroupWithOneClient
* Compiling Tests
refined test name is: testSizeOfClientGroupWithOneClient
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:28.991 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.015 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.106 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.108 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.198 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.201 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.292 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.380 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:25:29.383 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.466 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.545 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.547 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.623 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:25:29.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.716 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.719 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.825 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:29.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.920 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:29.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:30.012 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:30.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:30.107 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:30.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:30.194 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:30.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:30.292 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:30.295 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:30.388 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:25:30.390 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:30.478 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:25:30.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
[MASTER] 05:25:30.760 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:30.762 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
[MASTER] 05:25:31.049 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar418634769895408102.jar
[MASTER] 05:25:31.051 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar418634769895408102.jar
* Writing tests to file
* Writing JUnit test case 'ClientGroup_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
* Done!

* Computation finished
