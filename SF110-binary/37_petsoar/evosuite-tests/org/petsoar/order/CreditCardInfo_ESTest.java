/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 05:55:52 GMT 2024
 */

package org.petsoar.order;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.petsoar.order.CreditCardInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreditCardInfo_ESTest extends CreditCardInfo_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCreditCardNumberReturningEmptyString() throws Throwable  {
      // Given: A CreditCardInfo object is created and its credit card number is set to an empty string
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      creditCardInfo.setCreditCardNumber("");
      
      // When: The getCreditCardNumber method is called on the CreditCardInfo object
      String creditCardNumber = creditCardInfo.getCreditCardNumber();
      
      // Then: The return value of the getCreditCardNumber method should be an empty string
      assertEquals("", creditCardNumber);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCardTypeWithNonEmptyString() throws Throwable  {
      // Given: A credit card object with a valid card type
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      creditCardInfo.setCardType("American Express");
      
      // When: The getCardType method is called on the credit card object
      String actualCardType = creditCardInfo.getCardType();
      
      // Then: The returned value should be "American Express"
      assertEquals("American Express", actualCardType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCreditCardInfo() throws Throwable  {
      // Given: A CreditCardInfo object is created with a card type of "Master Card"
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      creditCardInfo.setCardType("Master Card");
      
      // When: The getCardType method is called on the CreditCardInfo object
      String actualCardType = creditCardInfo.getCardType();
      
      // Then: The card type of "Master Card" should be returned
      assertEquals("Master Card", actualCardType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCardTypeReturningNonEmptyString() throws Throwable  {
      // Test to ensure that the credit card type is set correctly
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      creditCardInfo.setCardType("Visa");
      String cardType = creditCardInfo.getCardType();
      assertEquals("Visa", cardType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCardTypeWithNull() throws Throwable  {
      // Given: A new CreditCardInfo object is created with a null card type value
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      creditCardInfo.setCardType(null);
      
      // When: The getCardType method is called on the CreditCardInfo object
      String actualResult = creditCardInfo.getCardType();
      
      // Then: The returned value should be "Unknown"
      assertEquals("Unknown", actualResult);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCardTypeThrowsIllegalArgumentException() throws Throwable  {
      // Test that an exception is thrown when attempting to set a
      // card type that is not valid (e.g., "Gold Visa").
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      try {
      creditCardInfo.setCardType("Gold Visa");
      fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      // Verify that the exception is due to an invalid card type.
      verifyException("org.petsoar.order.CreditCardInfo", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCardTypeReturningNull() throws Throwable  {
      // Arrange
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      
      // Act
      String cardType = creditCardInfo.getCardType();
      
      // Assert
      assertNull(cardType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExpirationDateReturningNull() throws Throwable  {
      // Given: a CreditCard object with an expiration date of null
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      
      // When: the expiration date is retrieved
      Date expirationDate = creditCardInfo.getExpirationDate();
      
      // Then: the expiration date should be null
      assertNull(expirationDate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCreditCardNumberReturningNull() throws Throwable  {
      // No Comments were added
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      String creditCardNumber = creditCardInfo.getCreditCardNumber();
      assertNull(creditCardNumber);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCreditCardNumberReturningNonEmptyString() throws Throwable  {
      // Given: A CreditCardInfo object with a valid credit card number
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      creditCardInfo.setCreditCardNumber("1234-5678-9012-3456");
      
      // When: The getCreditCardNumber method is called on the object
      String creditCardNumber = creditCardInfo.getCreditCardNumber();
      
      // Then: The correct credit card number is returned
      assertEquals("1234-5678-9012-3456", creditCardNumber);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetExpirationDate() throws Throwable  {
      // Given a credit card information object
      CreditCardInfo creditCardInfo = new CreditCardInfo();
      
      // When we set the expiration date to a negative value
      MockDate arg0 = new MockDate((-1));
      creditCardInfo.setExpirationDate(arg0);
      
      // Then the expiration date should be the maximum valid date in the past
      Date expirationDate = creditCardInfo.getExpirationDate();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", expirationDate.toString());
  }
}
