/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 16:45:07 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyOpThrowsNullPointerException() throws Throwable  {
      // Given: an instance of JSState and JSSubstitution objects
      JSState state = new JSState();
      JSSubstitution substitution = new JSSubstitution();
      
      // When: the applyOp method is called with a null argument
      try {
      state.applyOp(null, substitution, state, state);
      fail("Expected exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then: an exception should be thrown and verified
      assertTrue(e instanceof NullPointerException);
      assertEquals(e.getMessage(), null);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSatisfiesTAm() throws Throwable  {
      // rollbacked to evosuite
      JSState jSState = new JSState();
      JSJshopVars.flagLevel = 2063;
      JSSubstitution arg1 = new JSSubstitution();
      JSTerm arg0 = new JSTerm();
      JSListSubstitution satisfiesTAm = jSState.satisfiesTAm(arg0, arg1);
      assertEquals(10, satisfiesTAm.capacity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSatisfiesAll() throws Throwable  {
      // rollbacked to evosuite
      JSState arg0 = new JSState();
      JSSubstitution arg1 = new JSSubstitution();
      JSListAxioms arg2 = new JSListAxioms();
      JSListSubstitution satisfiesAll = arg0.satisfiesAll(arg0, arg1, arg2);
      assertFalse(satisfiesAll.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSatisfies() throws Throwable  {
      // rollbacked to evosuite
      JSState arg0 = new JSState();
      JSSubstitution arg1 = new JSSubstitution();
      JSListAxioms arg2 = new JSListAxioms();
      JSSubstitution satisfies = arg0.satisfies(arg0, arg1, arg2);
      assertEquals(0, satisfies.capacity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddElementsToState() throws Throwable  {
      // rollbacked to evosuite
      JSState arg0 = new JSState();
      arg0.setSize(2013);
      JSState jSState = new JSState();
      jSState.addElementsToState(arg0);
      assertEquals(1, jSState.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApply() throws Throwable  {
      // Given a JState object
      JSState jSState = new JSState();
      
      // And a JSPlan object
      JSPlan arg0 = new JSPlan();
      
      // When the apply method is called on the JState object with the JSPlan object as an argument
      JSState apply = jSState.apply(arg0);
      
      // Then the return value should not be the same as the original JState object
      assertNotSame(apply, jSState);
  }
}
