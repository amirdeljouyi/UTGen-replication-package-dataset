/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 13:40:46 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import javax.swing.JApplet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshop;
import umd.cs.shop.JSJshopNode;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSPairPlanTSListNodes;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPlanningProblem;
import umd.cs.shop.JSTaskAtom;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSJshop_ESTest extends JSJshop_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFileThrowsNullPointerException() throws Throwable  {
      // Given: A new instance of JSJshop and a JSTaskAtom object
      JSJshop jSJshop = new JSJshop();
      JSTaskAtom arg1 = new JSTaskAtom();
      
      // When: The setFile method is called with a null file path
      jSJshop.setFile(null, arg1);
      
      // Then: A NullPointerException is thrown
      assertThrows(NullPointerException.class, () -> jSJshop.setFile(null, arg1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTestParserThrowsSystemExitException() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      // Undeclared exception!
      try {
      // Test that the parser method throws a System.SystemExitException when called
      jSJshop.testParser();
      fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.evosuite.runtime.System", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParserFile() throws Throwable  {
      // Given a JSJshop instance with an invalid file path
      JSJshop jSJshop = new JSJshop();
      
      // When the parserFile method is called with an invalid file path
      boolean parserFile = jSJshop.parserFile("umd.cs.shop.JSTasks");
      
      // Then the method should return false
      assertFalse(parserFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSJshopTaking2ArgumentsThrowsSystemExitException() throws Throwable  {
      JSJshop jSJshop = null;
      try {
      // Create an instance of JSJshop with the specified arguments
      jSJshop = new JSJshop("EliteGadgetEmporium", "OnlineRetailer");
      } catch(System.SystemExitException e) {
      // Verify that an exception was thrown as expected
      verifyException("org.evosuite.runtime.System", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReaderWithNull() throws Throwable  {
      // Given a JSJshop instance and a BufferedReader object
      JSJshop jSJshop = new JSJshop();
      BufferedReader bufferedReader = jSJshop.getBufferedReader("|", (String) null, (JApplet) null);
      
      // When the getBufferedReader method is called with the specified delimiter and parameters
      
      // Then assert that the returned BufferedReader object is null
      assertNull(bufferedReader);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReaderWithNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      JSJshop jSJshop = new JSJshop();
      BufferedReader bufferedReader = jSJshop.getBufferedReader("input.txt", "output.txt", (JApplet) null);
      assertNull(bufferedReader);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTestParser() throws Throwable  {
      // rollbacked to evosuite
      EvoSuiteFile arg0 = new EvoSuiteFile("farp.shp");
      FileSystemHandling.appendStringToFile(arg0, "umd.cs.shop.jsjshop");
      JSJshop jSJshop = new JSJshop();
      jSJshop.testParser();
      assertFalse(JSJshop.corbaToHicap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeleteList() throws Throwable  {
      // Given a JSJshop instance with an empty delete list
      JSJshop jSJshop = new JSJshop();
      assertNull(jSJshop.getDeleteList());
      
      // When the getDeleteList method is called
      JSListLogicalAtoms deleteList = jSJshop.getDeleteList();
      
      // Then the delete list should be null
      assertNull(deleteList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAddList() throws Throwable  {
      // rollbacked to evosuite
      JSJshop jSJshop = new JSJshop();
      JSListLogicalAtoms addList = jSJshop.getAddList();
      assertNull(addList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsSystemExitException() throws Throwable  {
      // rollbacked to evosuite
      String[] arg0 = new String[2];
      arg0[0] = "--help";
      // Undeclared exception!
      try { 
        JSJshop.main(arg0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainWithNonEmptyArray() throws Throwable  {
      // Given: A string array with a length of 4
      String[] arg0 = new String[4];
      
      // When: The string "one" is added to the third position in the array
      arg0[2] = "one";
      
      // Then: The array's length should be 4
      assertEquals(4, arg0.length);
      
      JSJshop.main(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain() throws Throwable  {
      // Given
      String[] args = new String[8];
      
      // When
      JSJshop.main(args);
      
      // Then
      assertEquals(8, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainWithEmptyArray() throws Throwable  {
      // Given: We are executing the main method with no arguments
      String[] arg0 = new String[0];
      
      // When: We invoke the main method
      JSJshop.main(arg0);
      
      // Then: The length of the returned string array should be 0
      assertEquals(0, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDom() throws Throwable  {
      // Given: We have a JSJshop object and a JSPPlanningDomain object
      JSJshop jSJshop = new JSJshop();
      JSPlanningDomain dom = jSJshop.dom();
      
      // When: We check if the domain is null
      assertNull(dom);
      
      // Then: The domain should be null, as it has not been initialized yet
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProb() throws Throwable  {
      // Create a new instance of JSJshop
      JSJshop jSJshop = new JSJshop();
      
      // Call the prob method to get the planning problem
      JSPlanningProblem prob = jSJshop.prob();
      
      // Assert that the planning problem is null
      assertNull(prob);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTree() throws Throwable  {
      // Given a new instance of JSJshop
      JSJshop jSJshop = new JSJshop();
      
      // When the tree method is called
      JSJshopNode tree = jSJshop.tree();
      
      // Then the tree should be null
      assertNull(tree);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSol() throws Throwable  {
      // rollbacked to evosuite
      JSJshop jSJshop = new JSJshop();
      JSPlan sol = jSJshop.sol();
      assertNull(sol);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSolution() throws Throwable  {
      // Given: a new instance of JSJshop with an empty node list
      JSJshop jSJshop = new JSJshop();
      
      // When: we get the solution for the empty node list
      JSPairPlanTSListNodes solution = jSJshop.getSolution();
      
      // Then: the solution should be null
      assertNull(solution);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSJshopTaking2ArgumentsThrowsNullPointerException() throws Throwable  {
      // Given: a null task atom is passed to the JSJshop constructor
      JSTaskAtom taskAtom = null;
      
      // When: the JSJshop object is created with the null task atom
      JSJshop jSJshop = null;
      try {
      jSJshop = new JSJshop("TestShop", taskAtom);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Then: an exception is thrown with a message indicating that the task atom is null
      String expectedMessage = "Task atom cannot be null.";
      assertEquals(expectedMessage, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppletURLThrowsNullPointerException() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      // Given: A user has entered an invalid URL (null)
      try {
      jSJshop.getAppletURL(null, (JApplet) null);
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // When: The user clicks on the "Get Applet URL" button
      // Then: A NullPointerException is thrown because the URL is null
      verifyException("umd.cs.shop.JSJshop", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTree() throws Throwable  {
      // Given: We have a JSJshop object and its corresponding tree
      JSJshop jSJshop = new JSJshop();
      JSJshopNode tree = jSJshop.getTree();
      
      // When: We retrieve the tree from the JSJshop object
      tree = jSJshop.getTree();
      
      // Then: The retrieved tree is null
      assertNull(tree);
  }
}
