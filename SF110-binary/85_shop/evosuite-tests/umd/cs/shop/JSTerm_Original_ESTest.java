/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 03:42:36 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSTerm_Original_ESTest extends JSTerm_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneT() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      arg0.makeEval(true);
      arg0.addElement(arg0);
      arg0.cloneT();
      assertTrue(arg0.isEval());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      arg0.makeVariable();
      // Undeclared exception!
      try { 
        arg0.equals(arg0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatches() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      JSSubstitution matches = arg0.matches(arg0, (JSSubstitution) null);
      assertEquals(10, matches.capacity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsFunction() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      boolean function = jSTerm.isFunction();
      assertFalse(function);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsVariable() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      boolean variable = jSTerm.isVariable();
      assertFalse(variable);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMakeFunction() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeFunction();
      assertTrue(jSTerm.isFunction());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsConstant() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      boolean constant = jSTerm.isConstant();
      assertFalse(constant);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCallThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeEval(true);
      jSTerm.addElement("(*z<d)Cl");
      // Undeclared exception!
      try { 
        jSTerm.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCallThrowsNullPointerException() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.setSize(2221);
      // Undeclared exception!
      try { 
        jSTerm.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCall() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeVariable();
      assertTrue(jSTerm.isVariable());
      
      JSTerm call = jSTerm.call();
      assertEquals(0, call.capacity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStandardizerTerm() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      arg0.addElement(arg0);
      JSTerm standardizerTerm = arg0.standardizerTerm();
      assertFalse(standardizerTerm.isEval());
      assertTrue(standardizerTerm.isFunction());
      assertFalse(standardizerTerm.isConstant());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsGround() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeVariable();
      boolean ground = jSTerm.isGround();
      assertTrue(jSTerm.isVariable());
      assertFalse(ground);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStr() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      arg0.addElement(arg0);
      StringBuffer str = arg0.toStr();
      assertEquals(22, str.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStrThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchesThrowsArrayIndexOutOfBoundsExceptionAndMakeVariable() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      JSTerm arg0 = new JSTerm();
      arg0.makeVariable();
      JSSubstitution arg1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm.matches(arg0, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchesThrowsArrayIndexOutOfBoundsExceptionAndMakeConstant() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      arg0.makeConstant();
      JSSubstitution arg1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        arg0.matches(arg0, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneTThrowsNullPointerException() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.setSize(1434);
      // Undeclared exception!
      try { 
        jSTerm.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMakeEval() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      arg0.makeEval(true);
      arg0.addElement(arg0);
      arg0.print();
      assertTrue(arg0.isEval());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrint() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.addElement("(OIUd)0KVl$");
      jSTerm.print();
      assertEquals("[(OIUd)0KVl$]", jSTerm.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      JSTerm arg0 = new JSTerm();
      boolean equals = arg0.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintThrowsArrayIndexOutOfBoundsExceptionAndMakeConstant() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintThrowsArrayIndexOutOfBoundsExceptionAndMakeVariable() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
