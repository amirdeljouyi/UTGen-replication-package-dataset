/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 13:40:46 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import javax.swing.JApplet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshop;
import umd.cs.shop.JSJshopNode;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSPairPlanTSListNodes;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPlanningProblem;
import umd.cs.shop.JSTaskAtom;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSJshop_Original_ESTest extends JSJshop_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFileThrowsNullPointerException() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSTaskAtom arg1 = new JSTaskAtom();
      // Undeclared exception!
      try { 
        jSJshop.setFile("[zwR6vXa+PTIi#8", arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTestParserThrowsSystemExitException() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      // Undeclared exception!
      try { 
        jSJshop.testParser();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParserFile() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      boolean parserFile = jSJshop.parserFile("umd.cs.shop.JSTasks");
      assertFalse(parserFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReaderWithNonEmptyStringAndNull() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      BufferedReader bufferedReader = jSJshop.getBufferedReader("|", (String) null, (JApplet) null);
      assertNull(bufferedReader);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReaderWithEmptyStringAndEmptyString() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      BufferedReader bufferedReader = jSJshop.getBufferedReader("", "", (JApplet) null);
      assertNull(bufferedReader);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTestParser() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("farp.shp");
      FileSystemHandling.appendStringToFile(arg0, "umd.cs.shop.jsjshop");
      JSJshop jSJshop = new JSJshop();
      jSJshop.testParser();
      assertFalse(JSJshop.corbaToHicap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeleteList() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSListLogicalAtoms deleteList = jSJshop.getDeleteList();
      assertNull(deleteList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAddList() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSListLogicalAtoms addList = jSJshop.getAddList();
      assertNull(addList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSJshopTaking2ArgumentsThrowsSystemExitException() throws Throwable  {
      JSJshop jSJshop = null;
      try {
        jSJshop = new JSJshop("|g[vkgNnjF$Nq; ", "|g[vkgNnjF$Nq; ");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainWithNonEmptyArray() throws Throwable  {
      String[] arg0 = new String[4];
      arg0[2] = "one";
      JSJshop.main(arg0);
      assertEquals(4, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNullPointerException() throws Throwable  {
      String[] arg0 = new String[2];
      // Undeclared exception!
      try { 
        JSJshop.main(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain() throws Throwable  {
      String[] arg0 = new String[8];
      JSJshop.main(arg0);
      assertEquals(8, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainWithEmptyArray() throws Throwable  {
      String[] arg0 = new String[0];
      JSJshop.main(arg0);
      assertEquals(0, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDom() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSPlanningDomain dom = jSJshop.dom();
      assertNull(dom);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProb() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSPlanningProblem prob = jSJshop.prob();
      assertNull(prob);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTree() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSJshopNode tree = jSJshop.tree();
      assertNull(tree);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSol() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSPlan sol = jSJshop.sol();
      assertNull(sol);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSolution() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSPairPlanTSListNodes solution = jSJshop.getSolution();
      assertNull(solution);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSJshopTaking2ArgumentsThrowsNullPointerException() throws Throwable  {
      JSJshop jSJshop = null;
      try {
        jSJshop = new JSJshop(";vd;xD", (JSTaskAtom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppletURLThrowsNullPointerException() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      // Undeclared exception!
      try { 
        jSJshop.getAppletURL("", (JApplet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTree() throws Throwable  {
      JSJshop jSJshop = new JSJshop();
      JSJshopNode tree = jSJshop.getTree();
      assertNull(tree);
  }
}
