* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSTerm
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 16889
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:30:13.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:30:13.971 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:30:13.972 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 23:30:14.065 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSTerm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 846
* Using seed 1710459010454
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 201 / 846
[Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:==============>                    40%][Progress:>                             1%] [Cov:===============>                   44%][Progress:>                             2%] [Cov:================>                  48%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              59%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:=======================>           66%][Progress:=>                            4%] [Cov:=======================>           66%][Progress:=>                            4%] [Cov:=======================>           68%][Progress:=>                            4%] [Cov:=======================>           68%][Progress:=>                            4%] [Cov:=======================>           68%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          70%][Progress:=>                            4%] [Cov:========================>          70%][Progress:=>                            4%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          71%][Progress:=>                            5%] [Cov:========================>          71%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            6%] [Cov:=========================>         72%][Progress:==>                           7%] [Cov:=========================>         72%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          11%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][MASTER] 23:30:40.177 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       22%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][MASTER] 23:31:01.629 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:======>                       23%] [Cov:==========================>        76%][Progress:=======>                      24%] [Cov:==========================>        76%][Progress:=======>                      24%] [Cov:==========================>        76%][Progress:=======>                      24%] [Cov:==========================>        76%][Progress:=======>                      24%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      25%] [Cov:==========================>        76%][Progress:=======>                      26%] [Cov:==========================>        76%][Progress:=======>                      26%] [Cov:==========================>        76%][Progress:=======>                      26%] [Cov:==========================>        76%][Progress:=======>                      26%] [Cov:==========================>        76%][Progress:========>                     27%] [Cov:==========================>        76%][Progress:========>                     28%] [Cov:==========================>        76%][Progress:========>                     28%] [Cov:==========================>        76%][Progress:========>                     28%] [Cov:==========================>        76%][Progress:========>                     28%] [Cov:==========================>        76%][Progress:========>                     28%] [Cov:==========================>        76%][Progress:========>                     28%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:========>                     29%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    30%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    31%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        76%][Progress:=========>                    32%] [Cov:==========================>        77%][Progress:=========>                    32%] [Cov:==========================>        77%][Progress:=========>                    32%] [Cov:==========================>        77%][Progress:=========>                    32%] [Cov:==========================>        77%][Progress:=========>                    33%] [Cov:==========================>        77%][Progress:=========>                    33%] [Cov:==========================>        77%][Progress:==========>                   34%] [Cov:==========================>        77%][Progress:==========>                   34%] [Cov:==========================>        77%][Progress:==========>                   34%] [Cov:==========================>        77%][Progress:==========>                   36%] [Cov:==========================>        77%][Progress:==========>                   36%] [Cov:==========================>        77%][Progress:==========>                   36%] [Cov:==========================>        77%][Progress:==========>                   36%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  37%] [Cov:==========================>        77%][Progress:===========>                  38%] [Cov:==========================>        77%][Progress:===========>                  38%] [Cov:==========================>        77%][Progress:===========>                  38%] [Cov:==========================>        77%][Progress:===========>                  38%] [Cov:==========================>        77%][Progress:===========>                  38%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:===========>                  39%] [Cov:==========================>        77%][Progress:============>                 40%] [Cov:==========================>        77%][Progress:============>                 40%] [Cov:==========================>        77%][Progress:============>                 40%] [Cov:==========================>        77%][Progress:============>                 40%] [Cov:==========================>        77%][Progress:============>                 40%] [Cov:==========================>        77%][Progress:============>                 40%] [Cov:==========================>        77%][Progress:============>                 41%] [Cov:==========================>        77%][Progress:============>                 41%] [Cov:==========================>        77%][Progress:============>                 41%] [Cov:==========================>        77%][Progress:============>                 41%] [Cov:==========================>        77%][Progress:============>                 41%] [Cov:==========================>        77%][Progress:============>                 41%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 42%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:============>                 43%] [Cov:==========================>        77%][Progress:=============>                44%] [Cov:==========================>        77%][Progress:=============>                44%] [Cov:==========================>        77%][Progress:=============>                44%] [Cov:==========================>        77%][Progress:=============>                44%] [Cov:==========================>        77%][Progress:=============>                44%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                45%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:==============>               47%] [Cov:==========================>        77%][Progress:==============>               47%] [Cov:==========================>        77%][Progress:==============>               47%] [Cov:==========================>        77%][Progress:==============>               47%] [Cov:==========================>        77%][Progress:==============>               47%] [Cov:==========================>        77%][Progress:==============>               47%] [Cov:==========================>        77%][Progress:==============>               48%] [Cov:==========================>        77%][Progress:==============>               48%] [Cov:==========================>        77%][Progress:==============>               48%] [Cov:==========================>        77%][Progress:==============>               49%] [Cov:==========================>        77%][Progress:==============>               49%] [Cov:==========================>        77%][Progress:==============>               49%] [Cov:==========================>        77%][Progress:==============>               49%] [Cov:==========================>        77%][Progress:===============>              50%] [Cov:==========================>        77%][Progress:===============>              50%] [Cov:==========================>        77%][Progress:===============>              50%] [Cov:==========================>        77%][Progress:===============>              50%] [Cov:==========================>        77%][Progress:===============>              50%] [Cov:==========================>        77%][Progress:===============>              50%] [Cov:==========================>        77%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            59%] [Cov:===========================>       78%][Progress:=================>            59%] [Cov:===========================>       78%][Progress:=================>            59%] [Cov:===========================>       78%][Progress:=================>            59%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         68%] [Cov:===========================>       78%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%]
* Search finished after 202s and 595 generations, 170409 statements, best individual has fitness: 202.0
* Generated before the refinement 66 tests with total length 277
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(EUTd)10FM$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(EUTd)10FM$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm("Hello World!");
        JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: StringReader stringReader = new StringReader("(EUTd)10FM$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 7
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 7
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 7
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 7
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "(EUTd)10FM$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
String string = "Hello World!";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
        // Improved test data:
        StringReader stringReader2 = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        JSSubstitution jSSubstitution2 = new JSSubstitution("Hello", "World");// Improved substitution

        jSTerm2.applySubstitutionT(jSSubstitution2);
    }
}
statement is: StringReader stringReader = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
statement is: // Improved test data:
StringReader stringReader2 = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution2 = new JSSubstitution("Hello", "World")// Improved substitution
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.applySubstitutionT(jSSubstitution2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.applySubstitutionT(jSSubstitution2) target is: jSTerm2 method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);
String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*z<d)Cl")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(x>10) && (y<5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("(x>10) && (y<5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "(x>10) && (y<5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(>zChJ+.-jw")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(>zChJ+.-jw");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data:
        StringReader stringReader = new StringReader("(>zChJ+.-jw");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer, 1.2345678901234567E9);// Using a realistic value for the parameter }}

    }
}
statement is: StringReader stringReader = new StringReader("(>zChJ+.-jw"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
StringReader stringReader = new StringReader("(>zChJ+.-jw"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer, 1.2345678901234567E9)// Using a realistic value for the parameter }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(>zChJ+.-jw";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(>zChJ+.-jw";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello, world!\"");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello, world!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "\"Hello, world!\"";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%%%")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%Re]bt")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%Re]bt");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A_REBT");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("A_REBT"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "A_REBT";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("'KB%y1S(!iC:s")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("'KB%y1S(!iC:s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("'KB%y1S(!iC:s");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data
        StringReader improvedStringReader = new StringReader("'KB%y1S(!iC:s");
        StreamTokenizer improvedStreamTokenizer = new StreamTokenizer(improvedStringReader);
        JSTerm improvedJSTerm = new JSTerm(improvedStreamTokenizer);
        assertEquals(jSTerm.evaluate(), improvedJSTerm.evaluate());
    }
}
statement is: StringReader stringReader = new StringReader("'KB%y1S(!iC:s"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("'KB%y1S(!iC:s"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer improvedStreamTokenizer = new StreamTokenizer(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm improvedJSTerm = new JSTerm(improvedStreamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(jSTerm.evaluate(), improvedJSTerm.evaluate()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(jSTerm.evaluate(), improvedJSTerm.evaluate()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: String string = "'KB%y1S(!iC:s";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "'KB%y1S(!iC:s";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data:
        StringReader stringReader1 = new StringReader("{");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: // Improved test data:
StringReader stringReader1 = new StringReader("{"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "{";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("({UzG)Cl")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("({UzG)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data
        StringReader improvedStringReader = new StringReader("(123.456 + 789) * 0.1");
        StreamTokenizer improvedStreamTokenizer = new StreamTokenizer(improvedStringReader);
        JSTerm improvedJSTerm = new JSTerm(improvedStreamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("(123.456 + 789) * 0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer improvedStreamTokenizer = new StreamTokenizer(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm improvedJSTerm = new JSTerm(improvedStreamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(123.456 + 789) * 0.1";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OUTd10CFl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OUTd10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data
        StringReader stringReader = new StringReader("(OUTd10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(OUTd10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
StringReader stringReader = new StringReader("(OUTd10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(OUTd10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(OUTd10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("hello");
        jSTerm.print(3.14);
    }
}
statement is: // Improved test data
JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("hello") target is: jSTerm method is: makeVariable(java.lang.String)
statement is: jSTerm.print(3.14), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print(3.14) target is: jSTerm method is: print(double)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("Golden Ratio");
        jSTerm1.makeConstant(Math.sqrt(5) - 1);
        jSTerm1.print();
        JSTerm jSTerm2 = new JSTerm("Pi");
        jSTerm2.makeConstant(Math.PI);
        jSTerm2.print();
        JSTerm jSTerm3 = new JSTerm("Euler's Number");
        jSTerm3.makeConstant(Math.E);
        jSTerm3.print();
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("Golden Ratio"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeConstant(Math.sqrt(5) - 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeConstant(Math.sqrt(5) - 1) target is: jSTerm1 method is: makeConstant(double)
statement is: jSTerm1.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.print() target is: jSTerm1 method is: print()
statement is: JSTerm jSTerm2 = new JSTerm("Pi"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.makeConstant(Math.PI), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeConstant(Math.PI) target is: jSTerm2 method is: makeConstant(double)
statement is: jSTerm2.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.print() target is: jSTerm2 method is: print()
statement is: JSTerm jSTerm3 = new JSTerm("Euler's Number"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.makeConstant(Math.E), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.makeConstant(Math.E) target is: jSTerm3 method is: makeConstant(double)
statement is: jSTerm3.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.print() target is: jSTerm3 method is: print()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.addElement("Hello");
        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.addElement("Hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("Hello") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
String string = "Hello";
jSTerm.addElement(string);
jSTerm.print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*UzVd)1cCli")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.print();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.makeVariable();
        jSSubstitution.setSubstitute("x");
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSSubstitution.setSubstitute("x"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSSubstitution.setSubstitute("x") target is: jSSubstitution method is: setSubstitute(java.lang.String)
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(1434)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1434);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.setSize(1024);
        jSTerm.cloneT();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(1024) target is: jSTerm method is: setSize(int)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: setSize(I)V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
int _int = 1024;
jSTerm.setSize(_int);
jSTerm.cloneT();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*UzV)1li")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("(*UzV)1li");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.applySubstitutionT(matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("(*UzV)1li");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        JSSubstitution matches1 = jSTerm1.matches(jSTerm1);
        jSTerm1.applySubstitutionT(matches1);
        StringReader stringReader2 = new StringReader("(*UzV)1li");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        JSSubstitution matches2 = jSTerm2.matches(jSTerm2);
        jSTerm2.applySubstitutionT(matches2);
        StringReader stringReader3 = new StringReader("(*UzV)1li");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        JSSubstitution matches3 = jSTerm3.matches(jSTerm3);
        jSTerm3.applySubstitutionT(matches3);
    }
}
statement is: StringReader stringReader1 = new StringReader("(*UzV)1li"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches1 = jSTerm1.matches(jSTerm1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.matches(jSTerm1) target is: jSTerm1 method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm1.applySubstitutionT(matches1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.applySubstitutionT(matches1) target is: jSTerm1 method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
statement is: StringReader stringReader2 = new StringReader("(*UzV)1li"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches2 = jSTerm2.matches(jSTerm2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.matches(jSTerm2) target is: jSTerm2 method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm2.applySubstitutionT(matches2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.applySubstitutionT(matches2) target is: jSTerm2 method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
statement is: StringReader stringReader3 = new StringReader("(*UzV)1li"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches3 = jSTerm3.matches(jSTerm3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.matches(jSTerm3) target is: jSTerm3 method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 15
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm3.applySubstitutionT(matches3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.applySubstitutionT(matches3) target is: jSTerm3 method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 15
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);
String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);
String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OUTd)10CFl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OUTd)10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: StringReader stringReader = new StringReader("(OUTd)10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 6
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 6
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "(OUTd)10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?+Q:+_}1")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?+Q:+_}1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("?+Q:+_}1");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("?+Q:+_}1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "?+Q:+_}1";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OIUd)0KVl$")
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(OIUd)0KVl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OIUd)0KVl$");
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("(OIUd)0KVl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("(OIUd)0KVl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("(OIUd)0KVl$"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(OIUd)0KVl$") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 1, type umd.cs.shop.JSTermindex is: 2
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 1, type umd.cs.shop.JSTermindex is: 2
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "(OIUd)0KVl$";
StringReader stringReader = new StringReader(string);
JSTerm jSTerm = new JSTerm();
String string = "(OIUd)0KVl$";
((Vector) stringReader).addElement(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).matches(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("list ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("list");
        JSTerm jSTerm2 = new JSTerm("list");
        assertTrue(jSTerm1.equals(jSTerm2));
        StringReader stringReader1 = new StringReader("list ");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
        StringReader stringReader2 = new StringReader("list");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm4 = new JSTerm(streamTokenizer2);
        assertTrue(jSTerm3.equals(jSTerm4));
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(jSTerm1.equals(jSTerm2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm1.equals(jSTerm2)) target is:  method is: assertTrue(<unknown>)
statement is: StringReader stringReader1 = new StringReader("list "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader2 = new StringReader("list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(jSTerm3.equals(jSTerm4)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm3.equals(jSTerm4)) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "list";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "list";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "list ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("John");
        JSTerm jSTerm2 = new JSTerm("Jane");
        // Testing equality
        assertTrue(jSTerm1.equals(jSTerm1));
        assertFalse(jSTerm1.equals(jSTerm2));
        // Testing hashCode() method
        assertEquals(jSTerm1.hashCode(), jSTerm1.hashCode());
        assertNotEquals(jSTerm1.hashCode(), jSTerm2.hashCode());
        // Testing addElement() and call() methods
        List<JSTerm> elements = new ArrayList<>();
        elements.add(new JSTerm("John"));
        elements.add(new JSTerm("Jane"));
        JSTerm call1 = new JSTerm("Call", elements);
        assertEquals(call1, jSTerm1.call());
        // Testing toString() method
        String expectedToString = "JSTerm{elements=[John, Jane]}";
        assertEquals(expectedToString, jSTerm1.toString());
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("John"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("Jane"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Testing equality
assertTrue(jSTerm1.equals(jSTerm1)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Testing equality
assertTrue(jSTerm1.equals(jSTerm1)) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(jSTerm1.equals(jSTerm2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(jSTerm1.equals(jSTerm2)) target is:  method is: assertFalse(<unknown>)
statement is: // Testing hashCode() method
assertEquals(jSTerm1.hashCode(), jSTerm1.hashCode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Testing hashCode() method
assertEquals(jSTerm1.hashCode(), jSTerm1.hashCode()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertNotEquals(jSTerm1.hashCode(), jSTerm2.hashCode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(jSTerm1.hashCode(), jSTerm2.hashCode()) target is:  method is: assertNotEquals(<unknown>,<unknown>)
statement is: // Testing addElement() and call() methods
List<JSTerm> elements = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: elements.add(new JSTerm("John")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: elements.add(new JSTerm("John")) target is: elements method is: add(JSTerm)
statement is: elements.add(new JSTerm("Jane")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: elements.add(new JSTerm("Jane")) target is: elements method is: add(JSTerm)
statement is: JSTerm call1 = new JSTerm("Call", elements), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(call1, jSTerm1.call()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(call1, jSTerm1.call()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: // Testing toString() method
String expectedToString = "JSTerm{elements=[John, Jane]}", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedToString, jSTerm1.toString()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedToString, jSTerm1.toString()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "JSTerm{elements=[John, Jane]}"
TestCase is: String string = "JSTerm{elements=[John, Jane]}";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*UzVd)1cCli")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(*UzVd)1cCli");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer);
        assertTrue(jSTerm1.equals(jSTerm2));
    }
}
statement is: StringReader stringReader = new StringReader("(*UzVd)1cCli"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(jSTerm1.equals(jSTerm2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm1.equals(jSTerm2)) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "(*UzVd)1cCli";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("myVariable");
        jSTerm.toStr("Hello, World!");
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("myVariable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("myVariable") target is: jSTerm method is: makeVariable(java.lang.String)
statement is: jSTerm.toStr("Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr("Hello, World!") target is: jSTerm method is: toStr(java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*UzVd)1cCli")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(*HelloWorld)1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer, 234567890);
        jSTerm.toNum();
    }
}
statement is: StringReader stringReader = new StringReader("(*HelloWorld)1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer, 234567890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.toNum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toNum() target is: jSTerm method is: toNum()
TestCase is: String string = "(*HelloWorld)1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("John Doe", 32);
        jSTerm.makeVariable();
        jSTerm.isGround();
    }
}
statement is: JSTerm jSTerm = new JSTerm("John Doe", 32), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*UzVd)1cCli")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("HelloWorld123");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("HelloWorld123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "HelloWorld123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        JSTerm jSTerm = new JSTerm(10, "greeting");
        jSTerm.makeVariable("variable1", 20);
        jSTerm.call("functionName", "argument1", "argument2");
    }
}
statement is: // Improved test data for the given code snippet
JSTerm jSTerm = new JSTerm(10, "greeting"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("variable1", 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("variable1", 20) target is: jSTerm method is: makeVariable(java.lang.String,int)
statement is: jSTerm.call("functionName", "argument1", "argument2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call("functionName", "argument1", "argument2") target is: jSTerm method is: call(java.lang.String,java.lang.String,java.lang.String)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*za<d)Cl")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("(*za<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(a+b)*c");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("(a+b)*c"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "(a+b)*c";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OlJd)0qF$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OlJd)0qF$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isEval();
    }
}
statement is: StringReader stringReader = new StringReader("(OlJd)0qF$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isEval()Z
TestCase is: String string = "(OlJd)0qF$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isEval();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isConstant("(x + 3) * (2 - y)");
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant("(x + 3) * (2 - y)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant("(x + 3) * (2 - y)") target is: jSTerm method is: isConstant(java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeFunction();
        // Test data for the makeFunction method
        String functionName = "myFunction";
        int numArgs = 2;
        String[] argTypes = new String[]{ "string", "number" };
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeFunction()V
statement is: // Test data for the makeFunction method
String functionName = "myFunction", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int numArgs = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] argTypes = new String[]{ "string", "number" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: String string = "myFunction"
* this is vulnerable: int _int = 2
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
String string = "myFunction";
int _int = 2;

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String varName = "variable1";// Changing the primitive value to a more descriptive String variable }}

    }
}
statement is: String varName = "variable1"// Changing the primitive value to a more descriptive String variable }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "variable1"
TestCase is: String string = "variable1";

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with some sample text.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with some sample text."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a test string with some sample text.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("2 + 3 * (5 - 1)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("2 + 3 * (5 - 1)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * (5 - 1)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("Jane Doe");
        JSTerm jSTerm2 = new JSTerm("John Johnson");
        JSSubstitution jSSubstitution1 = new JSSubstitution(jSTerm1, "Doe");
        JSSubstitution jSSubstitution2 = new JSSubstitution(jSTerm2, "Smith");
        jSTerm1.makeConstant();
        jSTerm2.makeConstant();
        jSTerm1.matches(jSTerm1, jSSubstitution1);
        jSTerm2.matches(jSTerm2, jSSubstitution2);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("Jane Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("John Johnson"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution1 = new JSSubstitution(jSTerm1, "Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution2 = new JSSubstitution(jSTerm2, "Smith"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeConstant() target is: jSTerm1 method is: makeConstant()
statement is: jSTerm2.makeConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeConstant() target is: jSTerm2 method is: makeConstant()
statement is: jSTerm1.matches(jSTerm1, jSSubstitution1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.matches(jSTerm1, jSSubstitution1) target is: jSTerm1 method is: matches(JSTerm,JSSubstitution)
statement is: jSTerm2.matches(jSTerm2, jSSubstitution2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.matches(jSTerm2, jSSubstitution2) target is: jSTerm2 method is: matches(JSTerm,JSSubstitution)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5&)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w12345&)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("w12345&)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "w12345&)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OU=Td)10CFl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OU=Td)10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("(OU=Td)10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: String string = "(OU=Td)10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?PW[#rIWmE")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm jSTerm = new JSTerm("?PW[#rIWmE");
        StringReader stringReader = new StringReader(jSTerm.getPattern());
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: // Improved test data
JSTerm jSTerm = new JSTerm("?PW[#rIWmE"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader(jSTerm.getPattern()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: String string = "?PW[#rIWmE";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, (JSSubstitution) null)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int number1 = 5;
        int number2 = 3;
        String string1 = "hello";
        String string2 = "world";
    }
}
statement is: // Improved test data
int number1 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int number2 = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string1 = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string2 = "world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "hello"
* this is vulnerable: String string = "world"
TestCase is: int _int = 5;
int _int = 3;
String string = "hello";
String string = "world";

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("John", "Smith");
        JSTerm jSTerm2 = new JSTerm("John", "Doe");
        JSTerm cloneT1 = jSTerm1.cloneT();
        JSTerm cloneT2 = jSTerm2.cloneT();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm1.matches(cloneT1, jSSubstitution);
        jSTerm2.matches(cloneT2, jSSubstitution);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("John", "Smith"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("John", "Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm cloneT1 = jSTerm1.cloneT(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.cloneT() target is: jSTerm1 method is: cloneT()
statement is: JSTerm cloneT2 = jSTerm2.cloneT(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.cloneT() target is: jSTerm2 method is: cloneT()
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.matches(cloneT1, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.matches(cloneT1, jSSubstitution) target is: jSTerm1 method is: matches(JSTerm,JSSubstitution)
statement is: jSTerm2.matches(cloneT2, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.matches(cloneT2, jSSubstitution) target is: jSTerm2 method is: matches(JSTerm,JSSubstitution)
TestCase is: JSSubstitution jSSubstitution = new JSSubstitution();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) "(OU=Td)10CFl$")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OU=Td)10CFl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.add(((Object) ("(OU=Td)10CFl$")));
        StringReader stringReader = new StringReader("(OU=Td)10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches("(OU=Td)10CFl$", jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) ("(OU=Td)10CFl$"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) ("(OU=Td)10CFl$"))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: StringReader stringReader = new StringReader("(OU=Td)10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches("(OU=Td)10CFl$", jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches("(OU=Td)10CFl$", jSSubstitution) target is: jSTerm method is: matches(java.lang.String,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(OU=Td)10CFl$";
jSTerm.add((Object) string);
String string = "(OU=Td)10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
String string = "(OU=Td)10CFl$";
jSTerm.matches((JSTerm) string, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*UzVd)1cCli")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(*UzVd)1cCli");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("(*UzVd)1cCli"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "(*UzVd)1cCli";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OU=Td)10CFl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OU=Test Department)10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("(OU=Test Department)10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
TestCase is: String string = "(OU=Test Department)10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(new JSTerm(streamTokenizer));
    }
}
statement is: StringReader stringReader = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(new JSTerm(streamTokenizer)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(new JSTerm(streamTokenizer)) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("a");
        jSTerm1.makeVariable();
        jSTerm1.equals(jSTerm1);
        JSTerm jSTerm2 = new JSTerm("b");
        jSTerm2.makeVariable();
        jSTerm2.equals(jSTerm2);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeVariable() target is: jSTerm1 method is: makeVariable()
statement is: jSTerm1.equals(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm1) target is: jSTerm1 method is: equals(JSTerm)
statement is: JSTerm jSTerm2 = new JSTerm("b"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeVariable() target is: jSTerm2 method is: makeVariable()
statement is: jSTerm2.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.equals(jSTerm2) target is: jSTerm2 method is: equals(JSTerm)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Tests that two JSTerm instances with the same properties are equal
        JSTerm term1 = new JSTerm();
        term1.setValue("test");
        JSTerm term2 = new JSTerm();
        term2.setValue("test");
        assertEquals(term1, term2);
        // Tests that two JSTerm instances with different properties are not equal
        JSTerm term3 = new JSTerm();
        term3.setValue("test1");
        JSTerm term4 = new JSTerm();
        term4.setValue("test2");
        assertNotEquals(term3, term4);
        // Tests that two JSTerm instances with different values but the same properties are not equal
        JSTerm term5 = new JSTerm();
        term5.setValue("test1");
        JSTerm term6 = new JSTerm();
        term6.setValue("test2");
        assertNotEquals(term5, term6);
    }
}
statement is: // Tests that two JSTerm instances with the same properties are equal
JSTerm term1 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: term1.setValue("test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: term1.setValue("test") target is: term1 method is: setValue(java.lang.String)
statement is: JSTerm term2 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: term2.setValue("test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: term2.setValue("test") target is: term2 method is: setValue(java.lang.String)
statement is: assertEquals(term1, term2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(term1, term2) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: // Tests that two JSTerm instances with different properties are not equal
JSTerm term3 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: term3.setValue("test1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: term3.setValue("test1") target is: term3 method is: setValue(java.lang.String)
statement is: JSTerm term4 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: term4.setValue("test2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: term4.setValue("test2") target is: term4 method is: setValue(java.lang.String)
statement is: assertNotEquals(term3, term4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(term3, term4) target is:  method is: assertNotEquals(<unknown>,<unknown>)
statement is: // Tests that two JSTerm instances with different values but the same properties are not equal
JSTerm term5 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: term5.setValue("test1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: term5.setValue("test1") target is: term5 method is: setValue(java.lang.String)
statement is: JSTerm term6 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: term6.setValue("test2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: term6.setValue("test2") target is: term6 method is: setValue(java.lang.String)
statement is: assertNotEquals(term5, term6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(term5, term6) target is:  method is: assertNotEquals(<unknown>,<unknown>)
TestCase is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("list")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("list");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("v")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("v");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("a");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.call();
        StringReader stringReader2 = new StringReader("abc");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        jSTerm2.call();
        StringReader stringReader3 = new StringReader("123");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        jSTerm3.call();
        StringReader stringReader4 = new StringReader("xyz");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        JSTerm jSTerm4 = new JSTerm(streamTokenizer4);
        jSTerm4.call();
    }
}
statement is: StringReader stringReader = new StringReader("a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: StringReader stringReader2 = new StringReader("abc"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.call() target is: jSTerm2 method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 8
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: StringReader stringReader3 = new StringReader("123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.call() target is: jSTerm3 method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 13
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: StringReader stringReader4 = new StringReader("xyz"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm4.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm4.call() target is: jSTerm4 method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 18
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "a";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "abc";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "xyz";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;
        String s = "Hello";
        boolean b = true;
        double d = 3.14;
        char c = 'a';
    }
}
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "Hello"
* this is vulnerable: boolean _boolean = true
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
String string = "Hello";
boolean _boolean = true;
double _double = 3.14;
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("OUd")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("OUd");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("OUd"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "OUd";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("1;\"j)@-")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1;\"j)@-");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("1;\"j)@-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "1;\"j)@-";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm(true, "hello world");
        jSTerm.makeEval(false);
        jSTerm.addElement("foo bar baz");
        jSTerm.cloneT();
    }
}
statement is: JSTerm jSTerm = new JSTerm(true, "hello world"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(false) target is: jSTerm method is: makeEval(boolean)
statement is: jSTerm.addElement("foo bar baz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("foo bar baz") target is: jSTerm method is: addElement(java.lang.String)
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w.kTPd5)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("w.kTPd5)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("list ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("list ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isConstant();
        // Test with a constant value
        StringReader stringReader2 = new StringReader("10");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        jSTerm2.isConstant();
        // Test with a variable
        StringReader stringReader3 = new StringReader("list");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        jSTerm3.isConstant();
        // Test with a function call
        StringReader stringReader4 = new StringReader("list()");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        JSTerm jSTerm4 = new JSTerm(streamTokenizer4);
        jSTerm4.isConstant();
    }
}
statement is: StringReader stringReader = new StringReader("list "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant() target is: jSTerm method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isConstant()Z
statement is: // Test with a constant value
StringReader stringReader2 = new StringReader("10"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.isConstant() target is: jSTerm2 method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 8
Matched Method is: isConstant()Z
statement is: // Test with a variable
StringReader stringReader3 = new StringReader("list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.isConstant() target is: jSTerm3 method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 13
Matched Method is: isConstant()Z
statement is: // Test with a function call
StringReader stringReader4 = new StringReader("list()"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm4.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm4.isConstant() target is: jSTerm4 method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 18
Matched Method is: isConstant()Z
TestCase is: String string = "list ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "10";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "list()";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OlJd)0qF$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OlJd)0qF$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.isEval();
    }
}
statement is: StringReader stringReader = new StringReader("(OlJd)0qF$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isEval()Z
TestCase is: String string = "(OlJd)0qF$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).isEval();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(OU=Td)10CFl$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(OU=Td)10CFl$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isFunction();
    }
}
statement is: StringReader stringReader = new StringReader("(OU=Td)10CFl$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isFunction() target is: jSTerm method is: isFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isFunction()Z
TestCase is: String string = "(OU=Td)10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isFunction();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5&)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("myVariable");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.isVariable();
    }
}
statement is: StringReader stringReader = new StringReader("myVariable"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable() target is: jSTerm method is: isVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isVariable()Z
TestCase is: String string = "myVariable";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "M]C^$&4$a)V78l18U";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*z<d)Cl")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(*z<d)Cl");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("(*z<d)Cl"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "(*z<d)Cl";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w.kTPd5)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

* test suite isTestSuite: 123
Test 0: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 1: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 2: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Re]bt");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("'KB%y1S(!iC:s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("({UzG)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);
Test 12: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.applySubstitutionT(jSSubstitution);
Test 17: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1434);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 18: 
StringReader stringReader = new StringReader("(*UzV)1li");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.applySubstitutionT(matches);
Test 19: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 20: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?+Q:+_}1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 21: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 23: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 24: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 25: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 26: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 27: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 28: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 30: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 31: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 32: 
StringReader stringReader = new StringReader("(*za<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.makeEval(true);
jSTerm.call();
Test 33: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 34: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 38: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 39: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 41: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 42: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 43: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 45: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 47: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 48: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 49: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 50: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 51: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 52: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 53: 
StringReader stringReader = new StringReader("v");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 55: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 56: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 58: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 59: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 60: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 61: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isFunction();
Test 62: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 63: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 64: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 65: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 66: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
String string = "Hello World!";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 67: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);
String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 68: 
StringReader stringReader = new StringReader("(x>10) && (y<5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 69: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(>zChJ+.-jw";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);

Test 70: 
StringReader stringReader = new StringReader("\"Hello, world!\"");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("A_REBT");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
StringReader stringReader = new StringReader("'KB%y1S(!iC:s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "'KB%y1S(!iC:s";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 73: 
StringReader stringReader = new StringReader("{");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 74: 
StringReader stringReader = new StringReader("(123.456 + 789) * 0.1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 75: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(OUTd10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 76: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);

Test 77: 
JSTerm jSTerm = new JSTerm();

Test 78: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("Hello");
jSTerm.print();

Test 79: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 80: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1024);
jSTerm.cloneT();

Test 81: 
StringReader stringReader = new StringReader("(*UzV)1li");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);
String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);
String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);

Test 82: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 83: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?+Q:+_}1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

Test 84: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
((Vector) stringReader).addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).matches(jSTerm);

Test 85: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "list");
String string = "list";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "list ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 86: 

Test 87: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 88: 
JSTerm jSTerm = new JSTerm();

Test 89: 
StringReader stringReader = new StringReader("(*HelloWorld)1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);

Test 90: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 91: 
StringReader stringReader = new StringReader("HelloWorld123");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 92: 
StringReader stringReader = new StringReader("(a+b)*c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

Test 93: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isEval();

Test 94: 
JSTerm jSTerm = new JSTerm();

Test 95: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();

Test 96: 

Test 97: 
JSTerm jSTerm = new JSTerm();

Test 98: 
StringReader stringReader = new StringReader("This is a test string with some sample text.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 99: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2 + 3 * (5 - 1)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 100: 
StringReader stringReader = new StringReader("w12345&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 101: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 102: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "?PW[#rIWmE");
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 103: 

Test 104: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 105: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches((JSTerm) "(OU=Td)10CFl$", jSSubstitution);

Test 106: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 107: 
StringReader stringReader = new StringReader("(OU=Test Department)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 108: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 109: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();

Test 110: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

Test 111: 
StringReader stringReader = new StringReader("a");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "abc";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "xyz";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();

Test 112: 

Test 113: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 114: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

Test 115: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

Test 116: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "10";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "list()";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 117: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).isEval();

Test 118: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isFunction();

Test 119: 
StringReader stringReader = new StringReader("myVariable");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();

Test 120: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 121: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).standardizerTerm();

Test 122: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();


* Generated after the refinement and before minimization 123 tests with total length 563
* test suite isTestSuite: 123
Test 0: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 1: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 2: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Re]bt");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("'KB%y1S(!iC:s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("({UzG)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);
Test 12: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.applySubstitutionT(jSSubstitution);
Test 17: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1434);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 18: 
StringReader stringReader = new StringReader("(*UzV)1li");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.applySubstitutionT(matches);
Test 19: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 20: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?+Q:+_}1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 21: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 23: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 24: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 25: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 26: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 27: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 28: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 30: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 31: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 32: 
StringReader stringReader = new StringReader("(*za<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.makeEval(true);
jSTerm.call();
Test 33: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 34: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 38: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 39: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 41: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 42: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 43: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 45: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 47: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 48: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 49: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 50: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 51: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 52: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 53: 
StringReader stringReader = new StringReader("v");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 55: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 56: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 58: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 59: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 60: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 61: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isFunction();
Test 62: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 63: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 64: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 65: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 66: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
String string = "Hello World!";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 67: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);
String string = "w.kTPd5)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 68: 
StringReader stringReader = new StringReader("(x>10) && (y<5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 69: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(>zChJ+.-jw";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);

Test 70: 
StringReader stringReader = new StringReader("\"Hello, world!\"");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("A_REBT");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
StringReader stringReader = new StringReader("'KB%y1S(!iC:s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "'KB%y1S(!iC:s";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 73: 
StringReader stringReader = new StringReader("{");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 74: 
StringReader stringReader = new StringReader("(123.456 + 789) * 0.1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 75: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(OUTd10CFl$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 76: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);

Test 77: 
JSTerm jSTerm = new JSTerm();

Test 78: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("Hello");
jSTerm.print();

Test 79: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 80: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1024);
jSTerm.cloneT();

Test 81: 
StringReader stringReader = new StringReader("(*UzV)1li");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);
String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);
String string = "(*UzV)1li";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).applySubstitutionT(matches);

Test 82: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 83: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?+Q:+_}1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

Test 84: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
((Vector) stringReader).addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).matches(jSTerm);

Test 85: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "list");
String string = "list";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "list ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 86: 

Test 87: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 88: 
JSTerm jSTerm = new JSTerm();

Test 89: 
StringReader stringReader = new StringReader("(*HelloWorld)1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);

Test 90: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 91: 
StringReader stringReader = new StringReader("HelloWorld123");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 92: 
StringReader stringReader = new StringReader("(a+b)*c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

Test 93: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isEval();

Test 94: 
JSTerm jSTerm = new JSTerm();

Test 95: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();

Test 96: 

Test 97: 
JSTerm jSTerm = new JSTerm();

Test 98: 
StringReader stringReader = new StringReader("This is a test string with some sample text.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 99: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2 + 3 * (5 - 1)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 100: 
StringReader stringReader = new StringReader("w12345&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 101: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 102: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "?PW[#rIWmE");
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 103: 

Test 104: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 105: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches((JSTerm) "(OU=Td)10CFl$", jSSubstitution);

Test 106: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 107: 
StringReader stringReader = new StringReader("(OU=Test Department)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 108: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 109: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();

Test 110: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

Test 111: 
StringReader stringReader = new StringReader("a");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "abc";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();
String string = "xyz";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();

Test 112: 

Test 113: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 114: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

Test 115: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

Test 116: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "10";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();
String string = "list()";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 117: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).isEval();

Test 118: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isFunction();

Test 119: 
StringReader stringReader = new StringReader("myVariable");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();

Test 120: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 121: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).standardizerTerm();

Test 122: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();


* Minimizing test suite
* test suite isTestSuite: 66
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("M]C^$&4$a)V78l18U");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 3: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("Hello");
jSTerm.print();
Test 4: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("%Re]bt");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 8: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2 + 3 * (5 - 1)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 11: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 12: 
StringReader stringReader = new StringReader("(123.456 + 789) * 0.1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 15: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 16: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Hello");
jSTerm.print();
Test 17: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 18: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 19: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1024);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 20: 
StringReader stringReader = new StringReader("(*UzV)1li");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.applySubstitutionT(matches);
Test 21: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.applySubstitutionT(jSSubstitution);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 23: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 24: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 25: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?+Q:+_}1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 26: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 27: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 29: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 31: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 32: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 34: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 35: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 37: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 38: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 40: 
StringReader stringReader = new StringReader("(*za<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.makeEval(true);
jSTerm.call();
Test 41: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 46: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 47: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);
Test 48: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 49: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 50: 
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 51: 
StringReader stringReader = new StringReader("(*UzVd)1cCli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 53: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 55: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 56: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 57: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 59: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 60: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 61: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 62: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 63: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isFunction();
Test 64: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 65: 
StringReader stringReader = new StringReader("(*z<d)Cl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 192
* Number of covered goals: 147
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 77%
* Total number of goals: 318
* Number of covered goals: 246
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 123
* Number of covered goals: 83
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 77%
* Total number of goals: 192
* Number of covered goals: 147
* Generated 66 tests with total length 275
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 61%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testPrintUninitializedVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
boolean equals = arg0.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsSelf
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("Hello");
jSTerm.print();
assertTrue(jSTerm.isEval());


** It was a parseable test case! 
refined test name is: testIsEvalTrueGivenNoElementsAndTrueArgument
* Compiling Tests
refined test name is: testMakeEvalWhenCalledWithTrueArgumentReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testPrintingWithEmptyConstant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Hello");
jSTerm.print();
assertFalse(jSTerm.isVariable());


** It was a parseable test case! 
refined test name is: testAddElementAndPrint
* Compiling Tests
refined test name is: testAddElementAndPrint
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1024);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testCloneTWithNullSizeThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeConstant();
JSSubstitution arg1 = new JSSubstitution();
// Undeclared exception!
try { 
  arg0.matches(arg0, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testMatchesThrowsExceptionWithNoBindings
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testToStrThrowsExceptionWhenEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
boolean ground = jSTerm.isGround();
assertTrue(jSTerm.isVariable());
assertFalse(ground);


** It was a parseable test case! 
refined test name is: testVariableTermIsNotGround
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
assertTrue(jSTerm.isVariable());

JSTerm call = jSTerm.call();
assertTrue(call.isVariable());


** It was a parseable test case! 
refined test name is: testMakeVariableMethodReturnsTrueWhenCalled
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean constant = jSTerm.isConstant();
assertFalse(constant);


** It was a parseable test case! 
refined test name is: testIsNotConstant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
assertTrue(jSTerm.isFunction());


** It was a parseable test case! 
refined test name is: testMakeFunctionValidFunctionType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean variable = jSTerm.isVariable();
assertFalse(variable);


** It was a parseable test case! 
refined test name is: testIsVariableMethodReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean function = jSTerm.isFunction();
assertFalse(function);


** It was a parseable test case! 
refined test name is: testIsNotAFunction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
JSSubstitution matches = arg0.matches(arg0, (JSSubstitution) null);
assertTrue(matches.fail());


** It was a parseable test case! 
refined test name is: testMatchesWithNullSubstitutionReturnsFail
* Compiling Tests
refined test name is: testMatchesWithNullSubstitution
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeVariable();
// Undeclared exception!
try { 
  arg0.equals(arg0);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testEqualsThrowsArrayIndexOutOfBoundsException
* Compiling Tests
refined test name is: testEqualsThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeEval(true);
arg0.addElement(arg0);
arg0.cloneT();
assertTrue(arg0.isEval());


** It was a parseable test case! 
refined test name is: testCloneMethodShouldMaintainIsEvalValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.203 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.267 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.341 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.343 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:40:34.386 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.388 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:40:34.499 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.556 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.630 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.631 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.696 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.777 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.778 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.829 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.878 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.879 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.933 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.934 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:34.988 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:34.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:35.059 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:35.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:40:35.110 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:35.111 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:40:35.181 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:35.182 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:40:35.238 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:35.239 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
** Write a test suite: 14 called: 2 to improve: false
** Write a test suite: 15 called: 3 to improve: false
[MASTER] 03:40:35.638 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:35.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
** Write a test suite: 14 called: 3 to improve: false
[MASTER] 03:40:36.003 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:40:36.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
[MASTER] 03:40:37.501 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 68
Test 0: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 1: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 2: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 3: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 4: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Re]bt");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);
Test 10: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 11: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 12: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
jSTerm.print();
Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 14: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.applySubstitutionT(jSSubstitution);
Test 15: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1434);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 16: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 17: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 18: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 19: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 21: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 23: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 24: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 25: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 26: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 27: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 28: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 31: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 32: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 33: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 34: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm parseList = jSTerm.parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
parseList.applySubstitutionT(jSSubstitution);
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 36: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 37: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 38: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 40: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);
Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 42: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 43: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 46: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 47: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 48: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 49: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 50: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 51: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSSubstitution);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2221);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 53: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(*z<d)Cl");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 55: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 56: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 58: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 59: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 60: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 61: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isFunction();
Test 62: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 63: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.matches(jSTerm);
Test 64: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 65: 
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 66: 
StringReader stringReader = new StringReader("(*UVd)1cCFli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 67: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();

* Minimizing test suite
[MASTER] 03:41:59.168 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 68
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("(>zChJ+.-jw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Re]bt");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("1;\"j)@-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 8: 
StringReader stringReader = new StringReader("?PW[#rIWmE");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(*UVd)1cCFli");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(OUTd10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);
Test 13: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm parseList = jSTerm.parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
parseList.applySubstitutionT(jSSubstitution);
Test 15: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
jSTerm.print();
Test 16: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 17: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 18: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1434);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 19: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 20: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.applySubstitutionT(jSSubstitution);
Test 21: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 23: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 24: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 25: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 26: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.matches(jSTerm);
Test 27: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 28: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 29: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);
Test 30: 
StringReader stringReader = new StringReader("(OIUd)0KVl$");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(OIUd)0KVl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 31: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 33: 
StringReader stringReader = new StringReader("(OUTd)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 34: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 36: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 38: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 40: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 41: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 42: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 44: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSSubstitution);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2221);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(*z<d)Cl");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 48: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 49: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 50: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 51: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 53: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 55: 
StringReader stringReader = new StringReader("(EUTd)10FM$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) "(OU=Td)10CFl$");
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 57: 
StringReader stringReader = new StringReader("w.kTPd5)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 59: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 60: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 61: 
StringReader stringReader = new StringReader("OUd");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 63: 
StringReader stringReader = new StringReader("list ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 64: 
StringReader stringReader = new StringReader("(OlJd)0qF$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 65: 
StringReader stringReader = new StringReader("(OU=Td)10CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isFunction();
Test 66: 
StringReader stringReader = new StringReader("w.kTPd5&)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 67: 
StringReader stringReader = new StringReader("(OU=Td)1CFl$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 70%
* Total number of goals: 192
* Number of covered goals: 134
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 71%
* Total number of goals: 318
* Number of covered goals: 227
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 123
* Number of covered goals: 82
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 192
* Number of covered goals: 136
* Generated 68 tests with total length 283
[MASTER] 03:41:59.600 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 51%
* Compiling and checking tests
[MASTER] 03:42:16.389 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:32.572 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:32.576 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:32.630 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:32.632 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:32.676 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:32.677 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:32.723 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:32.724 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:32.812 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:32.814 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:32.994 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.007 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.185 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.187 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.357 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.358 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.482 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.483 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.612 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.613 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.725 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.725 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.781 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.782 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.847 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.848 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:33.942 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:33.943 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.031 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.032 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.116 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.117 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.216 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.217 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.264 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.266 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.321 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.371 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.417 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.420 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:42:34.465 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.466 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
[MASTER] 03:42:34.864 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:34.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
[MASTER] 03:42:35.521 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar3161585200867893814.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:42:35.522 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3161585200867893814.jar
[MASTER] 03:42:35.524 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing tests to file
* Writing JUnit test case 'JSTerm_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
** Write a test suite: 14 called: 3 to improve: false
* Writing JUnit test case 'JSTerm_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
* Done!

* Computation finished
