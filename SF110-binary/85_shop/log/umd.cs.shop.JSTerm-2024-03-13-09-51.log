* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSTerm
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 12247
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 09:51:28.834 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 09:51:28.855 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 09:51:28.857 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 09:51:28.923 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSTerm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 846
* Using seed 1710323487171
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 201 / 846
[Progress:>                             0%] [Cov:===========>                       32%][Progress:>                             1%] [Cov:==============>                    41%][Progress:>                             2%] [Cov:===============>                   44%][Progress:>                             2%] [Cov:================>                  47%][Progress:>                             2%] [Cov:=================>                 50%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               56%][Progress:>                             3%] [Cov:===================>               57%][Progress:>                             3%] [Cov:===================>               57%][MASTER] 09:51:32.715 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:>                             3%] [Cov:====================>              59%][Progress:>                             3%] [Cov:====================>              59%][Progress:>                             3%] [Cov:=====================>             61%][Progress:>                             3%] [Cov:=====================>             61%][Progress:=>                            4%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            5%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          10%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][MASTER] 09:51:46.242 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       20%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       21%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:=========================>         74%][Progress:======>                       22%] [Cov:==========================>        75%][Progress:======>                       22%] [Cov:==========================>        75%][Progress:======>                       22%] [Cov:==========================>        75%][Progress:======>                       22%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     28%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        75%][Progress:========>                     29%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    33%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:===============>              50%] [Cov:==========================>        75%][Progress:===============>              50%] [Cov:==========================>        75%][Progress:===============>              50%] [Cov:==========================>        75%][Progress:===============>              50%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:===============>              51%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:====================>         69%] [Cov:==========================>        75%][Progress:=====================>        70%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:=====================>        73%] [Cov:==========================>        75%][Progress:======================>       76%] [Cov:==========================>        75%][Progress:======================>       76%] [Cov:==========================>        75%][Progress:=======================>      79%] [Cov:==========================>        75%][Progress:=======================>      79%] [Cov:==========================>        75%][Progress:=======================>      79%] [Cov:==========================>        75%][Progress:========================>     80%] [Cov:==========================>        75%][Progress:========================>     80%] [Cov:==========================>        75%][Progress:========================>     80%] [Cov:==========================>        75%][Progress:========================>     80%] [Cov:==========================>        75%][Progress:========================>     80%] [Cov:==========================>        75%][Progress:========================>     83%] [Cov:==========================>        75%][Progress:========================>     83%] [Cov:==========================>        75%][Progress:=========================>    86%] [Cov:==========================>        75%][Progress:=========================>    86%] [Cov:==========================>        75%][Progress:=========================>    86%] [Cov:==========================>        75%][Progress:==========================>   89%] [Cov:==========================>        75%][Progress:==========================>   89%] [Cov:==========================>        75%][Progress:==========================>   89%] [Cov:==========================>        75%][Progress:==========================>   89%] [Cov:==========================>        75%][Progress:===========================>  90%] [Cov:==========================>        75%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:============================> 94%] [Cov:==========================>        76%][Progress:============================> 94%] [Cov:==========================>        76%][Progress:============================> 94%] [Cov:==========================>        76%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%]
* Search finished after 104s and 286 generations, 82832 statements, best individual has fitness: 219.0
* Generated before the refinement 68 tests with total length 282
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int number = 10;
        String name = "John Doe";
        char initial = 'J';
        jSTerm.setNumber(number);
        jSTerm.setName(name);
        jSTerm.setInitial(initial);
    }
}
statement is: // Improved test data
int number = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char initial = 'J', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: jSTerm.setNumber(number), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setNumber(number) target is: jSTerm method is: setNumber(int)
statement is: jSTerm.setName(name), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setName(name) target is: jSTerm method is: setName(java.lang.String)
statement is: jSTerm.setInitial(initial), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setInitial(initial) target is: jSTerm method is: setInitial(char)
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'J'
TestCase is: int _int = 10;
String string = "John Doe";
char _char = 'J';

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "j)|nN3%5vnF@C5sk";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("a+b");
        JSTerm jSTerm2 = new JSTerm("c-d");
        jSTerm1.equals(jSTerm2);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("a+b"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("c-d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm2) target is: jSTerm1 method is: equals(JSTerm)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(D7 FHyUy'&Ay%@ ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test input for the JSTerm.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test input for the JSTerm."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a test input for the JSTerm.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?$9X")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("?$9X + 123 - $Y");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("?$9X + 123 - $Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "?$9X + 123 - $Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%wX)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%wX)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("((2 + 3) * 5 - 2)");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        StringReader stringReader2 = new StringReader("(5 > 7)");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        StringReader stringReader3 = new StringReader("((10 / 5) + 2) * (8 - 4)");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
    }
}
statement is: StringReader stringReader1 = new StringReader("((2 + 3) * 5 - 2)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader2 = new StringReader("(5 > 7)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader3 = new StringReader("((10 / 5) + 2) * (8 - 4)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "((2 + 3) * 5 - 2)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(5 > 7)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "((10 / 5) + 2) * (8 - 4)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("182Yc*Rktl&m")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9876543210");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
        StringReader stringReader = new StringReader("abcdefghij");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
        StringReader stringReader = new StringReader("ABCDEFGHIJ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
        StringReader stringReader = new StringReader("1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("9876543210"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: StringReader stringReader = new StringReader("abcdefghij"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: StringReader stringReader = new StringReader("ABCDEFGHIJ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 15
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 21
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "9876543210";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "abcdefghij";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "ABCDEFGHIJ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(-+oR7")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(-+oR7");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(-+oR7"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(-+oR7";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("([12345678901234567890, 2.345, 'abcdefghijklmnopqrstuvwxyz', true], ['a', 'b', 'c'])");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("([12345678901234567890, 2.345, 'abcdefghijklmnopqrstuvwxyz', true], ['a', 'b', 'c'])"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "([12345678901234567890, 2.345, 'abcdefghijklmnopqrstuvwxyz', true], ['a', 'b', 'c'])";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(<1Mo")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(<1Mo");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Replace the primitive values and Strings with more descriptive examples
        StringReader stringReader = new StringReader("(<100Mo");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(<1Mo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Replace the primitive values and Strings with more descriptive examples
StringReader stringReader = new StringReader("(<100Mo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(<1Mo";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(<100Mo";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(+RO")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(+RO");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(-90.5 degrees, 34.2 meters)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(-90.5 degrees, 34.2 meters)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(-90.5 degrees, 34.2 meters)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(+6{ZA")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(+6{ZA");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data
        stringReader = new StringReader("(1234567890 + 9876543210)");
        streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: // Improved test data
stringReader = new StringReader("(1234567890 + 9876543210)"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(YqJF$IlicTl")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(YqJF$IlicTl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("M")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: listIterator()Ljava/util/ListIterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.ListIterator<E>
statement code is: ListIterator listIterator = jSTerm.listIterator()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        ListIterator<Integer> listIterator = jSTerm.listIterator();
        jSTerm.makeEval(true);
        jSTerm.addElement(listIterator);
        jSTerm.print();
        // Test data for a list with multiple elements
        JSTerm jSTerm2 = new JSTerm();
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
        ListIterator<Integer> listIterator2 = list.listIterator();
        jSTerm2.makeEval(true);
        jSTerm2.addElement(listIterator2);
        jSTerm2.print();
        // Test data for a list with a single element
        JSTerm jSTerm3 = new JSTerm();
        List<Integer> list3 = Arrays.asList(10);
        ListIterator<Integer> listIterator3 = list3.listIterator();
        jSTerm3.makeEval(true);
        jSTerm3.addElement(listIterator3);
        jSTerm3.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ListIterator<Integer> listIterator = jSTerm.listIterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.listIterator() target is: jSTerm method is: listIterator()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: listIterator()Ljava/util/ListIterator;
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.addElement(listIterator), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(listIterator) target is: jSTerm method is: addElement(ListIterator)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
statement is: // Test data for a list with multiple elements
JSTerm jSTerm2 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: List<Integer> list = Arrays.asList(1, 2, 3, 4, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(1, 2, 3, 4, 5) target is: Arrays method is: asList(int,int,int,int,int)
statement is: ListIterator<Integer> listIterator2 = list.listIterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: list.listIterator() target is: list method is: listIterator()
statement is: jSTerm2.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeEval(true) target is: jSTerm2 method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 6
Matched Method is: makeEval(Z)V
statement is: jSTerm2.addElement(listIterator2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.addElement(listIterator2) target is: jSTerm2 method is: addElement(ListIterator)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 6
Matched Method is: addElement(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: jSTerm2.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.print() target is: jSTerm2 method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 6
Matched Method is: print()V
statement is: // Test data for a list with a single element
JSTerm jSTerm3 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: List<Integer> list3 = Arrays.asList(10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(10) target is: Arrays method is: asList(int)
statement is: ListIterator<Integer> listIterator3 = list3.listIterator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: list3.listIterator() target is: list3 method is: listIterator()
statement is: jSTerm3.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.makeEval(true) target is: jSTerm3 method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 12
Matched Method is: makeEval(Z)V
statement is: jSTerm3.addElement(listIterator3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.addElement(listIterator3) target is: jSTerm3 method is: addElement(ListIterator)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 12
Matched Method is: addElement(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: jSTerm3.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.print() target is: jSTerm3 method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 12
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
jSTerm.addElement(listIterator);
jSTerm.print();
JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
ListIterator listIterator = null;
jSTerm.addElement(listIterator);
jSTerm.print();
JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
ListIterator listIterator = null;
jSTerm.addElement(listIterator);
jSTerm.print();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("oC0")
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("oC0")
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC0");
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("oC0");
        jSTerm.addElement("oC1");
        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("oC0"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("oC0") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.addElement("oC1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("oC1") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "oC0";
jSTerm.addElement(string);
String string = "oC1";
jSTerm.addElement(string);
jSTerm.print();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// Primitive value: 5

        double y = 3.14;// Primitive value: 3.14

        String z = "hello";// String: "hello"

        char c = 'c';// Char: 'c' }}

    }
}
statement is: int x = 5// Primitive value: 5
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// Primitive value: 3.14
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "hello"// String: "hello"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'c'// Char: 'c' }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'c'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "hello";
char _char = 'c';

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(39)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.setSize(2147483647);// using maximum value for demonstration purposes

        jSTerm.cloneT();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(2147483647)// using maximum value for demonstration purposes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(2147483647)// using maximum value for demonstration purposes
 target is: jSTerm method is: setSize(int)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: setSize(I)V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
int _int = Integer.MAX_VALUE;
jSTerm.setSize(_int);
jSTerm.cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(")
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("(");
        jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("("), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(";
jSTerm.addElement(string);
JSSubstitution jSSubstitution = null;
jSTerm.applySubstitutionT(jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(2658)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm(10, 2658);
        JSSubstitution jSSubstitution = new JSSubstitution("RSA", "CAESAR");
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm(10, 2658), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution("RSA", "CAESAR"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("182Yc*Rktl&m")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("")
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("This is a test string");
        JSSubstitution matches = jSTerm.matches("This is a test string");
        assertEquals(matches, "This is a test string");
        jSTerm.addElement(1);
        JSSubstitution matches = jSTerm.matches(1);
        assertEquals(matches, 1);
        jSTerm.addElement(2.0);
        JSSubstitution matches = jSTerm.matches(2.0);
        assertEquals(matches, 2.0);
        jSTerm.addElement('c');
        JSSubstitution matches = jSTerm.matches('c');
        assertEquals(matches, 'c');
    }
}
statement is: JSTerm jSTerm = new JSTerm("This is a test string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches("This is a test string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches("This is a test string") target is: jSTerm method is: matches(java.lang.String)
statement is: assertEquals(matches, "This is a test string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(matches, "This is a test string") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: jSTerm.addElement(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(1) target is: jSTerm method is: addElement(int)
statement is: JSSubstitution matches = jSTerm.matches(1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(1) target is: jSTerm method is: matches(int)
statement is: assertEquals(matches, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(matches, 1) target is:  method is: assertEquals(<unknown>,int)
statement is: jSTerm.addElement(2.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(2.0) target is: jSTerm method is: addElement(double)
statement is: JSSubstitution matches = jSTerm.matches(2.0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(2.0) target is: jSTerm method is: matches(double)
statement is: assertEquals(matches, 2.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(matches, 2.0) target is:  method is: assertEquals(<unknown>,double)
statement is: jSTerm.addElement('c'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement('c') target is: jSTerm method is: addElement(char)
statement is: JSSubstitution matches = jSTerm.matches('c'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches('c') target is: jSTerm method is: matches(char)
statement is: assertEquals(matches, 'c'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(matches, 'c') target is:  method is: assertEquals(<unknown>,char)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("Java");
        JSTerm call = jSTerm.call();
        jSTerm.matches(call);
        JSTerm jSTerm2 = new JSTerm("JavaScript");
        JSTerm call2 = jSTerm2.call();
        jSTerm2.matches(call2);
    }
}
statement is: JSTerm jSTerm = new JSTerm("Java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: jSTerm.matches(call), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(call) target is: jSTerm method is: matches(JSTerm)
statement is: JSTerm jSTerm2 = new JSTerm("JavaScript"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm call2 = jSTerm2.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.call() target is: jSTerm2 method is: call()
statement is: jSTerm2.matches(call2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.matches(call2) target is: jSTerm2 method is: matches(JSTerm)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("yqjf8i")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("Hello World");
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement(jSTerm);
        JSTerm call = jSTerm.call();
        jSTerm.matches(true);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("Hello World"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("Hello World") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: jSTerm.matches(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(true) target is: jSTerm method is: matches(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "Hello World";
jSTerm.addElement(string);
String string = "The quick brown fox jumps over the lazy dog";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
boolean _boolean = true;
jSTerm.matches((JSTerm) _boolean);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with multiple words.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer);
        jSTerm1.equals(jSTerm2);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with multiple words."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm2) target is: jSTerm1 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 4
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "This is a test string with multiple words.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("x");
        JSTerm jSTerm2 = new JSTerm("y");
        JSTerm jSTerm3 = new JSTerm("z");
        jSTerm1.equals(jSTerm2);// returns false

        jSTerm1.equals(jSTerm3);// returns false

        jSTerm2.equals(jSTerm3);// returns true }}

    }
}
statement is: JSTerm jSTerm1 = new JSTerm("x"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm("z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm2)// returns false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm2)// returns false
 target is: jSTerm1 method is: equals(JSTerm)
statement is: jSTerm1.equals(jSTerm3)// returns false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm3)// returns false
 target is: jSTerm1 method is: equals(JSTerm)
statement is: jSTerm2.equals(jSTerm3)// returns true }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.equals(jSTerm3)// returns true }}
 target is: jSTerm2 method is: equals(JSTerm)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("w{DV;qL`qGZ")
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
JSTerm call = jSTerm.call();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(call);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("w{DV;qL`qGZ");
        JSTerm call = jSTerm.call();
        JSTerm jSTerm = new JSTerm();
        jSTerm.equals(call);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("w{DV;qL`qGZ"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("w{DV;qL`qGZ") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(call), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(call) target is: jSTerm method is: equals(JSTerm)
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "w{DV;qL`qGZ";
jSTerm.addElement(string);
jSTerm.call();
JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("M")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("M")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("M");
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm jSTerm1 = new JSTerm("M");
        StringReader stringReader1 = new StringReader("M");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
        jSTerm2.addElement(jSTerm2);
        JSTerm call1 = jSTerm2.call();
        jSTerm2.equals(call1);
    }
}
statement is: // Improved test data
JSTerm jSTerm1 = new JSTerm("M"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader1 = new StringReader("M"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.addElement(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.addElement(jSTerm2) target is: jSTerm2 method is: addElement(JSTerm)
statement is: JSTerm call1 = jSTerm2.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.call() target is: jSTerm2 method is: call()
statement is: jSTerm2.equals(call1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.equals(call1) target is: jSTerm2 method is: equals(JSTerm)
TestCase is: String string = "M";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "M";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        jSTerm.makeVariable();// This line of code creates a variable in the JS context, but it does not have any value assigned to it.

        jSTerm.toStr();// This line of code converts the value of the variable created earlier to a string and prints it to the console. }}

    }
}
statement is: jSTerm.makeVariable()// This line of code creates a variable in the JS context, but it does not have any value assigned to it.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable()// This line of code creates a variable in the JS context, but it does not have any value assigned to it.
 target is: jSTerm method is: makeVariable()
statement is: jSTerm.toStr()// This line of code converts the value of the variable created earlier to a string and prints it to the console. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr()// This line of code converts the value of the variable created earlier to a string and prints it to the console. }}
 target is: jSTerm method is: toStr()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("0")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9876543210");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("9876543210"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "9876543210";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before:
        int primitiveValue = 42;
        String stringValue = "Hello World!";
        char charValue = 'A';
        double doubleValue = 3.14;
        boolean boolValue = true;
        float floatValue = 10.5F;
        long longValue = 9876543210L;
        short shortValue = 1234;
        byte byteValue = 0xa;
        Object referenceValue = new Object();
        // After:
        int primitiveValue = 10;// Changed to a more descriptive value

        String stringValue = "This is a test string";// Added more context to the string value

        char charValue = 'z';// Changed to a more unusual character

        double doubleValue = 3.141592653589793;// Increased the precision of the floating-point number

        boolean boolValue = false;// Changed to a more representative value

        float floatValue = 0.5F;// Decreased the magnitude of the floating-point number

        long longValue = -123456789L;// Negative values are more common in real-world scenarios

        short shortValue = ((short) (0xffff));// Using a maximum value to test boundaries

        byte byteValue = ((byte) (0xff));// Using a maximum value to test boundaries

        Object referenceValue = new Object();// Added an object to represent a reference type }}

    }
}
statement is: // Before:
int primitiveValue = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean boolValue = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: float floatValue = 10.5F, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: long longValue = 9876543210L, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: short shortValue = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: byte byteValue = 0xa, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Object referenceValue = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // After:
int primitiveValue = 10// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "This is a test string"// Added more context to the string value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'z'// Changed to a more unusual character
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.141592653589793// Increased the precision of the floating-point number
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean boolValue = false// Changed to a more representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: float floatValue = 0.5F// Decreased the magnitude of the floating-point number
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: long longValue = -123456789L// Negative values are more common in real-world scenarios
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -123456789L
statement is: short shortValue = ((short) (0xffff))// Using a maximum value to test boundaries
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: byte byteValue = ((byte) (0xff))// Using a maximum value to test boundaries
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Object referenceValue = new Object()// Added an object to represent a reference type }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: int _int = 42
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: char _char = 'A'
* this is vulnerable: double _double = 3.14
* this is vulnerable: boolean _boolean = true
* this is vulnerable: float _float = 10.5F
* this is vulnerable: long _long = 9876543210L
* this is vulnerable: int _int = 1234
* this is vulnerable: int _int = 10
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: char _char = 'z'
* this is vulnerable: double _double = 3.141592653589793
* this is vulnerable: boolean _boolean = false
* this is vulnerable: float _float = 0.5F
* this is vulnerable: int _int = 65535
* this is vulnerable: int _int = 255
TestCase is: int _int = 42;
String string = "Hello World!";
char _char = 'A';
double _double = 3.14;
boolean _boolean = true;
float _float = 10.5F;
long _long = 9876543210L;
int _int = 1234;
int _int = 10;
int _int = 10;
String string = "This is a test string";
char _char = 'z';
double _double = 3.141592653589793;
boolean _boolean = false;
float _float = 0.5F;
int _int = 65535;
int _int = 255;

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(94)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(94);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.setSize(314);
        jSTerm.toStr();
        // This test case is used to check if the term's size is converted correctly to a string.
        assertEquals("The term's size is 314", jSTerm.toStr());
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(314), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(314) target is: jSTerm method is: setSize(int)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: setSize(I)V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: toStr()Ljava/lang/StringBuffer;
statement is: // This test case is used to check if the term's size is converted correctly to a string.
assertEquals("The term's size is 314", jSTerm.toStr()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // This test case is used to check if the term's size is converted correctly to a string.
assertEquals("The term's size is 314", jSTerm.toStr()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: JSTerm jSTerm = new JSTerm();
int _int = 314;
jSTerm.setSize(_int);
jSTerm.toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" . ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader(" . ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test sentence.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test sentence."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "This is a test sentence.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm(TermType.VARIABLE, "x");
        jSTerm2 = new JSTerm(TermType.VARIABLE, "y");
        jSTerm3 = new JSTerm(TermType.CONSTANT, 42);
        jSTerm4 = new JSTerm(TermType.CONSTANT, 1337);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm(TermType.VARIABLE, "x"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2 = new JSTerm(TermType.VARIABLE, "y"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jSTerm3 = new JSTerm(TermType.CONSTANT, 42), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jSTerm4 = new JSTerm(TermType.CONSTANT, 1337), class spoon.support.reflect.code.CtAssignmentImpl
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("yqjf8i")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("This is a test sentence.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement(jSTerm);
        jSTerm.isGround();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("This is a test sentence."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isGround()Z
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "This is a test sentence.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("yqjf8i")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("Hello");
        StringReader stringReader = new StringReader("World");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.addElement(jSTerm);
        jSTerm.isGround();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("Hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("Hello") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: StringReader stringReader = new StringReader("World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 6
Matched Method is: makeVariable()V
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isGround()Z
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "Hello";
jSTerm.addElement(string);
String string = "World";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Alice@gmail.com");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("Alice@gmail.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "Alice@gmail.com";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("example");// Replace "example" with a more descriptive term

        jSTerm.addElement(new JSTerm("child"));
        jSTerm.standardizerTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm("example")// Replace "example" with a more descriptive term
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(new JSTerm("child")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(new JSTerm("child")) target is: jSTerm method is: addElement(JSTerm)
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(35)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int size = 35;
        String term = "standardized";
    }
}
statement is: int size = 35, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String term = "standardized", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 35
* this is vulnerable: String string = "standardized"
TestCase is: int _int = 35;
String string = "standardized";

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("abc");
        jSTerm.call(10);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("abc"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("abc") target is: jSTerm method is: makeVariable(java.lang.String)
statement is: jSTerm.call(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call(10) target is: jSTerm method is: call(int)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("-")
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.addElement("-");
        jSTerm.call();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.addElement("-"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("-") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
String string = "-";
jSTerm.addElement(string);
jSTerm.call();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("John");
        JSTerm jSTerm2 = new JSTerm("Jane");
        jSTerm1.makeConstant();
        jSTerm2.makeVariable();
        assertFalse(jSTerm1.equals(jSTerm2));
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("John"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("Jane"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeConstant() target is: jSTerm1 method is: makeConstant()
statement is: jSTerm2.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeVariable() target is: jSTerm2 method is: makeVariable()
statement is: assertFalse(jSTerm1.equals(jSTerm2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(jSTerm1.equals(jSTerm2)) target is:  method is: assertFalse(<unknown>)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        JSTerm jSTerm = new JSTerm();
        // Act
        boolean result = jSTerm.isEval();
        // Assert
        assertTrue(result);
    }
}
statement is: // Arrange
JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Act
boolean result = jSTerm.isEval(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isEval()Z
statement is: // Assert
assertTrue(result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertTrue(result) target is:  method is: assertTrue(boolean)
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("min")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("minimum");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isConstant();
    }
}
statement is: StringReader stringReader = new StringReader("minimum"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant() target is: jSTerm method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isConstant()Z
TestCase is: String string = "minimum";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isVariable("var_name1");
        jSTerm.isVariable("let_name2");
        jSTerm.isVariable("const_name3");
        jSTerm.isVariable(null);
        jSTerm.isVariable(undefined);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isVariable("var_name1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable("var_name1") target is: jSTerm method is: isVariable(java.lang.String)
statement is: jSTerm.isVariable("let_name2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable("let_name2") target is: jSTerm method is: isVariable(java.lang.String)
statement is: jSTerm.isVariable("const_name3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable("const_name3") target is: jSTerm method is: isVariable(java.lang.String)
statement is: jSTerm.isVariable(null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable(null) target is: jSTerm method is: isVariable(<unknown>)
statement is: jSTerm.isVariable(undefined), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable(undefined) target is: jSTerm method is: isVariable()
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isFunction(true);// Passing true to indicate that the term is a function }}

    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isFunction(true)// Passing true to indicate that the term is a function }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isFunction(true)// Passing true to indicate that the term is a function }}
 target is: jSTerm method is: isFunction(boolean)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/ ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("/ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test input for the JSTerm class");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test input for the JSTerm class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a test input for the JSTerm class";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: StringReader stringReader = new StringReader("");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("[100, 200, 300, 400, 500]");
        JSTerm jSTerm = new JSTerm();
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("[100, 200, 300, 400, 500]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 1, type umd.cs.shop.JSTermindex is: 2
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "[100, 200, 300, 400, 500]";
StringReader stringReader = new StringReader(string);
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((JSTerm) stringReader).parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(")")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("(1 2 3)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("(1 2 3)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(1 2 3)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Expecting Term")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Expecting Term");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.cloneT();
        // Improved test data:
        StringReader stringReader = new StringReader("Expecting Term with ID 1234");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("Expecting Term"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
statement is: // Improved test data:
StringReader stringReader = new StringReader("Expecting Term with ID 1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 8
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "Expecting Term";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();
String string = "Expecting Term with ID 1234";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("John Smith");
        StringReader stringReader = new StringReader("A");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm("John Smith"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "John Smith";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "A";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) stringReader).matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;
        double y = 3.14;
        String name = "John";
        char gender = 'M';
        boolean isAdmin = true;
    }
}
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'M', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isAdmin = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "John"
* this is vulnerable: char _char = 'M'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 5;
double _double = 3.14;
String string = "John";
char _char = 'M';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("min")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("minute");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("minute"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "minute";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("eBv@tgzAQ{TH&")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: JSSubstitution jSSubstitution = new JSSubstitution();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(")
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(call, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("a");
        JSTerm call = jSTerm.call();
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm2 = new JSTerm();
        jSTerm2.matches(call, jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("a"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("a") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.matches(call, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.matches(call, jSSubstitution) target is: jSTerm2 method is: matches(JSTerm,JSSubstitution)
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "a";
jSTerm.addElement(string);
jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("yqjf8i")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("Hello World");
        StringReader stringReader = new StringReader("yqjf8i");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement("This is a test message");
        JSTerm call = jSTerm.call();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(call, jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm("Hello World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("yqjf8i"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("This is a test message"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("This is a test message") target is: jSTerm method is: addElement(java.lang.String)
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(call, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(call, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: String string = "Hello World";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "yqjf8i";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("a");
        JSTerm jSTerm2 = new JSTerm("b");
        jSTerm1.equals(jSTerm2);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("b"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm2) target is: jSTerm1 method is: equals(JSTerm)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("min")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("calculateMinimum");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("calculateMinimum"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "calculateMinimum";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.makeEval(true);
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "Wa%*uj*[wS]1?t";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("eBv@tgzAQ{TH&")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution("H");
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution("H"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("pn")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("pn");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("example-string");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("example-string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "example-string";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isConstant(true);// true if term is constant

        jSTerm.isConstant(false);// false if term is not constant

        jSTerm.isConstant("constant");// true if term is a string containing "constant"

        jSTerm.isConstant(10);// true if term is an integer equal to 10 }}

    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(true)// true if term is constant
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant(true)// true if term is constant
 target is: jSTerm method is: isConstant(boolean)
statement is: jSTerm.isConstant(false)// false if term is not constant
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant(false)// false if term is not constant
 target is: jSTerm method is: isConstant(boolean)
statement is: jSTerm.isConstant("constant")// true if term is a string containing "constant"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant("constant")// true if term is a string containing "constant"
 target is: jSTerm method is: isConstant(java.lang.String)
statement is: jSTerm.isConstant(10)// true if term is an integer equal to 10 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant(10)// true if term is an integer equal to 10 }}
 target is: jSTerm method is: isConstant(int)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("min")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.isFunction();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.isFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isFunction() target is: jSTerm method is: isFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isFunction()Z
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).isFunction();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("π");
        assertTrue(jSTerm.isVariable());
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("π"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("π") target is: jSTerm method is: makeVariable(java.lang.String)
statement is: assertTrue(jSTerm.isVariable()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm.isVariable()) target is:  method is: assertTrue(<unknown>)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("")
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("10");
        jSTerm.makeVariable();
        jSTerm.standardizerTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("10"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("10") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeVariable()V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "10";
jSTerm.addElement(string);
jSTerm.makeVariable();
jSTerm.standardizerTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("pn")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("pn");
jSTerm.add((Object) jSTerm);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("John");
        jSTerm.add(((Object) ("John")));
        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("John") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.add(((Object) ("John"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) ("John"))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "John";
jSTerm.addElement(string);
String string = "John";
jSTerm.add((Object) string);
jSTerm.print();

* test suite isTestSuite: 123
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%wX)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 9: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("(+RO");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("(+6{ZA");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
StringReader stringReader = new StringReader("(YqJF$IlicTl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 15: 
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 16: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
Test 17: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC0");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 19: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 21: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 22: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 23: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 24: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 25: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 26: 
StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 27: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 28: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
JSTerm call = jSTerm.call();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(call);
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("M");
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 31: 
StringReader stringReader = new StringReader("0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(94);
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 34: 
StringReader stringReader = new StringReader(" . ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 38: 
StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 45: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 48: 
StringReader stringReader = new StringReader("/ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 49: 
StringReader stringReader = new StringReader("");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 50: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 51: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 52: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 53: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 54: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 55: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(call, jSSubstitution);
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 59: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 60: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);
Test 61: 
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 62: 
StringReader stringReader = new StringReader("pn");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 63: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 64: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 65: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 67: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("pn");
jSTerm.add((Object) jSTerm);
jSTerm.print();
Test 68: 

Test 69: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 70: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("This is a test input for the JSTerm.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X + 123 - $Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 73: 
StringReader stringReader = new StringReader("((2 + 3) * 5 - 2)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(5 > 7)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "((10 / 5) + 2) * (8 - 4)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 74: 
StringReader stringReader = new StringReader("9876543210");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "abcdefghij";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "ABCDEFGHIJ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 75: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 76: 
StringReader stringReader = new StringReader("([12345678901234567890, 2.345, 'abcdefghijklmnopqrstuvwxyz', true], ['a', 'b', 'c'])");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);

Test 77: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(<100Mo";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 78: 
StringReader stringReader = new StringReader("(-90.5 degrees, 34.2 meters)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 79: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 80: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement((Object) null);
jSTerm.print();
JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
ListIterator listIterator = null;
jSTerm.addElement(listIterator);
jSTerm.print();

Test 81: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC1");
jSTerm.print();

Test 82: 

Test 83: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(Integer.MAX_VALUE);
jSTerm.cloneT();

Test 84: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
jSTerm.applySubstitutionT((JSSubstitution) null);

Test 85: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 86: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Hello World");
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
jSTerm.matches((JSTerm) true);

Test 87: 
StringReader stringReader = new StringReader("This is a test string with multiple words.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 88: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
jSTerm.call();
JSTerm jSTerm = new JSTerm();

Test 89: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "M");
String string = "M";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 90: 
StringReader stringReader = new StringReader("9876543210");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

Test 91: 

Test 92: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(314);
jSTerm.toStr();

Test 93: 
StringReader stringReader = new StringReader("This is a test sentence.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 94: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("This is a test sentence.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();

Test 95: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Hello");
StringReader stringReader = new StringReader("World");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();

Test 96: 
StringReader stringReader = new StringReader("Alice@gmail.com");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

Test 97: 

Test 98: 
JSTerm jSTerm = new JSTerm();

Test 99: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
jSTerm.call();

Test 100: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

Test 101: 
StringReader stringReader = new StringReader("minimum");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 102: 
JSTerm jSTerm = new JSTerm();

Test 103: 
JSTerm jSTerm = new JSTerm();

Test 104: 
StringReader stringReader = new StringReader("This is a test input for the JSTerm class");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 105: 
StringReader stringReader = new StringReader("[100, 200, 300, 400, 500]");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((JSTerm) stringReader).parseList(streamTokenizer);

Test 106: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(1 2 3)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 107: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();
String string = "Expecting Term with ID 1234";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

Test 108: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "John Smith");
String string = "A";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) stringReader).matches(jSTerm, jSSubstitution);

Test 109: 

Test 110: 
StringReader stringReader = new StringReader("minute");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 111: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 112: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("a");
jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();

Test 113: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "Hello World");
String string = "yqjf8i";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 114: 
StringReader stringReader = new StringReader("calculateMinimum");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();

Test 115: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 116: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 117: 
StringReader stringReader = new StringReader("example-string");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

Test 118: 
JSTerm jSTerm = new JSTerm();

Test 119: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).isFunction();

Test 120: 
JSTerm jSTerm = new JSTerm();

Test 121: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("10");
jSTerm.makeVariable();
jSTerm.standardizerTerm();

Test 122: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("John");
jSTerm.add((Object) "John");
jSTerm.print();


* Generated after the refinement and before minimization 123 tests with total length 527
* test suite isTestSuite: 123
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%wX)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 9: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("(+RO");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("(+6{ZA");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
StringReader stringReader = new StringReader("(YqJF$IlicTl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 15: 
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 16: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
Test 17: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC0");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 19: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 21: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 22: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 23: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 24: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 25: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 26: 
StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 27: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 28: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
JSTerm call = jSTerm.call();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(call);
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("M");
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 31: 
StringReader stringReader = new StringReader("0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(94);
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 34: 
StringReader stringReader = new StringReader(" . ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 38: 
StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 45: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 48: 
StringReader stringReader = new StringReader("/ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 49: 
StringReader stringReader = new StringReader("");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 50: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 51: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 52: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 53: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 54: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 55: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(call, jSSubstitution);
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 59: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 60: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);
Test 61: 
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 62: 
StringReader stringReader = new StringReader("pn");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 63: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 64: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 65: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 67: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("pn");
jSTerm.add((Object) jSTerm);
jSTerm.print();
Test 68: 

Test 69: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 70: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("This is a test input for the JSTerm.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X + 123 - $Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 73: 
StringReader stringReader = new StringReader("((2 + 3) * 5 - 2)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(5 > 7)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "((10 / 5) + 2) * (8 - 4)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 74: 
StringReader stringReader = new StringReader("9876543210");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "abcdefghij";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "ABCDEFGHIJ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 75: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 76: 
StringReader stringReader = new StringReader("([12345678901234567890, 2.345, 'abcdefghijklmnopqrstuvwxyz', true], ['a', 'b', 'c'])");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);

Test 77: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(<100Mo";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 78: 
StringReader stringReader = new StringReader("(-90.5 degrees, 34.2 meters)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 79: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 80: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement((Object) null);
jSTerm.print();
JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
ListIterator listIterator = null;
jSTerm.addElement(listIterator);
jSTerm.print();

Test 81: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC1");
jSTerm.print();

Test 82: 

Test 83: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(Integer.MAX_VALUE);
jSTerm.cloneT();

Test 84: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
jSTerm.applySubstitutionT((JSSubstitution) null);

Test 85: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 86: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Hello World");
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
jSTerm.matches((JSTerm) true);

Test 87: 
StringReader stringReader = new StringReader("This is a test string with multiple words.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 88: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
jSTerm.call();
JSTerm jSTerm = new JSTerm();

Test 89: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "M");
String string = "M";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 90: 
StringReader stringReader = new StringReader("9876543210");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

Test 91: 

Test 92: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(314);
jSTerm.toStr();

Test 93: 
StringReader stringReader = new StringReader("This is a test sentence.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 94: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("This is a test sentence.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();

Test 95: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Hello");
StringReader stringReader = new StringReader("World");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();

Test 96: 
StringReader stringReader = new StringReader("Alice@gmail.com");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

Test 97: 

Test 98: 
JSTerm jSTerm = new JSTerm();

Test 99: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
jSTerm.call();

Test 100: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

Test 101: 
StringReader stringReader = new StringReader("minimum");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 102: 
JSTerm jSTerm = new JSTerm();

Test 103: 
JSTerm jSTerm = new JSTerm();

Test 104: 
StringReader stringReader = new StringReader("This is a test input for the JSTerm class");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 105: 
StringReader stringReader = new StringReader("[100, 200, 300, 400, 500]");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((JSTerm) stringReader).parseList(streamTokenizer);

Test 106: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(1 2 3)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 107: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();
String string = "Expecting Term with ID 1234";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

Test 108: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "John Smith");
String string = "A";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) stringReader).matches(jSTerm, jSSubstitution);

Test 109: 

Test 110: 
StringReader stringReader = new StringReader("minute");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 111: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 112: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("a");
jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();

Test 113: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "Hello World");
String string = "yqjf8i";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 114: 
StringReader stringReader = new StringReader("calculateMinimum");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).call();

Test 115: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 116: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 117: 
StringReader stringReader = new StringReader("example-string");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

Test 118: 
JSTerm jSTerm = new JSTerm();

Test 119: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).isFunction();

Test 120: 
JSTerm jSTerm = new JSTerm();

Test 121: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("10");
jSTerm.makeVariable();
jSTerm.standardizerTerm();

Test 122: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("John");
jSTerm.add((Object) "John");
jSTerm.print();


* Minimizing test suite
* test suite isTestSuite: 67
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 2: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 3: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 4: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("%wX)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 8: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(+RO");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("(-90.5 degrees, 34.2 meters)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("(YqJF$IlicTl");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 15: 
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 16: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
Test 17: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.addElement(listIterator);
jSTerm.addElement((Object) null);
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 18: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 19: 
StringReader stringReader = new StringReader("pn");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 21: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 22: 
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 23: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
jSTerm.applySubstitutionT((JSSubstitution) null);
Test 24: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 25: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 26: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 27: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 28: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 29: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 31: 
StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
JSTerm call = jSTerm.call();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(call);
Test 34: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("M");
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 36: 
StringReader stringReader = new StringReader("0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 38: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(314);
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 39: 
StringReader stringReader = new StringReader(" . ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 43: 
StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 48: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 49: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 50: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 51: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 53: 
StringReader stringReader = new StringReader("/ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 54: 
StringReader stringReader = new StringReader("");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 55: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 56: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 57: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 58: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 59: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(call, jSSubstitution);
Test 60: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 61: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 62: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 63: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);
Test 64: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 65: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 192
* Number of covered goals: 144
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 318
* Number of covered goals: 239
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 64%
* Total number of goals: 123
* Number of covered goals: 79
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 192
* Number of covered goals: 144
* Generated 67 tests with total length 278
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 47%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean eval = jSTerm.isEval();
assertFalse(eval);


** It was a parseable test case! 
refined test name is: testIsEvalReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testUninitializedVectorThrowsException
* Compiling Tests
refined test name is: testPrintUninitializedVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
boolean equals = arg0.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsSameInstance
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
ListIterator arg0 = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(arg0);
jSTerm.print();
assertTrue(jSTerm.isEval());


** It was a parseable test case! 
refined test name is: testEvalFlagIsSetCorrectly
* Compiling Tests
refined test name is: testJSTermEvaluation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
ListIterator arg0 = jSTerm.listIterator();
jSTerm.addElement(arg0);
jSTerm.addElement((Object) null);
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testPrintWithNullElement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.addElement(arg0);
JSTerm cloneT = arg0.cloneT();
assertFalse(cloneT.isConstant());
assertFalse(cloneT.isVariable());
assertTrue(cloneT.isFunction());


** It was a parseable test case! 
refined test name is: testCloneOfJSTermWithFunctionValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testCloningJSTerm
* Compiling Tests
refined test name is: testCloneJSTerm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm applySubstitutionT = jSTerm.applySubstitutionT((JSSubstitution) null);
assertFalse(applySubstitutionT.isVariable());
assertFalse(applySubstitutionT.isEval());
assertTrue(applySubstitutionT.isFunction());
assertFalse(applySubstitutionT.isConstant());


** It was a parseable test case! 
refined test name is: testApplySubstitutionT
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution arg0 = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(arg0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testApplySubstitutionTThrowsNullPointerException
* Compiling Tests
refined test name is: testApplySubstitutionTthrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm arg0 = new JSTerm();
boolean equals = jSTerm.equals(arg0);
assertTrue(jSTerm.isVariable());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentObjects
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testToStrThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.addElement(arg0);
StringBuffer str = arg0.toStr();
assertEquals(22, str.length());


** It was a parseable test case! 
refined test name is: testJSTermConstructorAndAddElement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(314);
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testToStrWithNullSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
boolean ground = jSTerm.isGround();
assertTrue(jSTerm.isVariable());
assertFalse(ground);


** It was a parseable test case! 
refined test name is: testJSTermIsVariableNotGround
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.addElement(arg0);
JSTerm standardizerTerm = arg0.standardizerTerm();
assertFalse(standardizerTerm.isEval());
assertFalse(standardizerTerm.isConstant());
assertTrue(standardizerTerm.isFunction());


** It was a parseable test case! 
refined test name is: testStandardizerTermshouldReturnExpectedTermType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testStandardizerTermWithNullParameter
* Compiling Tests
refined test name is: testStandardizerTermThrowsNPEWhenSizeIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
assertTrue(jSTerm.isVariable());

jSTerm.call();
assertFalse(jSTerm.isFunction());


** It was a parseable test case! 
refined test name is: testMakeVariableAndCallIsVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testInvalidElementAddition
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeConstant();
// Undeclared exception!
try { 
  arg0.equals(arg0);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testEqualsMethodForConstantTerms
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean constant = jSTerm.isConstant();
assertFalse(constant);


** It was a parseable test case! 
refined test name is: testIsNotConstant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean variable = jSTerm.isVariable();
assertFalse(variable);


** It was a parseable test case! 
refined test name is: testJSTermIsNotAVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean function = jSTerm.isFunction();
assertFalse(function);


** It was a parseable test case! 
refined test name is: testIsNotAFunction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
JSSubstitution arg1 = new JSSubstitution();
JSSubstitution matches = arg0.matches(arg0, arg1);
assertTrue(matches.fail());


** It was a parseable test case! 
refined test name is: testJSTermMatchesJSSubstitutionFailure
* Compiling Tests
refined test name is: testMatchesNonMatchingTermsReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeVariable();
// Undeclared exception!
try { 
  arg0.equals(arg0);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testEqualsThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
assertFalse(jSTerm.isFunction());


** It was a parseable test case! 
refined test name is: testIsVariableAndNotFunction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();
assertEquals(1, jSTerm.size());


** It was a parseable test case! 
refined test name is: testJSTermSizeWithOneElement
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:50.576 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:50.597 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:50.635 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:50.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:50.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:50.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
[MASTER] 11:15:50.766 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:50.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:50.837 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:50.838 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:50.899 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:50.900 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:50.951 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:50.952 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:50.999 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.000 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:51.059 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.108 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.156 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.156 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.200 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.201 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.245 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.246 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.287 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.288 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.332 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.333 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:51.381 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.436 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.437 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
[MASTER] 11:15:51.494 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.495 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.543 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.586 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.589 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.649 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.708 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:15:51.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:51.765 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.766 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.834 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.891 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.892 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:15:51.942 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:51.943 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 6 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 15 called: 4 to improve: false
** Write a test suite: 22 called: 5 to improve: false
[MASTER] 11:15:52.489 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:52.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 17 called: 2 to improve: false
** Write a test suite: 19 called: 3 to improve: false
** Write a test suite: 22 called: 4 to improve: false
** Write a test suite: 24 called: 5 to improve: false
[MASTER] 11:15:53.052 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:53.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
[MASTER] 11:15:54.290 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 67
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%wX)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 9: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("(+RO");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("(+6{ZA");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
Test 16: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC0");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 18: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 19: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 21: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 23: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 24: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 25: 
StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 26: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 27: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
JSTerm call = jSTerm.call();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(call);
Test 28: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("M");
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 30: 
StringReader stringReader = new StringReader("0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 31: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(94);
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 33: 
StringReader stringReader = new StringReader(" . ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 34: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 37: 
StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 38: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 44: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 47: 
StringReader stringReader = new StringReader("/ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 48: 
StringReader stringReader = new StringReader("");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 49: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 50: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 51: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 52: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 53: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 54: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 55: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(call, jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 58: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 59: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);
Test 60: 
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 61: 
StringReader stringReader = new StringReader("pn");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 63: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 64: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 65: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("pn");
jSTerm.add((Object) jSTerm);
jSTerm.print();

* Minimizing test suite
* test suite isTestSuite: 67
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 4: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.cloneT();
Test 5: 
StringReader stringReader = new StringReader("%.^CB^3f{6mh]Fg");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("(+RO");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("?$9X");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("%wX)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 10: 
StringReader stringReader = new StringReader("(<1Mo");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(-+oR7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("(D7 FHyUy'&Ay%@ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
StringReader stringReader = new StringReader("(+6{ZA");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 15: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 16: 
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 17: 
JSTerm jSTerm = new JSTerm();
ListIterator listIterator = jSTerm.listIterator();
jSTerm.makeEval(true);
jSTerm.addElement(listIterator);
jSTerm.print();
Test 18: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("oC0");
jSTerm.addElement("oC0");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
StringReader stringReader = new StringReader("Expecting Term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 20: 
StringReader stringReader = new StringReader("pn");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 21: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(39);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 22: 
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 23: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 24: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(2658);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 25: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 26: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 27: 
StringReader stringReader = new StringReader("182Yc*Rktl&m");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 28: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 29: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.matches(call);
Test 31: 
StringReader stringReader = new StringReader("eTq*=pxX.Kh-VdSi^K");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("w{DV;qL`qGZ");
JSTerm call = jSTerm.call();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(call);
Test 34: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("M");
StringReader stringReader = new StringReader("M");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.equals(call);
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 36: 
StringReader stringReader = new StringReader("0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.toStr();
Test 38: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(94);
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 39: 
StringReader stringReader = new StringReader(" . ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 43: 
StringReader stringReader = new StringReader("XqPQ@?wn@,T8CN?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.standardizerTerm();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(35);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("-");
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 48: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 49: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 50: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 51: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 52: 
StringReader stringReader = new StringReader("/ ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 53: 
StringReader stringReader = new StringReader("");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 54: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 55: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("eBv@tgzAQ{TH&");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(");
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(call, jSSubstitution);
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
StringReader stringReader = new StringReader("yqjf8i");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 59: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 60: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 61: 
StringReader stringReader = new StringReader("Wa%*uj*[wS]1?t");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);
Test 62: 
StringReader stringReader = new StringReader("min");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 63: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 64: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("j)|nN3%5vnF@C5sk");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 65: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("");
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("pn");
jSTerm.add((Object) jSTerm);
jSTerm.print();

[MASTER] 11:16:40.436 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 74%
* Total number of goals: 192
* Number of covered goals: 143
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 318
* Number of covered goals: 238
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 64%
* Total number of goals: 123
* Number of covered goals: 79
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 74%
* Total number of goals: 192
* Number of covered goals: 143
* Generated 67 tests with total length 279
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:16:40.696 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 46%
* Compiling and checking tests
[MASTER] 11:16:54.494 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.166 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.167 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.368 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:17:00.403 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.404 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.436 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.438 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
[MASTER] 11:17:00.471 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.528 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.529 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.555 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.579 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.580 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.607 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.633 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.634 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.661 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.661 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.687 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.688 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.716 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.744 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.780 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.781 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.821 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.859 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.860 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.899 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.899 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.937 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.940 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:00.980 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:00.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:01.021 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:01.022 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:01.051 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:01.052 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:01.081 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:01.082 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:01.109 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:01.110 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:01.138 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:01.139 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:17:03.072 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:03.073 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
[MASTER] 11:17:05.221 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:05.222 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
[MASTER] 11:17:07.154 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2498870147103764806.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:17:07.155 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2498870147103764806.jar
* Writing tests to file
[MASTER] 11:17:07.156 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'JSTerm_ESTest' to evosuite-tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 17 called: 2 to improve: false
** Write a test suite: 19 called: 3 to improve: false
** Write a test suite: 22 called: 4 to improve: false
** Write a test suite: 24 called: 5 to improve: false
* Writing JUnit test case 'JSTerm_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
* Done!

* Computation finished
