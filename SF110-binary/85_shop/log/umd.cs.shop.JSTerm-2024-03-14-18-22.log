* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSTerm
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 10436
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:22:10.996 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:22:11.011 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:22:11.012 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:22:11.108 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSTerm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 846
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1710440527910
* Starting evolution
* Initial Number of Goals in DynaMOSA = 201 / 846
[Progress:>                             0%] [Cov:===========>                       32%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:==============>                    42%][Progress:>                             2%] [Cov:================>                  46%][Progress:>                             2%] [Cov:================>                  47%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             3%] [Cov:====================>              59%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             61%][Progress:>                             3%] [Cov:=====================>             62%][Progress:>                             3%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            4%] [Cov:=======================>           66%][Progress:=>                            4%] [Cov:=======================>           66%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][MASTER] 18:22:22.745 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          69%][Progress:=>                            6%] [Cov:========================>          69%][Progress:=>                            6%] [Cov:========================>          69%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          70%][Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           7%] [Cov:========================>          71%][MASTER] 18:22:26.581 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           8%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:==>                           9%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          10%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        18%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:==========================>        77%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:======>                       20%] [Cov:===========================>       78%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%]
* Search finished after 206s and 602 generations, 163570 statements, best individual has fitness: 190.0
* Generated before the refinement 66 tests with total length 265
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, matches);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution matches = jSTerm.matches(jSTerm, "variable_name", 10, true);
        JSTerm jSTerm = new JSTerm();
        JSSubstitution matches = jSTerm.matches(jSTerm, matches, "string_value");
        jSTerm.matches(jSTerm, matches, "string_value", 5, false);
    }
}
statement is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, "variable_name", 10, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, "variable_name", 10, true) target is: jSTerm method is: matches(JSTerm,java.lang.String,int,boolean)
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, matches, "string_value"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches, "string_value") target is: jSTerm method is: matches(JSTerm,JSSubstitution,java.lang.String)
statement is: jSTerm.matches(jSTerm, matches, "string_value", 5, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches, "string_value", 5, false) target is: jSTerm method is: matches(JSTerm,JSSubstitution,java.lang.String,int,boolean)
TestCase is: String string = "I=^@~oMs3jdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("IM>@D;n`M1jd)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("IM>@D;n`M1jd)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input string with special characters.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input string with special characters."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "This is a sample input string with special characters.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution matches = jSTerm.matches(jSTerm);
        JSTerm jSTerm = new JSTerm();
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "I=^@~oMs3jdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).matches(jSTerm, matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(>oRuSbOiv$\"*:B`iu")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(>oRuSbOiv$\"*:B`iu");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a longer test string that includes multiple words and punctuation");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("This is a longer test string that includes multiple words and punctuation"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a longer test string that includes multiple words and punctuation";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?h")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?h");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%P-}hB5;'/V>")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%P-}hB5;'/V>");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%%%0")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%%%0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("%%%1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("%%%1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "%%%1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(+4-_8},")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(+4-_8},");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("(-x+_-y},");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("(-x+_-y},"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(-x+_-y},";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("( ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("( ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("( 123.456 )");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("( 123.456 )"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "( 123.456 )";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(-oRoSbOv$\":B`irzu")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(-oRoSbOv$\":B`irzu");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(-oRoSbOv$\":B`irzu");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data
        StringReader improvedStringReader = new StringReader("(-oRoSbOv$\":B`irzu");
        StreamTokenizer improvedStreamTokenizer = new StreamTokenizer(improvedStringReader);
        JSTerm improvedJSTerm = new JSTerm(improvedStreamTokenizer);
        assertEquals(jSTerm.evaluate(), improvedJSTerm.evaluate());
    }
}
statement is: StringReader stringReader = new StringReader("(-oRoSbOv$\":B`irzu"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("(-oRoSbOv$\":B`irzu"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer improvedStreamTokenizer = new StreamTokenizer(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm improvedJSTerm = new JSTerm(improvedStreamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(jSTerm.evaluate(), improvedJSTerm.evaluate()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(jSTerm.evaluate(), improvedJSTerm.evaluate()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: String string = "(-oRoSbOv$\":B`irzu";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(-oRoSbOv$\":B`irzu";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(\")1NK/oJ+^&FM8-WB5")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(\")1NK/oJ+^&FM8-WB5");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(\"1234567890-=qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?~`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(\"1234567890-=qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?~`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(\"1234567890-=qwertyuiop[]\\asdfghjkl;'zxcvbnm,./!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?~`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(oz2N_E")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(oz2N_E");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(oz2N_E");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data:
        StringReader stringReader = new StringReader("(oz2N_E)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(oz2N_E"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
StringReader stringReader = new StringReader("(oz2N_E)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(oz2N_E";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(oz2N_E)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q=^>hoMsjdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("Q=^>hoMsjdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.equals(parseList);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        parseList.equals(parseList);
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: parseList.equals(parseList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.equals(parseList) target is: parseList method is: equals(JSTerm)
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = ((JSTerm) streamTokenizer).parseList(streamTokenizer);
jSTerm.equals(parseList);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int x = 42;
        String y = "Goodbye";
        char z = 'Z';
    }
}
statement is: // Improved test data:
int x = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "Goodbye", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char z = 'Z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: String string = "Goodbye"
* this is vulnerable: char _char = 'Z'
TestCase is: int _int = 42;
String string = "Goodbye";
char _char = 'Z';

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.add((Object) jSTerm);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.add(((Object) (42)));// Add an integer value to the evaluation stack

        jSTerm.add(((Object) (3.14)));// Add a double value to the evaluation stack

        jSTerm.add(((Object) ("Hello, world!")));// Add a string value to the evaluation stack

        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.add(((Object) (42)))// Add an integer value to the evaluation stack
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (42)))// Add an integer value to the evaluation stack
 target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.add(((Object) (3.14)))// Add a double value to the evaluation stack
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (3.14)))// Add a double value to the evaluation stack
 target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.add(((Object) ("Hello, world!")))// Add a string value to the evaluation stack
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) ("Hello, world!")))// Add a string value to the evaluation stack
 target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
int _int = 42;
jSTerm.add((Object) _int);
double _double = 3.14;
jSTerm.add((Object) _double);
String string = "Hello, world!";
jSTerm.add((Object) string);
jSTerm.print();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("Q=^>hoMsjdm)Y")
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("Q=^>hoMsjdm)Y");
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private final List<String> elements = new ArrayList<>();

    public void addElement(String element) {
        this.elements.add(element);
    }

    public void print() {
        for (String element : this.elements) {
            System.out.println(element);
        }
    }
}
statement is: this.elements.add(element), class spoon.support.reflect.code.CtInvocationImpl
invocation is: this.elements.add(element) target is: this.elements method is: add(java.lang.String)
statement is: for (String element : this.elements) {
    System.out.println(element);
}, class spoon.support.reflect.code.CtForEachImpl
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(45)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(45);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Set the size of the term to 50
    }

    public void cloneT() {
        // Clone the term }}
    }
}
statement is: // Clone the term }}, class spoon.support.reflect.code.CtCommentImpl
statement is: // Set the size of the term to 50, class spoon.support.reflect.code.CtCommentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("nil")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("nil");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("nil");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("nil"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "nil";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("I^>@D;~`Msjdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("I^>@D;~`Msjdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
parseList.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("I^>@D;~`Msjdm)Y");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        parseList.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("I^>@D;~`Msjdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parseList.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.applySubstitutionT(jSSubstitution) target is: parseList method is: applySubstitutionT(JSSubstitution)
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "I^>@D;~`Msjdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm parseList = jSTerm.parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
parseList.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        parseList.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parseList.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.matches(jSTerm, jSSubstitution) target is: parseList method is: matches(JSTerm,JSSubstitution)
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "OyR)JIj$<V2t`Ep:tks";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(1)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(cloneT, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int size = 2;
        String term1 = "a";
        String term2 = "b";
        String subst1 = "c";
        String subst2 = "d";
        JSTerm jSTerm = new JSTerm();
        jSTerm.setSize(size);
        jSTerm.setTerms(term1, term2);
        jSTerm.setSubstitutions(subst1, subst2);
        JSTerm cloneT = jSTerm.cloneT();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(cloneT, jSSubstitution);
    }
}
statement is: int size = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String term1 = "a", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String term2 = "b", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String subst1 = "c", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String subst2 = "d", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(size), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(size) target is: jSTerm method is: setSize(int)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 5
Matched Method is: setSize(I)V
statement is: jSTerm.setTerms(term1, term2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setTerms(term1, term2) target is: jSTerm method is: setTerms(java.lang.String,java.lang.String)
statement is: jSTerm.setSubstitutions(subst1, subst2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSubstitutions(subst1, subst2) target is: jSTerm method is: setSubstitutions(java.lang.String,java.lang.String)
statement is: JSTerm cloneT = jSTerm.cloneT(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 5
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(cloneT, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(cloneT, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
* this is vulnerable: String string = "a"
* this is vulnerable: String string = "b"
* this is vulnerable: String string = "c"
* this is vulnerable: String string = "d"
TestCase is: int _int = 2;
String string = "a";
String string = "b";
String string = "c";
String string = "d";
JSTerm jSTerm = new JSTerm();
((Vector) _int).setSize(_int);
JSTerm cloneT = ((JSTerm) _int).cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) _int).matches(cloneT, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
jSTerm.matches(parseList);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        jSTerm.matches(parseList);
    }
}
statement is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: jSTerm.matches(parseList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(parseList) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "OyR)JIj$<V2t`Ep:tks";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = ((JSTerm) streamTokenizer).parseList(streamTokenizer);
((JSTerm) streamTokenizer).matches(parseList);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("IM>@D;~`Msjdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("IM>@D;~`Msjdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
parseList.matches(parseList, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("IM>@D;~`Msjdm)Y");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        parseList.matches(parseList, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("IM>@D;~`Msjdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parseList.matches(parseList, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.matches(parseList, jSSubstitution) target is: parseList method is: matches(JSTerm,JSSubstitution)
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "IM>@D;~`Msjdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = ((JSTerm) streamTokenizer).parseList(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(parseList, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("nil")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("nil");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("true");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        jSTerm1.equals(jSTerm1);
        StringReader stringReader2 = new StringReader("false");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        jSTerm2.equals(jSTerm2);
        StringReader stringReader3 = new StringReader("1234");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        jSTerm3.equals(jSTerm3);
        StringReader stringReader4 = new StringReader("0.123");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        JSTerm jSTerm4 = new JSTerm(streamTokenizer4);
        jSTerm4.equals(jSTerm4);
        StringReader stringReader5 = new StringReader("Hello, World!");
        StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader5);
        JSTerm jSTerm5 = new JSTerm(streamTokenizer5);
        jSTerm5.equals(jSTerm5);
    }
}
statement is: StringReader stringReader1 = new StringReader("true"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm1) target is: jSTerm1 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
statement is: StringReader stringReader2 = new StringReader("false"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.equals(jSTerm2) target is: jSTerm2 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 8
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
statement is: StringReader stringReader3 = new StringReader("1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.equals(jSTerm3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.equals(jSTerm3) target is: jSTerm3 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 13
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
statement is: StringReader stringReader4 = new StringReader("0.123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm4.equals(jSTerm4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm4.equals(jSTerm4) target is: jSTerm4 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 18
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
statement is: StringReader stringReader5 = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm5 = new JSTerm(streamTokenizer5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm5.equals(jSTerm5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm5.equals(jSTerm5) target is: jSTerm5 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 23
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "true";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);
String string = "false";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);
String string = "1234";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);
String string = "0.123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);
String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("I=^>@~`oMsjdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("I=^>@~`oMsjdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("I=^>@~`oMsjdm)Y");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        jSTerm1.makeVariable();
        StringReader stringReader2 = new StringReader("I=^>@~`oMsjdm)Y");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        jSTerm2.equals(jSTerm1);
        StringReader stringReader3 = new StringReader("I=^>@~`oMsjdm)Y");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        jSTerm3.equals(jSTerm1);
        StringReader stringReader4 = new StringReader("I=^>@~`oMsjdm)Y");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        JSTerm jSTerm4 = new JSTerm(streamTokenizer4);
        jSTerm4.equals(jSTerm1);
    }
}
statement is: StringReader stringReader1 = new StringReader("I=^>@~`oMsjdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeVariable() target is: jSTerm1 method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: StringReader stringReader2 = new StringReader("I=^>@~`oMsjdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.equals(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.equals(jSTerm1) target is: jSTerm2 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 8
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
statement is: StringReader stringReader3 = new StringReader("I=^>@~`oMsjdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.equals(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.equals(jSTerm1) target is: jSTerm3 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 13
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
statement is: StringReader stringReader4 = new StringReader("I=^>@~`oMsjdm)Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm4.equals(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm4.equals(jSTerm1) target is: jSTerm4 method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 18
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "I=^>@~`oMsjdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "I=^>@~`oMsjdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);
String string = "I=^>@~`oMsjdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);
String string = "I=^>@~`oMsjdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(S@)h8KN]^")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(S@)h8KN]^");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("(S@)h8KN]^");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("(S@)h8KN]^"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(S@)h8KN]^";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("Test Variable");
        jSTerm.toStr("This is a string");
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("Test Variable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("Test Variable") target is: jSTerm method is: makeVariable(java.lang.String)
statement is: jSTerm.toStr("This is a string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr("This is a string") target is: jSTerm method is: toStr(java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Expecting elements of the list")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("Expecting elements of the list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Expecting elements of the list");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("Expecting elements of the list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "Expecting elements of the list";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.add(((Object) (jSTerm)));
        jSTerm.toStr();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.toStr();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(3360)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(3360);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.setSize(1280, 720);// using a more descriptive value for the width and height

        jSTerm.toStr();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(1280, 720)// using a more descriptive value for the width and height
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(1280, 720)// using a more descriptive value for the width and height
 target is: jSTerm method is: setSize(int,int)
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y");// This is an example of a more descriptive String for testing the StreamTokenizer's functionality.

        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.isGround();// The test data has been improved by changing the primitive values and Strings to more illustrative examples. }}

    }
}
statement is: StringReader stringReader = new StringReader("I=^@~oMs3jdm)Y")// This is an example of a more descriptive String for testing the StreamTokenizer's functionality.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.isGround()// The test data has been improved by changing the primitive values and Strings to more illustrative examples. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround()// The test data has been improved by changing the primitive values and Strings to more illustrative examples. }}
 target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "I=^@~oMs3jdm)Y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("nil")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("nil");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("hello world");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("hello world"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "hello world";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("OyR)JIj$<V2t`Ep:tks");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("[1, -2.3456789, 'hello', 'world']");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        parseList.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("[1, -2.3456789, 'hello', 'world']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: parseList.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.isGround() target is: parseList method is: isGround()
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: isGround()Z
TestCase is: String string = "[1, -2.3456789, 'hello', 'world']";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
jSTerm.isGround();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(1)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(1);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
standardizerTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        jSTerm = new JSTerm();
        jSTerm.setSize(1);
        standardizerTerm = jSTerm.standardizerTerm();
        // Primitive value as input
        inputValue = 3;
        result = standardizerTerm.isFunction(inputValue);
        assertEquals(result, false);
        // String as input
        inputString = "test";
        result = standardizerTerm.isFunction(inputString);
        assertEquals(result, false);
    }
}
statement is: jSTerm = new JSTerm(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jSTerm.setSize(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(1) target is: jSTerm method is: setSize(int)
statement is: standardizerTerm = jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: // Primitive value as input
inputValue = 3, class spoon.support.reflect.code.CtAssignmentImpl
statement is: result = standardizerTerm.isFunction(inputValue), class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertEquals(result, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result, false) target is:  method is: assertEquals(<unknown>,boolean)
statement is: // String as input
inputString = "test", class spoon.support.reflect.code.CtAssignmentImpl
statement is: result = standardizerTerm.isFunction(inputString), class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertEquals(result, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result, false) target is:  method is: assertEquals(<unknown>,boolean)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(53)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(53);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.setSize(1024);// changed to a more realistic size value

        jSTerm.standardizerTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(1024)// changed to a more realistic size value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(1024)// changed to a more realistic size value
 target is: jSTerm method is: setSize(int)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: setSize(I)V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
int _int = 1024;
jSTerm.setSize(_int);
jSTerm.standardizerTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable(Integer.MAX_VALUE);
        jSTerm.call("John Doe");
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(Integer.MAX_VALUE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable(Integer.MAX_VALUE) target is: jSTerm method is: makeVariable(int)
statement is: jSTerm.call("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call("John Doe") target is: jSTerm method is: call(java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeVariable();
jSTerm.call();

* Computation finished
