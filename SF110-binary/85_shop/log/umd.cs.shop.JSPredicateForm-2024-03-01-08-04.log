* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSPredicateForm
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 19542
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:04:11.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:04:11.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:04:11.222 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:04:11.298 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSPredicateForm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 406
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709280249452
* Starting evolution
* Initial Number of Goals in DynaMOSA = 103 / 406
[Progress:>                             1%] [Cov:=======>                           21%][Progress:>                             1%] [Cov:========>                          25%][Progress:>                             1%] [Cov:=============>                     39%][Progress:>                             2%] [Cov:================>                  47%][Progress:>                             2%] [Cov:=================>                 50%][Progress:>                             2%] [Cov:=================>                 50%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               57%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              59%][Progress:=>                            4%] [Cov:=====================>             60%][Progress:=>                            4%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][MASTER] 08:04:25.692 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           67%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        17%] [Cov:=======================>           68%][Progress:=====>                        18%] [Cov:=======================>           68%][Progress:=====>                        18%] [Cov:=======================>           68%][Progress:=====>                        18%] [Cov:=======================>           68%][Progress:=====>                        18%] [Cov:=======================>           68%][Progress:=====>                        18%] [Cov:=======================>           68%][Progress:=====>                        19%] [Cov:=======================>           68%][Progress:=====>                        19%] [Cov:=======================>           68%][Progress:=====>                        19%] [Cov:=======================>           68%][Progress:=====>                        19%] [Cov:=======================>           68%][Progress:=====>                        19%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       20%] [Cov:=======================>           68%][Progress:======>                       21%] [Cov:=======================>           68%][Progress:======>                       21%] [Cov:=======================>           68%][Progress:======>                       21%] [Cov:=======================>           68%][MASTER] 08:04:33.072 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:======>                       21%] [Cov:=======================>           68%][Progress:======>                       21%] [Cov:=======================>           68%][Progress:======>                       21%] [Cov:=======================>           68%][Progress:======>                       21%] [Cov:=======================>           68%][Progress:======>                       22%] [Cov:=======================>           68%][Progress:======>                       22%] [Cov:=======================>           68%][Progress:======>                       22%] [Cov:=======================>           68%][Progress:======>                       22%] [Cov:=======================>           68%][Progress:======>                       22%] [Cov:=======================>           68%][Progress:======>                       22%] [Cov:=======================>           68%][Progress:======>                       23%] [Cov:=======================>           68%][Progress:======>                       23%] [Cov:=======================>           68%][Progress:======>                       23%] [Cov:=======================>           68%][Progress:======>                       23%] [Cov:=======================>           68%][Progress:======>                       23%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:========>                     27%] [Cov:=======================>           68%][Progress:========>                     27%] [Cov:=======================>           68%][Progress:========>                     27%] [Cov:=======================>           68%][Progress:========>                     27%] [Cov:=======================>           68%][Progress:========>                     27%] [Cov:=======================>           68%][Progress:========>                     27%] [Cov:=======================>           68%][Progress:========>                     28%] [Cov:=======================>           68%][Progress:========>                     28%] [Cov:=======================>           68%][Progress:========>                     28%] [Cov:=======================>           68%][Progress:========>                     28%] [Cov:=======================>           68%][Progress:========>                     28%] [Cov:=======================>           68%][Progress:========>                     29%] [Cov:=======================>           68%][Progress:========>                     29%] [Cov:=======================>           68%][Progress:========>                     29%] [Cov:=======================>           68%][Progress:========>                     29%] [Cov:=======================>           68%][Progress:========>                     29%] [Cov:=======================>           68%][Progress:========>                     29%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    30%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:=======================>           68%][Progress:=========>                    31%] [Cov:========================>          69%][Progress:=========>                    31%] [Cov:========================>          69%][Progress:=========>                    31%] [Cov:========================>          69%][Progress:=========>                    31%] [Cov:========================>          71%][Progress:=========>                    31%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    32%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   34%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  38%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:========================>          71%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:===========>                  39%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 40%] [Cov:=========================>         72%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                45%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              50%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              51%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           62%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:=========================>         74%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:==================>           63%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          64%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          65%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        75%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       74%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:======================>       76%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      77%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      78%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     82%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:==========================>   89%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%]
* Search finished after 101s and 1298 generations, 337277 statements, best individual has fitness: 91.0
* Generated before the refinement 29 tests with total length 112
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSPredicateForm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm(arg0)
test data is: StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
        // Improved test data
        StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(qx$^q)Qj2wI4iUKF";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
String string = "(qx$^q)Qj2wI4iUKF";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null)
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm("John Doe");
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "John Doe";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: umd.cs.shop.JSPredicateForm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm((StreamTokenizer) null)
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for testing the constructor of the JSPredicateForm class
        JSPredicateForm jSPredicateForm = new JSPredicateForm(new StreamTokenizer("(a > 5) && (b < 10)"));
    }
}
statement is: // Improved test data for testing the constructor of the JSPredicateForm class
JSPredicateForm jSPredicateForm = new JSPredicateForm(new StreamTokenizer("(a > 5) && (b < 10)")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JSPredicateForm jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("the tokenizer is SPACE!")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: JSPredicateFormInit(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.JSPredicateFormInit(arg0)
test data is: StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.JSPredicateFormInit(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("the tokenizer is SPACE! And also this sentence has a comma,");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.JSPredicateFormInit(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("the tokenizer is SPACE! And also this sentence has a comma,"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.JSPredicateFormInit(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.JSPredicateFormInit(streamTokenizer) target is: jSTerm method is: JSPredicateFormInit(StreamTokenizer)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: JSPredicateFormInit(Ljava/io/StreamTokenizer;)V
TestCase is: String string = "the tokenizer is SPACE! And also this sentence has a comma,";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSPredicateForm) streamTokenizer).JSPredicateFormInit(streamTokenizer);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("( ")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("( ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm("( ");
        jSPredicateForm.setInput(5);
        jSPredicateForm.setOperator("<");
        jSPredicateForm.setValue(10);
        jSPredicateForm.setOutput(true);
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm("( "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSPredicateForm.setInput(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setInput(5) target is: jSPredicateForm method is: setInput(int)
statement is: jSPredicateForm.setOperator("<"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setOperator("<") target is: jSPredicateForm method is: setOperator(java.lang.String)
statement is: jSPredicateForm.setValue(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setValue(10) target is: jSPredicateForm method is: setValue(int)
statement is: jSPredicateForm.setOutput(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setOutput(true) target is: jSPredicateForm method is: setOutput(boolean)
TestCase is: String string = "( ";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Predicateform.print(): 0 elements")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: nextToken()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nextToken = streamTokenizer.nextToken()
statement is: umd.cs.shop.JSPredicateForm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm(arg0)
test data is: StringReader stringReader = new StringReader("Predicateform.print(): 0 elements");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Predicateform.print(): 5 elements");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        streamTokenizer.nextToken();
        JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Predicateform.print(): 5 elements"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer.nextToken() target is: streamTokenizer method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 2
Matched Method is: nextToken()I
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Predicateform.print(): 5 elements";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");
        // Improved test data
        String inputString = "Hello World!";
        int inputInteger = 10;
        double inputDouble = 3.14;
        char inputChar = 'a';
        boolean inputBoolean = true;
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
String inputString = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int inputInteger = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double inputDouble = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char inputChar = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean inputBoolean = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: String string = "(!`m<c)FWUK'`";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "Hello World!";
int _int = 10;
double _double = 3.14;
char _char = 'a';
boolean _boolean = true;

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(!m<c)FWUK@r`";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(,G@ur3{x!ow|bi8")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(,G@ur3{x!ow|bi8");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm("((a & b) | (c & d))");
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm("((a & b) | (c & d))"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "((a & b) | (c & d))";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        // This test data is more descriptive and representative of the situation being tested.
        // It includes a wider range of inputs, including negative numbers and decimal fractions.
        JSPredicateForm jSPredicateForm1 = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
        JSPredicateForm jSPredicateForm2 = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
        JSPredicateForm jSPredicateForm3 = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
        // This test data includes a mix of positive and negative numbers, as well as decimal fractions.
        JSPredicateForm jSPredicateForm4 = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
        JSPredicateForm jSPredicateForm5 = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
        JSPredicateForm jSPredicateForm6 = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
        // This test data includes a mix of positive and negative numbers, as well as decimal fractions. }}
    }
}
statement is: // Improved test data:
// This test data is more descriptive and representative of the situation being tested.
// It includes a wider range of inputs, including negative numbers and decimal fractions.
JSPredicateForm jSPredicateForm1 = new JSPredicateForm("(G@ur3{x!o32|P*bi8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm jSPredicateForm2 = new JSPredicateForm("(G@ur3{x!o32|P*bi8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm jSPredicateForm3 = new JSPredicateForm("(G@ur3{x!o32|P*bi8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // This test data includes a mix of positive and negative numbers, as well as decimal fractions.
JSPredicateForm jSPredicateForm4 = new JSPredicateForm("(G@ur3{x!o32|P*bi8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm jSPredicateForm5 = new JSPredicateForm("(G@ur3{x!o32|P*bi8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm jSPredicateForm6 = new JSPredicateForm("(G@ur3{x!o32|P*bi8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // This test data includes a mix of positive and negative numbers, as well as decimal fractions. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(rmmt@:sau&y ")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(rmmt@:sau&y ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm("customerForm");
        // Improved test data
        JSPredicateForm jSPredicateForm2 = new JSPredicateForm("orderForm");
        // Improved test data
        JSPredicateForm jSPredicateForm3 = new JSPredicateForm("invoiceForm");
        // Improved test data
        JSPredicateForm jSPredicateForm4 = new JSPredicateForm("customerForm");
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm("customerForm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
JSPredicateForm jSPredicateForm2 = new JSPredicateForm("orderForm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
JSPredicateForm jSPredicateForm3 = new JSPredicateForm("invoiceForm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
JSPredicateForm jSPredicateForm4 = new JSPredicateForm("customerForm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "customerForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "orderForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "invoiceForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "customerForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: umd.cs.shop.JSPredicateForm(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p")
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSPredicateForm jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");
    }
}
statement is: // Improved test data
JSPredicateForm jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(Hrmt@:s&y 7p";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

statement is: umd.cs.shop.JSPredicateForm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSPredicateForm.print()
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm();
        jSPredicateForm.setName("John Doe");
        jSPredicateForm.setAge(30);
        jSPredicateForm.setGender("Male");
        jSPredicateForm.print();
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSPredicateForm.setName("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setName("John Doe") target is: jSPredicateForm method is: setName(java.lang.String)
statement is: jSPredicateForm.setAge(30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setAge(30) target is: jSPredicateForm method is: setAge(int)
statement is: jSPredicateForm.setGender("Male"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.setGender("Male") target is: jSPredicateForm method is: setGender(java.lang.String)
statement is: jSPredicateForm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.print() target is: jSPredicateForm method is: print()
source statement: umd.cs.shop.JSPredicateForm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSPredicateFormindex is: 0
Matched Method is: print()V
TestCase is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9O.<zR]Zro1TD1")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSPredicateForm.print()
test data is: StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        10 = $missing$;
        O = $missing$;
    }
}
statement is: 10 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: O = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: umd.cs.shop.JSPredicateForm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSPredicateForm.toStr()
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int a = 7;
        int b = 11;
        double c = 9.3;
        String s1 = "goodbye";
        String s2 = "universe";
    }
}
statement is: int a = 7, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int b = 11, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double c = 9.3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s1 = "goodbye", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s2 = "universe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 7
* this is vulnerable: int _int = 11
* this is vulnerable: double _double = 9.3
* this is vulnerable: String string = "goodbye"
* this is vulnerable: String string = "universe"
TestCase is: int _int = 7;
int _int = 11;
double _double = 9.3;
String string = "goodbye";
String string = "universe";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("the tokenizer is SPACE!")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSPredicateForm.toStr()
test data is: StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("the tokenizer is SPACE!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) (jSTerm)));
        JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
        standarizerPredicateForm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("the tokenizer is SPACE!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standarizerPredicateForm() target is: jSTerm method is: standarizerPredicateForm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm;
statement is: standarizerPredicateForm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: standarizerPredicateForm.toStr() target is: standarizerPredicateForm method is: toStr()
source statement: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm; callee: VariableReference: Statement 4, type umd.cs.shop.JSPredicateFormindex is: 5
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "the tokenizer is SPACE!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean add = ((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
((JSPredicateForm) add).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("lpt ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionPF(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm applySubstitutionPF = jSTerm.applySubstitutionPF(arg0)
test data is: StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionPF(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("lpt 10");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        JSSubstitution jSSubstitution1 = new JSSubstitution();
        jSTerm1.applySubstitutionPF(jSSubstitution1);
        // Expected output: "lpt 10" (unchanged)
        StringReader stringReader2 = new StringReader("lpt 10.5");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        JSSubstitution jSSubstitution2 = new JSSubstitution();
        jSTerm2.applySubstitutionPF(jSSubstitution2);
        // Expected output: "lpt 10" (since the input is a float, it will be rounded to an integer)
        StringReader stringReader3 = new StringReader("lpt xyz");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        JSSubstitution jSSubstitution3 = new JSSubstitution();
        jSTerm3.applySubstitutionPF(jSSubstitution3);
        // Expected output: "lpt xyz" (unchanged) }}
    }
}
statement is: StringReader stringReader1 = new StringReader("lpt 10"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution1 = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.applySubstitutionPF(jSSubstitution1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.applySubstitutionPF(jSSubstitution1) target is: jSTerm1 method is: applySubstitutionPF(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionPF(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSPredicateForm;
statement is: // Expected output: "lpt 10" (unchanged)
StringReader stringReader2 = new StringReader("lpt 10.5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution2 = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.applySubstitutionPF(jSSubstitution2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.applySubstitutionPF(jSSubstitution2) target is: jSTerm2 method is: applySubstitutionPF(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: applySubstitutionPF(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSPredicateForm;
statement is: // Expected output: "lpt 10" (since the input is a float, it will be rounded to an integer)
StringReader stringReader3 = new StringReader("lpt xyz"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution3 = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.applySubstitutionPF(jSSubstitution3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.applySubstitutionPF(jSSubstitution3) target is: jSTerm3 method is: applySubstitutionPF(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 15
Matched Method is: applySubstitutionPF(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSPredicateForm;
statement is: // Expected output: "lpt xyz" (unchanged) }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "lpt 10";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);
String string = "lpt 10.5";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);
String string = "lpt xyz";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("the tokenizer is SPACE!")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches((JSPredicateForm) arg0, arg1)
test data is: StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("the tokenizer is SPACE!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) (jSTerm)));
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(((JSPredicateForm) (jSTerm)), jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("the tokenizer is SPACE!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(((JSPredicateForm) (jSTerm)), jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(((JSPredicateForm) (jSTerm)), jSSubstitution) target is: jSTerm method is: matches(JSPredicateForm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "the tokenizer is SPACE!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).matches((JSPredicateForm) jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("lpt ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: clonePF()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm clonePF = jSTerm.clonePF()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: matches(Lumd/cs/shop/JSPredicateForm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.makeFunction();
jSTerm.matches(clonePF);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("lpt ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) ("This is a test sentence.")));
        JSPredicateForm clonePF = jSTerm.clonePF();
        jSTerm.makeFunction();
        jSTerm.matches(clonePF);
    }
}
statement is: StringReader stringReader = new StringReader("lpt "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) ("This is a test sentence."))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) ("This is a test sentence."))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: JSPredicateForm clonePF = jSTerm.clonePF(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.clonePF() target is: jSTerm method is: clonePF()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: clonePF()Lumd/cs/shop/JSPredicateForm;
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.matches(clonePF), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(clonePF) target is: jSTerm method is: matches(JSPredicateForm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSPredicateForm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "lpt ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "This is a test sentence.";
((Vector) streamTokenizer).add((Object) string);
JSPredicateForm clonePF = ((JSPredicateForm) streamTokenizer).clonePF();
((JSTerm) streamTokenizer).makeFunction();
((JSPredicateForm) streamTokenizer).matches(clonePF);

statement is: umd.cs.shop.JSPredicateForm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm jSPredicateForm = new JSPredicateForm()
statement is: equals(Lumd/cs/shop/JSPredicateForm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSPredicateForm.equals((JSPredicateForm) null)
test data is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.equals((JSPredicateForm) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSPredicateForm jSPredicateForm = new JSPredicateForm();
        jSPredicateForm.equals(((JSPredicateForm) ("abcdef")));
    }
}
statement is: JSPredicateForm jSPredicateForm = new JSPredicateForm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSPredicateForm.equals(((JSPredicateForm) ("abcdef"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSPredicateForm.equals(((JSPredicateForm) ("abcdef"))) target is: jSPredicateForm method is: equals(JSPredicateForm)
source statement: umd.cs.shop.JSPredicateForm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSPredicateFormindex is: 0
Matched Method is: equals(Lumd/cs/shop/JSPredicateForm;)Z
TestCase is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
String string = "abcdef";
jSPredicateForm.equals((JSPredicateForm) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("7U+9;REJ2*m$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) arg0)
statement is: equals(Lumd/cs/shop/JSPredicateForm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
jSTerm.equals(standarizerPredicateForm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
        jSTerm.add(((Object) (stringReader)));
        jSTerm.equals(standarizerPredicateForm);
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standarizerPredicateForm() target is: jSTerm method is: standarizerPredicateForm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm;
statement is: jSTerm.add(((Object) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (stringReader))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.equals(standarizerPredicateForm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(standarizerPredicateForm) target is: jSTerm method is: equals(JSPredicateForm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSPredicateForm;)Z
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
((Vector) streamTokenizer).add((Object) stringReader);
((JSPredicateForm) streamTokenizer).equals(standarizerPredicateForm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("7U+9;REJ2*m$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSPredicateForm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals((JSPredicateForm) arg0)
test data is: StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals((JSPredicateForm) jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("12U+9;REJ2*m$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(((JSPredicateForm) (jSTerm)));
    }
}
statement is: StringReader stringReader = new StringReader("12U+9;REJ2*m$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(((JSPredicateForm) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(((JSPredicateForm) (jSTerm))) target is: jSTerm method is: equals(JSPredicateForm)
TestCase is: String string = "12U+9;REJ2*m$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("the tokenizer is SPACE!")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: equals(Lumd/cs/shop/JSPredicateForm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals((JSPredicateForm) arg0)
test data is: StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("the tokenizer is SPACE!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) (jSTerm)));
        jSTerm.equals(((JSPredicateForm) (jSTerm)));
    }
}
statement is: StringReader stringReader = new StringReader("the tokenizer is SPACE!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.equals(((JSPredicateForm) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(((JSPredicateForm) (jSTerm))) target is: jSTerm method is: equals(JSPredicateForm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSPredicateForm;)Z
TestCase is: String string = "the tokenizer is SPACE!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).equals((JSPredicateForm) jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9O.<zR]Zro1TD1")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) arg0)
statement is: equals(Lumd/cs/shop/JSPredicateForm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals((JSPredicateForm) arg0)
test data is: StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) (jSTerm)));
        jSTerm.equals(((JSPredicateForm) (jSTerm)));
    }
}
statement is: StringReader stringReader = new StringReader("9O.<zR]Zro1TD1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: jSTerm.equals(((JSPredicateForm) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(((JSPredicateForm) (jSTerm))) target is: jSTerm method is: equals(JSPredicateForm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSPredicateForm;)Z
TestCase is: String string = "9O.<zR]Zro1TD1";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).equals((JSPredicateForm) jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("7U+9;REJ2*m$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("7U+9;REJ2*m$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
        jSTerm.add(((Object) ("This is a test string")));
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(standarizerPredicateForm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("7U+9;REJ2*m$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standarizerPredicateForm() target is: jSTerm method is: standarizerPredicateForm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm;
statement is: jSTerm.add(((Object) ("This is a test string"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) ("This is a test string"))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(standarizerPredicateForm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(standarizerPredicateForm, jSSubstitution) target is: jSTerm method is: matches(JSPredicateForm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "7U+9;REJ2*m$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
String string = "This is a test string";
((Vector) streamTokenizer).add((Object) string);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).matches(standarizerPredicateForm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("7U+9;REJ2*m$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches((JSPredicateForm) arg0, arg1)
test data is: StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("7U+9;REJ2*m$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(((JSPredicateForm) (jSTerm)), jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("7U+9;REJ2*m$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(((JSPredicateForm) (jSTerm)), jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(((JSPredicateForm) (jSTerm)), jSSubstitution) target is: jSTerm method is: matches(JSPredicateForm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "7U+9;REJ2*m$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSPredicateForm) streamTokenizer).matches((JSPredicateForm) jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("O")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: clonePF()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm clonePF = jSTerm.clonePF()
statement is: matches(Lumd/cs/shop/JSPredicateForm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: StringReader stringReader = new StringReader("O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.matches(clonePF);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.add(((Object) (jSTerm)));
        JSPredicateForm clonePF = jSTerm.clonePF();
        jSTerm.matches(clonePF);
    }
}
statement is: StringReader stringReader = new StringReader("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: JSPredicateForm clonePF = jSTerm.clonePF(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.clonePF() target is: jSTerm method is: clonePF()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: clonePF()Lumd/cs/shop/JSPredicateForm;
statement is: jSTerm.matches(clonePF), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(clonePF) target is: jSTerm method is: matches(JSPredicateForm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSPredicateForm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "A";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((Vector) streamTokenizer).add((Object) jSTerm);
JSPredicateForm clonePF = ((JSPredicateForm) streamTokenizer).clonePF();
((JSPredicateForm) streamTokenizer).matches(clonePF);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("the tokenizer is SPACE!")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arg0.add((Object) arg0)
statement is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("the tokenizer is SPACE!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) (jSTerm)));
        JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.makeVariable();
        jSTerm.matches(standarizerPredicateForm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("the tokenizer is SPACE!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (jSTerm))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
statement is: JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standarizerPredicateForm() target is: jSTerm method is: standarizerPredicateForm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standarizerPredicateForm()Lumd/cs/shop/JSPredicateForm;
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.matches(standarizerPredicateForm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(standarizerPredicateForm, jSSubstitution) target is: jSTerm method is: matches(JSPredicateForm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSPredicateForm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "the tokenizer is SPACE!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeVariable();
((JSPredicateForm) streamTokenizer).matches(standarizerPredicateForm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("7U+9;REJ2*m$")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) null)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionPF(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSPredicateForm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPredicateForm
statement code is: JSPredicateForm applySubstitutionPF = jSTerm.applySubstitutionPF(arg0)
test data is: StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) null);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionPF(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("7U+9;REJ2*m$");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.add(((Object) (null)));
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionPF(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("7U+9;REJ2*m$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.add(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (null))) target is: jSTerm method is: add(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionPF(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionPF(jSSubstitution) target is: jSTerm method is: applySubstitutionPF(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionPF(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSPredicateForm;
TestCase is: String string = "7U+9;REJ2*m$";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Object object = null;
((Vector) streamTokenizer).add(object);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);

* test suite isTestSuite: 57
Test 0: 
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
Test 1: 
JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null);
Test 2: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 3: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
// Undeclared exception!
try { 
  jSTerm.JSPredicateFormInit(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 4: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("( ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 5: 
StringReader stringReader = new StringReader("Predicateform.print(): 0 elements");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 6: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 7: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");
Test 8: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(,G@ur3{x!ow|bi8");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 9: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 10: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(rmmt@:sau&y ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 11: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 12: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();
Test 13: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.print();
Test 14: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.toStr();
Test 15: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.toStr();
Test 16: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionPF(jSSubstitution);
Test 17: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.makeFunction();
jSTerm.matches(clonePF);
Test 19: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.equals((JSPredicateForm) null);
Test 20: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
jSTerm.equals(standarizerPredicateForm);
Test 21: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 22: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 23: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 24: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 25: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);
Test 26: 
StringReader stringReader = new StringReader("O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.matches(clonePF);
Test 27: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) null);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionPF(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 29: 
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

Test 30: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("John Doe");

Test 31: 
JSPredicateForm jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);

Test 32: 
StringReader stringReader = new StringReader("the tokenizer is SPACE! And also this sentence has a comma,");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSPredicateForm) streamTokenizer).JSPredicateFormInit(streamTokenizer);

Test 33: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("( ");

Test 34: 
StringReader stringReader = new StringReader("Predicateform.print(): 5 elements");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

Test 35: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");

Test 36: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");

Test 37: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("((a & b) | (c & d))");

Test 38: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

Test 39: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("customerForm");
String string = "orderForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "invoiceForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "customerForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

Test 40: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");

Test 41: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();

Test 42: 

Test 43: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean add = ((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
((JSPredicateForm) add).toStr();

Test 44: 
StringReader stringReader = new StringReader("lpt 10");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);
String string = "lpt 10.5";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);
String string = "lpt xyz";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);

Test 45: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).matches((JSPredicateForm) jSTerm, jSSubstitution);

Test 46: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) "This is a test sentence.");
JSPredicateForm clonePF = ((JSPredicateForm) streamTokenizer).clonePF();
((JSTerm) streamTokenizer).makeFunction();
((JSPredicateForm) streamTokenizer).matches(clonePF);

Test 47: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.equals((JSPredicateForm) "abcdef");

Test 48: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
((Vector) streamTokenizer).add((Object) stringReader);
((JSPredicateForm) streamTokenizer).equals(standarizerPredicateForm);

Test 49: 
StringReader stringReader = new StringReader("12U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 50: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).equals((JSPredicateForm) jSTerm);

Test 51: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).equals((JSPredicateForm) jSTerm);

Test 52: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
String string = "This is a test string";
((Vector) streamTokenizer).add((Object) string);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).matches(standarizerPredicateForm, jSSubstitution);

Test 53: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSPredicateForm) streamTokenizer).matches((JSPredicateForm) jSTerm, jSSubstitution);

Test 54: 
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((Vector) streamTokenizer).add((Object) jSTerm);
JSPredicateForm clonePF = ((JSPredicateForm) streamTokenizer).clonePF();
((JSPredicateForm) streamTokenizer).matches(clonePF);

Test 55: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeVariable();
((JSPredicateForm) streamTokenizer).matches(standarizerPredicateForm, jSSubstitution);

Test 56: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) null);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);


* Generated after the refinement and before minimization 57 tests with total length 245
* test suite isTestSuite: 57
Test 0: 
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
Test 1: 
JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null);
Test 2: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 3: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
// Undeclared exception!
try { 
  jSTerm.JSPredicateFormInit(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 4: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("( ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 5: 
StringReader stringReader = new StringReader("Predicateform.print(): 0 elements");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 6: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 7: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");
Test 8: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(,G@ur3{x!ow|bi8");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 9: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 10: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(rmmt@:sau&y ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 11: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 12: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();
Test 13: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.print();
Test 14: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.toStr();
Test 15: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.toStr();
Test 16: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionPF(jSSubstitution);
Test 17: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.makeFunction();
jSTerm.matches(clonePF);
Test 19: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.equals((JSPredicateForm) null);
Test 20: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
jSTerm.equals(standarizerPredicateForm);
Test 21: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 22: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 23: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 24: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 25: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);
Test 26: 
StringReader stringReader = new StringReader("O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.matches(clonePF);
Test 27: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) null);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionPF(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 29: 
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

Test 30: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("John Doe");

Test 31: 
JSPredicateForm jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);

Test 32: 
StringReader stringReader = new StringReader("the tokenizer is SPACE! And also this sentence has a comma,");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSPredicateForm) streamTokenizer).JSPredicateFormInit(streamTokenizer);

Test 33: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("( ");

Test 34: 
StringReader stringReader = new StringReader("Predicateform.print(): 5 elements");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);

Test 35: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");

Test 36: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");

Test 37: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("((a & b) | (c & d))");

Test 38: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "(G@ur3{x!o32|P*bi8";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

Test 39: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("customerForm");
String string = "orderForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "invoiceForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);
String string = "customerForm";
JSPredicateForm jSPredicateForm = new JSPredicateForm(string);

Test 40: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");

Test 41: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();

Test 42: 

Test 43: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean add = ((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
((JSPredicateForm) add).toStr();

Test 44: 
StringReader stringReader = new StringReader("lpt 10");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);
String string = "lpt 10.5";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);
String string = "lpt xyz";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);

Test 45: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).matches((JSPredicateForm) jSTerm, jSSubstitution);

Test 46: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) "This is a test sentence.");
JSPredicateForm clonePF = ((JSPredicateForm) streamTokenizer).clonePF();
((JSTerm) streamTokenizer).makeFunction();
((JSPredicateForm) streamTokenizer).matches(clonePF);

Test 47: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.equals((JSPredicateForm) "abcdef");

Test 48: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
((Vector) streamTokenizer).add((Object) stringReader);
((JSPredicateForm) streamTokenizer).equals(standarizerPredicateForm);

Test 49: 
StringReader stringReader = new StringReader("12U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 50: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).equals((JSPredicateForm) jSTerm);

Test 51: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
((JSPredicateForm) streamTokenizer).equals((JSPredicateForm) jSTerm);

Test 52: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
String string = "This is a test string";
((Vector) streamTokenizer).add((Object) string);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).matches(standarizerPredicateForm, jSSubstitution);

Test 53: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSPredicateForm) streamTokenizer).matches((JSPredicateForm) jSTerm, jSSubstitution);

Test 54: 
StringReader stringReader = new StringReader("A");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((Vector) streamTokenizer).add((Object) jSTerm);
JSPredicateForm clonePF = ((JSPredicateForm) streamTokenizer).clonePF();
((JSPredicateForm) streamTokenizer).matches(clonePF);

Test 55: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = ((JSPredicateForm) streamTokenizer).standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).makeVariable();
((JSPredicateForm) streamTokenizer).matches(standarizerPredicateForm, jSSubstitution);

Test 56: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).add((Object) null);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSPredicateForm) streamTokenizer).applySubstitutionPF(jSSubstitution);


* Minimizing test suite
* test suite isTestSuite: 31
Test 0: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 1: 
JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null);
Test 2: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("( ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 3: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("John Doe");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 4: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 5: 
StringReader stringReader = new StringReader("Predicateform.print(): 0 elements");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 6: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("((a & b) | (c & d))");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 7: 
JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");
Test 8: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 9: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 10: 
JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(rmmt@:sau&y ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 11: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();
Test 12: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.print();
Test 13: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.toStr();
Test 14: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
standarizerPredicateForm.toStr();
Test 15: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionPF(jSSubstitution);
Test 16: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) null);
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionPF(jSSubstitution);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}

Test 17: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches((JSPredicateForm) jSTerm, jSSubstitution);
Test 20: 
StringReader stringReader = new StringReader("lpt ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.makeFunction();
jSTerm.matches(clonePF);
Test 21: 
JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.equals((JSPredicateForm) null);
Test 22: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
jSTerm.add((Object) stringReader);
jSTerm.equals(standarizerPredicateForm);
Test 23: 
StringReader stringReader = new StringReader("7U+9;REJ2*m$");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 24: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 25: 
StringReader stringReader = new StringReader("9O.<zR]Zro1TD1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.add((Object) jSTerm);
jSTerm.equals((JSPredicateForm) jSTerm);
Test 26: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 27: 
StringReader stringReader = new StringReader("O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.add((Object) jSTerm);
JSPredicateForm clonePF = jSTerm.clonePF();
jSTerm.matches(clonePF);
Test 28: 
StringReader stringReader = new StringReader("the tokenizer is SPACE!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.add((Object) jSTerm);
JSPredicateForm standarizerPredicateForm = jSTerm.standarizerPredicateForm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeVariable();
jSTerm.matches(standarizerPredicateForm, jSSubstitution);
Test 29: 
StringReader stringReader = new StringReader("(qx$^q)Qj2wI4iUKF");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSPredicateForm jSPredicateForm = new JSPredicateForm(streamTokenizer);
Test 30: 
StringReader stringReader = new StringReader("the tokenizer is SPACE! And also this sentence has a comma,");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  ((JSPredicateForm) streamTokenizer).JSPredicateFormInit(streamTokenizer);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 87
* Number of covered goals: 75
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 77%
* Total number of goals: 165
* Number of covered goals: 127
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 55
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 87
* Number of covered goals: 74
* Generated 31 tests with total length 119
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 55%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testJSPredicateFormNullStreamTokenizerConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null);
assertTrue(jSPredicateForm.isEmpty());


** It was a parseable test case! 
refined test name is: testInitializeJSPredicateFormWithNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("( ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testJSPredicateFormConstructorThrowsError
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("John Doe");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testExceptionWithNoMessage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(!`m<c)FWUK'`");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testInvalidPredicateStringShouldThrowException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("((a & b) | (c & d))");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testInvalidPredicateFormatThrowsError
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = new JSPredicateForm("(!m<c)FWUK@r`");
assertEquals("[!m<c]", jSPredicateForm.toString());


** It was a parseable test case! 
refined test name is: testToStringReturnsCorrectStringRepresentation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(Hrmt@:s&y 7p");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testCreateValidJSPredicateForm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(G@ur3{x!o32|P*bi8");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testConstructorThrowsErrorWhenPredicateIsInvalid
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = null;
try {
  jSPredicateForm = new JSPredicateForm("(rmmt@:sau&y ");
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSPredicateForm", e);
}


** It was a parseable test case! 
refined test name is: testConstructorHandlesMalformedInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
jSPredicateForm.print();
assertTrue(jSPredicateForm.isEmpty());


** It was a parseable test case! 
refined test name is: testPrintShouldOutputPredicateForm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
StringBuffer str = jSPredicateForm.toStr();
assertEquals("", str.toString());


** It was a parseable test case! 
refined test name is: testToStrReturnsEmptyStringBuffer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSPredicateForm jSPredicateForm = new JSPredicateForm();
boolean equals = jSPredicateForm.equals((JSPredicateForm) null);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithNullArgumentReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.375 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:09:53.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.470 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:09:53.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.528 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.529 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:53.605 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:53.660 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:09:53.661 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:53.792 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.794 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:53.856 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.858 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:53.914 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.915 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:53.972 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:53.973 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:54.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:54.030 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:54.084 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:54.085 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:54.139 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:54.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:54.295 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:09:54.297 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
[MASTER] 08:09:54.470 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4530978943698602622.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'JSPredicateForm_ESTest' to evosuite-tests
[MASTER] 08:09:54.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4530978943698602622.jar
* Done!

* Computation finished
