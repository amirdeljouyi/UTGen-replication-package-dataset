* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSTerm
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 20003
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:10:29.312 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:10:29.401 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:10:29.403 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:10:29.647 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSTerm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 846
* Using seed 1710400223982
* Starting evolution
* Initial Number of Goals in DynaMOSA = 201 / 846
[Progress:>                             0%] [Cov:================>                  48%][Progress:>                             1%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             2%] [Cov:===================>               56%][Progress:>                             2%] [Cov:====================>              58%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            63%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           8%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:=========================>         72%][Progress:==>                           9%] [Cov:=========================>         72%][Progress:==>                           9%] [Cov:=========================>         72%][Progress:==>                           9%] [Cov:=========================>         72%][Progress:==>                           9%] [Cov:=========================>         72%][Progress:===>                          11%] [Cov:=========================>         72%][Progress:===>                          11%] [Cov:=========================>         72%][Progress:===>                          11%] [Cov:=========================>         72%][Progress:===>                          11%] [Cov:=========================>         72%][Progress:===>                          11%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][MASTER] 07:10:57.657 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][MASTER] 07:11:04.886 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        17%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         72%][Progress:=====>                        19%] [Cov:=========================>         72%][Progress:=====>                        19%] [Cov:=========================>         72%][Progress:=====>                        19%] [Cov:=========================>         72%][Progress:=====>                        19%] [Cov:=========================>         72%][Progress:=====>                        19%] [Cov:=========================>         72%][Progress:======>                       20%] [Cov:=========================>         72%][Progress:======>                       20%] [Cov:=========================>         72%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       22%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:=======>                      25%] [Cov:=========================>         74%][Progress:========>                     27%] [Cov:=========================>         74%][Progress:========>                     27%] [Cov:=========================>         74%][Progress:========>                     27%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     28%] [Cov:=========================>         74%][Progress:========>                     29%] [Cov:=========================>         74%][Progress:========>                     29%] [Cov:=========================>         74%][Progress:========>                     29%] [Cov:=========================>         74%][Progress:========>                     29%] [Cov:=========================>         74%][Progress:========>                     29%] [Cov:=========================>         74%][Progress:========>                     29%] [Cov:=========================>         74%][Progress:=========>                    30%] [Cov:=========================>         74%][Progress:=========>                    30%] [Cov:=========================>         74%][Progress:=========>                    30%] [Cov:=========================>         74%][Progress:=========>                    30%] [Cov:=========================>         74%][Progress:=========>                    30%] [Cov:=========================>         74%][Progress:=========>                    30%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    31%] [Cov:=========================>         74%][Progress:=========>                    32%] [Cov:=========================>         74%][Progress:=========>                    32%] [Cov:=========================>         74%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    32%] [Cov:==========================>        75%][Progress:=========>                    33%] [Cov:==========================>        75%][Progress:=========>                    33%] [Cov:==========================>        75%][Progress:=========>                    33%] [Cov:==========================>        75%][Progress:=========>                    33%] [Cov:==========================>        75%][Progress:=========>                    33%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   35%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        75%][Progress:==========>                   36%] [Cov:==========================>        76%][Progress:==========>                   36%] [Cov:==========================>        76%][Progress:===========>                  37%] [Cov:==========================>        76%][Progress:===========>                  37%] [Cov:==========================>        76%][Progress:===========>                  37%] [Cov:==========================>        76%][Progress:===========>                  37%] [Cov:==========================>        76%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  37%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:===========>                  38%] [Cov:===========================>       78%][Progress:============>                 40%] [Cov:===========================>       78%][Progress:============>                 40%] [Cov:===========================>       78%][Progress:============>                 40%] [Cov:===========================>       78%][Progress:============>                 40%] [Cov:===========================>       78%][Progress:============>                 40%] [Cov:===========================>       78%][Progress:============>                 40%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 41%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 42%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:============>                 43%] [Cov:===========================>       78%][Progress:=============>                44%] [Cov:===========================>       78%][Progress:=============>                44%] [Cov:===========================>       78%][Progress:=============>                44%] [Cov:===========================>       78%][Progress:=============>                44%] [Cov:===========================>       78%][Progress:=============>                44%] [Cov:===========================>       78%][Progress:=============>                44%] [Cov:===========================>       78%][Progress:=============>                45%] [Cov:===========================>       78%][Progress:=============>                45%] [Cov:===========================>       78%][Progress:=============>                45%] [Cov:===========================>       78%][Progress:=============>                45%] [Cov:===========================>       78%][Progress:=============>                45%] [Cov:===========================>       78%][Progress:=============>                46%] [Cov:===========================>       78%][Progress:=============>                46%] [Cov:===========================>       78%][Progress:=============>                46%] [Cov:===========================>       78%][Progress:=============>                46%] [Cov:===========================>       78%][Progress:=============>                46%] [Cov:===========================>       78%][Progress:=============>                46%] [Cov:===========================>       78%][Progress:==============>               47%] [Cov:===========================>       78%][Progress:==============>               47%] [Cov:===========================>       78%][Progress:==============>               47%] [Cov:===========================>       78%][Progress:==============>               47%] [Cov:===========================>       78%][Progress:==============>               47%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               48%] [Cov:===========================>       78%][Progress:==============>               49%] [Cov:===========================>       78%][Progress:==============>               49%] [Cov:===========================>       78%][Progress:==============>               49%] [Cov:===========================>       78%][Progress:==============>               49%] [Cov:===========================>       78%][Progress:==============>               49%] [Cov:===========================>       78%][Progress:==============>               49%] [Cov:===========================>       78%][Progress:===============>              51%] [Cov:===========================>       78%][Progress:===============>              51%] [Cov:===========================>       78%][Progress:===============>              51%] [Cov:===========================>       78%][Progress:===============>              51%] [Cov:===========================>       78%][Progress:===============>              51%] [Cov:===========================>       78%][Progress:===============>              51%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              52%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:===============>              53%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             54%] [Cov:===========================>       78%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            57%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            59%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           62%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          64%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         67%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       78%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%]
* Search finished after 201s and 725 generations, 191716 statements, best individual has fitness: 178.0
* Generated before the refinement 64 tests with total length 261
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("Alice");// Improved test data: using a more descriptive variable name "Alice" instead of "jSTerm".

        jSTerm.print(1234);// Improved test data: using a more representative value (1234) instead of the primitive value 0. }}

    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("Alice")// Improved test data: using a more descriptive variable name "Alice" instead of "jSTerm".
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("Alice")// Improved test data: using a more descriptive variable name "Alice" instead of "jSTerm".
 target is: jSTerm method is: makeVariable(java.lang.String)
statement is: jSTerm.print(1234)// Improved test data: using a more representative value (1234) instead of the primitive value 0. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print(1234)// Improved test data: using a more representative value (1234) instead of the primitive value 0. }}
 target is: jSTerm method is: print(int)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "(<T13 V9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(g1 a9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
test data is: StringReader stringReader = new StringReader("(g1 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(g1 a9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("(g1 a9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "(g1 a9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "(T13 a9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world! \t\n\"\\");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world! \t\n\"\\"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello, world! \t\n\"\\";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%Ivock(wrlFZhpr>")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%Ivock(wrlFZhpr>");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Welcome to the Java world of programming! The sun is shining brightly today.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Welcome to the Java world of programming! The sun is shining brightly today."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Welcome to the Java world of programming! The sun is shining brightly today.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("%%");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("%%"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "%%";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("((x + y) * 3 - 4)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("((x + y) * 3 - 4)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "((x + y) * 3 - 4)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(*}G{l![|")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(*}G{l![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("($}G{![|")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("($}G{![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_);alert(\'Hello World!\');");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_);alert(\'Hello World!\');"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(XTuo\"V9=k~G(j_);alert('Hello World!');";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T13 a9=k~G(j)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("T13 a9=k~G(j)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T13 a9=k~G(123456789)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        parseList.print();
    }
}
statement is: StringReader stringReader = new StringReader("T13 a9=k~G(123456789)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: parseList.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.print() target is: parseList method is: print()
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: print()V
TestCase is: String string = "T13 a9=k~G(123456789)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
jSTerm.print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "(<T13 V9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.addElement(new JSTerm("hello"));
        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.addElement(new JSTerm("hello")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(new JSTerm("hello")) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
JSTerm jSTerm = null;
jSTerm.addElement(jSTerm);
jSTerm.print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "(T13 a9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "(<T13 V9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2nrvV)s0=F%-]c")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("2nrvV)s0=F%-]c");
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm("2nrvV)s0=F%-]c"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 6
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "2nrvV)s0=F%-]c";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2nrvV)s0=F%-]c")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("2nrvV)s0=F%-]c"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: String string = "2nrvV)s0=F%-]c";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?`%TQ xXiUfWaL")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("?`%TQ xXiUfWaL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String inputString = "This is a sample input string.";
        StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(inputString));
        JSTerm jSTerm = new JSTerm();
        JSTerm jSTerm = new JSTerm(tokenizer);
        JSSubstitution matches = jSTerm.matches(jSTerm);
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: String inputString = "This is a sample input string.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(inputString)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(tokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "This is a sample input string.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
jSTerm.matches(jSTerm, matches);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.clear()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.clear();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        JSTerm call = new JSTerm();
        jSTerm.addElement(call);
        call.clear();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(call, jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm call = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(call), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(call) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 1
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: call.clear(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: call.clear() target is: call method is: clear()
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(call, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(call, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 1
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Replace
        the primitive;
        and Strings;
        more descriptive;
        examples : {
        }
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeConstant("a");
        jSTerm.equals(new JSTerm("a"));
        ((((real - world) instanceof ) instanceof ) == equals()) ? methods : (jSTerm1 = new JSTerm()) = $missing$;
        JSTerm jSTerm2 = new JSTerm();
        jSTerm1.makeConstant("apple");
        jSTerm2.makeConstant("orange");
        assertTrue(jSTerm1.equals(new JSTerm("apple")));
        assertFalse(jSTerm1.equals(new JSTerm("orange")));
    }
}
statement is: @Replace
the primitive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: and Strings, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: more descriptive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: examples : {
}, class spoon.support.reflect.code.CtBlockImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeConstant("a"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeConstant("a") target is: jSTerm method is: makeConstant(java.lang.String)
statement is: jSTerm.equals(new JSTerm("a")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(new JSTerm("a")) target is: jSTerm method is: equals(JSTerm)
statement is: ((((real - world) instanceof ) instanceof ) == equals()) ? methods : (jSTerm1 = new JSTerm()) = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: JSTerm jSTerm2 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeConstant("apple"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeConstant("apple") target is: jSTerm1 method is: makeConstant(java.lang.String)
statement is: jSTerm2.makeConstant("orange"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeConstant("orange") target is: jSTerm2 method is: makeConstant(java.lang.String)
statement is: assertTrue(jSTerm1.equals(new JSTerm("apple"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm1.equals(new JSTerm("apple"))) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(jSTerm1.equals(new JSTerm("orange"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(jSTerm1.equals(new JSTerm("orange"))) target is:  method is: assertFalse(<unknown>)
TestCase is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.makeVariable();
call.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        The provided;
        snippet is;
        small piece;
        Java code;
        creates an;
        the JSTerm;
        the adds;
        element to;
        element calls;
        call method;
        on it;
        on and;
        makes a;
        out of;
        return value;
        the call;
        The code;
        compares the;
        value with;
        original JSTerm;
        using the;
        To make;
        test data;
        descriptive and;
        of the;
        being tested;
        being we;
        improve the;
        values and;
        used in;
    }
}
statement is: The provided, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: snippet is, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: small piece, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Java code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: creates an, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the JSTerm, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the adds, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: element to, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: element calls, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: call method, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: on it, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: on and, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: makes a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: out of, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: return value, class spoon.support.reflect.code.CtReturnImpl
statement is: the call, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: The code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: compares the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: value with, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: original JSTerm, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: using the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: To make, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: test data, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: descriptive and, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: being tested, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: being we, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: improve the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: values and, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: used in, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader3 = new StringReader("(T15 a11=k~I(j_)");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm term3 = new JSTerm(streamTokenizer3);
        assertFalse(term1.equals(term3));// Not equal to another expression with different variables

        StringReader stringReader4 = new StringReader("(T16 a12=k~J(j_)");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        JSTerm term4 = new JSTerm(streamTokenizer4);
        assertFalse(term1.equals(term4));// Not equal to another expression with different operators }}

    }
}
statement is: StringReader stringReader3 = new StringReader("(T15 a11=k~I(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm term3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(term1.equals(term3))// Not equal to another expression with different variables
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(term1.equals(term3))// Not equal to another expression with different variables
 target is:  method is: assertFalse(<unknown>)
statement is: StringReader stringReader4 = new StringReader("(T16 a12=k~J(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm term4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(term1.equals(term4))// Not equal to another expression with different operators }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(term1.equals(term4))// Not equal to another expression with different operators }}
 target is:  method is: assertFalse(<unknown>)
TestCase is: String string = "(T15 a11=k~I(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(T16 a12=k~J(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer);
        assertEquals(jSTerm1, jSTerm2);
    }
}
statement is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(jSTerm1, jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(jSTerm1, jSTerm2) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: String string = "(T13 a9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement(jSTerm);
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("(T13 a9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "(T13 a9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((Vector) streamTokenizer).addElement(jSTerm);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("J#UY=v-reIH96");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("J#UY=v-reIH96"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "J#UY=v-reIH96";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(<T13 V9=k~G(j_) ……");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_) ……"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "(<T13 V9=k~G(j_) \u2026\u2026";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        assertTrue(jSTerm.isGround());
        StringReader stringReader2 = new StringReader("(<T13 V9=k~G(j_)");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        assertFalse(jSTerm.isGround());
    }
}
statement is: StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(jSTerm.isGround()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm.isGround()) target is:  method is: assertTrue(<unknown>)
statement is: StringReader stringReader2 = new StringReader("(<T13 V9=k~G(j_)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(jSTerm.isGround()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(jSTerm.isGround()) target is:  method is: assertFalse(<unknown>)
TestCase is: String string = "(<T13 V9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(<T13 V9=k~G(j_)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("Smith");
        jSTerm.makeVariable();
        jSTerm.isGround();
    }
}
statement is: JSTerm jSTerm = new JSTerm("Smith"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
call.addElement(jSTerm);
call.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("term1");
        JSTerm jSTerm2 = new JSTerm("term2");
        jSTerm1.addElement(jSTerm1);
        JSTerm call = jSTerm1.call();
        jSTerm1.makeVariable();
        call.addElement(jSTerm1);
        call.isGround();
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("term1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("term2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.addElement(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.addElement(jSTerm1) target is: jSTerm1 method is: addElement(JSTerm)
statement is: JSTerm call = jSTerm1.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.call() target is: jSTerm1 method is: call()
statement is: jSTerm1.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeVariable() target is: jSTerm1 method is: makeVariable()
statement is: call.addElement(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: call.addElement(jSTerm1) target is: call method is: addElement(JSTerm)
statement is: call.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: call.isGround() target is: call method is: isGround()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("c-vodb3ltw")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("c-vodb3ltw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("c-vodb3ltw");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("c-vodb3ltw"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "c-vodb3ltw";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: addAll(Ljava/util/Collection;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addAll = jSTerm.addAll((Collection) arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.addAll((Collection) jSTerm);
call.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm(1, 2, "apple");
        jSTerm.addElement(jSTerm);
        JSTerm call = jSTerm.call();
        call.addAll(((Collection) (jSTerm)));
        call.standardizerTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(1, 2, "apple"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: call.addAll(((Collection) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: call.addAll(((Collection) (jSTerm))) target is: call method is: addAll(Collection)
statement is: call.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: call.standardizerTerm() target is: call method is: standardizerTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("string1", "This is a sample string");
        jSTerm.makeVariable("int1", 1234);
        jSTerm.call();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("string1", "This is a sample string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("string1", "This is a sample string") target is: jSTerm method is: makeVariable(java.lang.String,java.lang.String)
statement is: jSTerm.makeVariable("int1", 1234), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("int1", 1234) target is: jSTerm method is: makeVariable(java.lang.String,int)
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?ZdBUBB},}")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("?ZdBUBB},}");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isEval();
        // Improved test data
        String input1 = "2 + 2";
        String input2 = "console.log('Hello World')";
        int expectedOutput1 = 4;
        int expectedOutput2 = 0;
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isEval()Z
statement is: // Improved test data
String input1 = "2 + 2", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String input2 = "console.log('Hello World')", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedOutput1 = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedOutput2 = 0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "2 + 2"
* this is vulnerable: String string = "console.log('Hello World')"
* this is vulnerable: int _int = 4
* this is vulnerable: int _int = 0
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
String string = "2 + 2";
String string = "console.log('Hello World')";
int _int = 4;
int _int = 0;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("zm4nIcKRb#6%m^j9>J")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: StringReader stringReader = new StringReader("zm4nIcKRb#6%m^j9>J");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("pi=3.14");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isConstant();
    }
}
statement is: StringReader stringReader = new StringReader("pi=3.14"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant() target is: jSTerm method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isConstant()Z
TestCase is: String string = "pi=3.14";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm jSTerm = new JSTerm();
        jSTerm.setFunction("add");
        jSTerm.setParameters(new Object[]{ "x", "y" });
    }
}
statement is: // Improved test data
JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setFunction("add"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setFunction("add") target is: jSTerm method is: setFunction(java.lang.String)
statement is: jSTerm.setParameters(new Object[]{ "x", "y" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setParameters(new Object[]{ "x", "y" }) target is: jSTerm method is: setParameters(java.lang.Object[])
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isVariable("myVariableName");
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isVariable("myVariableName"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable("myVariableName") target is: jSTerm method is: isVariable(java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isFunction();
        // Improved test data:
        jSTerm = new JSTerm("1+2*3");// Use a more realistic input string for testing the isFunction() method }}

    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isFunction() target is: jSTerm method is: isFunction()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isFunction()Z
statement is: // Improved test data:
jSTerm = new JSTerm("1+2*3")// Use a more realistic input string for testing the isFunction() method }}
, class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("123 4.56 7.89 'hello' 'world'");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("123 4.56 7.89 'hello' 'world'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "123 4.56 7.89 'hello' 'world'";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(")")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("(1 2 3)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("(1 2 3)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(1 2 3)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        jSTerm.makeConstant("world");
        jSTerm.print(456);
    }
}
statement is: jSTerm.makeConstant("world"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeConstant("world") target is: jSTerm method is: makeConstant(java.lang.String)
statement is: jSTerm.print(456), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print(456) target is: jSTerm method is: print(int)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("J#UY=v-reIH96");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution matches = jSTerm.matches(jSTerm, "123456789");
        jSTerm.matches(jSTerm, matches, "abcdefghijklmnopqrstuvwxyz");
    }
}
statement is: StringReader stringReader = new StringReader("J#UY=v-reIH96"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, "123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, "123456789") target is: jSTerm method is: matches(JSTerm,java.lang.String)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm.matches(jSTerm, matches, "abcdefghijklmnopqrstuvwxyz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches, "abcdefghijklmnopqrstuvwxyz") target is: jSTerm method is: matches(JSTerm,JSSubstitution,java.lang.String)
TestCase is: String string = "J#UY=v-reIH96";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "123456789";
((JSTerm) streamTokenizer).matches(jSTerm, (JSSubstitution) string);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
call.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int intValue = 10;
        double doubleValue = 2.78;
        String stringValue = "goodbye world";
        char charValue = 'b';
        boolean booleanValue = false;
        Object objectValue = new Object();
    }
}
statement is: int intValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 2.78, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "goodbye world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'b', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean booleanValue = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Object objectValue = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 2.78
* this is vulnerable: String string = "goodbye world"
* this is vulnerable: char _char = 'b'
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 10;
double _double = 2.78;
String string = "goodbye world";
char _char = 'b';
boolean _boolean = false;

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("John", "Doe", 30, "Jane Doe");
        JSSubstitution jSSubstitution1 = new JSSubstitution(10.5, "Mr.", "Ms.");
        jSTerm1.matches(jSTerm1, jSSubstitution1);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("John", "Doe", 30, "Jane Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution1 = new JSSubstitution(10.5, "Mr.", "Ms."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.matches(jSTerm1, jSSubstitution1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.matches(jSTerm1, jSSubstitution1) target is: jSTerm1 method is: matches(JSTerm,JSSubstitution)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("J#UY=v-reIH96");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.equals(new JSTerm("1234567890"));
    }
}
statement is: StringReader stringReader = new StringReader("J#UY=v-reIH96"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.equals(new JSTerm("1234567890")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(new JSTerm("1234567890")) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "J#UY=v-reIH96";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "1234567890";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("+", 2.0, "=");// Using double primitive instead of int

        JSTerm jSTerm2 = new JSTerm("-", 3.0, "!=");// Using double primitive instead of int

        jSTerm1.equals(jSTerm2);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("+", 2.0, "=")// Using double primitive instead of int
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("-", 3.0, "!=")// Using double primitive instead of int
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm2) target is: jSTerm1 method is: equals(JSTerm)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("list")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("list of numbers");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("list of numbers"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "list of numbers";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("?x = ?y + 3");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("?x = ?y + 3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "?x = ?y + 3";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, (JSSubstitution) null)
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) null);
jSTerm.applySubstitutionT(matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("J#UY=v-reIH96");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution matches = jSTerm.matches(jSTerm, ((JSSubstitution) (null)));
        jSTerm.applySubstitutionT(matches);
    }
}
statement is: StringReader stringReader = new StringReader("J#UY=v-reIH96"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, ((JSSubstitution) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, ((JSSubstitution) (null))) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: jSTerm.applySubstitutionT(matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(matches) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "J#UY=v-reIH96";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = null;
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).applySubstitutionT(matches);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(T13 a9=k~G(j_)")
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.addElement("(T13 a9=k~G(j_)");
        jSSubstitution jSSubstitution = new JSSubstitution();
        // Test data for the first scenario:
        jSTerm.addTestData("input", "10 + 2 * 3");
        jSTerm.addTestData("expectedResult", 16);
        jSTerm.applySubstitutionT(jSSubstitution);
        // Test data for the second scenario:
        jSTerm.addTestData("input", "5 - 7 / 2");
        jSTerm.addTestData("expectedResult", 3);
        jSTerm.applySubstitutionT(jSSubstitution);
        // Test data for the third scenario:
        jSTerm.addTestData("input", "10 * (5 - 3)");
        jSTerm.addTestData("expectedResult", 20);
        jSTerm.applySubstitutionT(jSSubstitution);
        // Test data for the fourth scenario:
        jSTerm.addTestData("input", "10 / (5 + 3)");
        jSTerm.addTestData("expectedResult", 2 / 7);
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.addElement("(T13 a9=k~G(j_)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(T13 a9=k~G(j_)") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Test data for the first scenario:
jSTerm.addTestData("input", "10 + 2 * 3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data for the first scenario:
jSTerm.addTestData("input", "10 + 2 * 3") target is: jSTerm method is: addTestData(java.lang.String,java.lang.String)
statement is: jSTerm.addTestData("expectedResult", 16), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addTestData("expectedResult", 16) target is: jSTerm method is: addTestData(java.lang.String,int)
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(jSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
statement is: // Test data for the second scenario:
jSTerm.addTestData("input", "5 - 7 / 2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data for the second scenario:
jSTerm.addTestData("input", "5 - 7 / 2") target is: jSTerm method is: addTestData(java.lang.String,java.lang.String)
statement is: jSTerm.addTestData("expectedResult", 3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addTestData("expectedResult", 3) target is: jSTerm method is: addTestData(java.lang.String,int)
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(jSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
statement is: // Test data for the third scenario:
jSTerm.addTestData("input", "10 * (5 - 3)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data for the third scenario:
jSTerm.addTestData("input", "10 * (5 - 3)") target is: jSTerm method is: addTestData(java.lang.String,java.lang.String)
statement is: jSTerm.addTestData("expectedResult", 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addTestData("expectedResult", 20) target is: jSTerm method is: addTestData(java.lang.String,int)
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(jSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
statement is: // Test data for the fourth scenario:
jSTerm.addTestData("input", "10 / (5 + 3)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data for the fourth scenario:
jSTerm.addTestData("input", "10 / (5 + 3)") target is: jSTerm method is: addTestData(java.lang.String,java.lang.String)
statement is: jSTerm.addTestData("expectedResult", 2 / 7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addTestData("expectedResult", 2 / 7) target is: jSTerm method is: addTestData(java.lang.String,int)
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(jSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
String string = "(T13 a9=k~G(j_)";
jSTerm.addElement(string);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?{YxlQhUi]]`?FKfyy<")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("?{YxlQhUi]]`?FKfyy<");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSSubstitution()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 0
TestCase is: JSSubstitution jSSubstitution = new JSSubstitution();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeConstant();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.makeConstant();
        jSTerm.call();
        // Improved test data
        String input = "4 + 5";
        int expectedResult = 9;
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.makeConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeConstant() target is: jSTerm method is: makeConstant()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeConstant()V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: // Improved test data
String input = "4 + 5", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedResult = 9, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "4 + 5"
* this is vulnerable: int _int = 9
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
jSTerm.makeConstant();
jSTerm.call();
String string = "4 + 5";
int _int = 9;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J#UY=v-reIH96")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("J#UY=v-reIH96");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("J#UY=v-reIH96"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "J#UY=v-reIH96";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeVariable();
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement(new JSTerm("John", "Doe"));
        jSTerm.makeVariable();
        jSTerm.cloneT();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(new JSTerm("John", "Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(new JSTerm("John", "Doe")) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeVariable()V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = null;
jSTerm.addElement(jSTerm);
jSTerm.makeVariable();
jSTerm.cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isConstant(new BigDecimal("1234567890.1234567890"), "Hello, World!");
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(new BigDecimal("1234567890.1234567890"), "Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant(new BigDecimal("1234567890.1234567890"), "Hello, World!") target is: jSTerm method is: isConstant(BigDecimal,java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before:
        int x = 5;
        String y = "Hello";
        // After:
        int x = 10;
        String y = "Goodbye";
    }
}
statement is: // Before:
int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "Hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After:
int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "Goodbye", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "Hello"
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Goodbye"
TestCase is: int _int = 5;
String string = "Hello";
int _int = 10;
String string = "Goodbye";

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for JSTerm.isFunction() method
        // Create a new JSTerm object
        JSTerm jSTerm1 = new JSTerm();
        // Add an element to the term
        jSTerm1.addElement("element1");
        // Check if the added element is a function
        assertTrue(jSTerm1.isFunction());
        // Create another JSTerm object with a null argument
        JSTerm jSTerm2 = new JSTerm(null);
        // Check if the null argument is a function
        assertFalse(jSTerm2.isFunction());
        // Create another JSTerm object with an object that is not a function
        JSTerm jSTerm3 = new JSTerm(new Object());
        // Check if the added element is a function
        assertFalse(jSTerm3.isFunction());
    }
}
statement is: // Test data for JSTerm.isFunction() method
// Create a new JSTerm object
JSTerm jSTerm1 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Add an element to the term
jSTerm1.addElement("element1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add an element to the term
jSTerm1.addElement("element1") target is: jSTerm1 method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: // Check if the added element is a function
assertTrue(jSTerm1.isFunction()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check if the added element is a function
assertTrue(jSTerm1.isFunction()) target is:  method is: assertTrue(<unknown>)
statement is: // Create another JSTerm object with a null argument
JSTerm jSTerm2 = new JSTerm(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Check if the null argument is a function
assertFalse(jSTerm2.isFunction()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check if the null argument is a function
assertFalse(jSTerm2.isFunction()) target is:  method is: assertFalse(<unknown>)
statement is: // Create another JSTerm object with an object that is not a function
JSTerm jSTerm3 = new JSTerm(new Object()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Check if the added element is a function
assertFalse(jSTerm3.isFunction()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check if the added element is a function
assertFalse(jSTerm3.isFunction()) target is:  method is: assertFalse(<unknown>)
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "element1";
jSTerm.addElement(string);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("x");
        jSTerm1.makeVariable();
        jSTerm1.isVariable();// Expect true

        JSTerm jSTerm2 = new JSTerm(5);
        jSTerm2.makeVariable();
        jSTerm2.isVariable();// Expect false }}

    }
}
statement is: JSTerm jSTerm1 = new JSTerm("x"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeVariable() target is: jSTerm1 method is: makeVariable()
statement is: jSTerm1.isVariable()// Expect true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.isVariable()// Expect true
 target is: jSTerm1 method is: isVariable()
statement is: JSTerm jSTerm2 = new JSTerm(5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeVariable() target is: jSTerm2 method is: makeVariable()
statement is: jSTerm2.isVariable()// Expect false }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.isVariable()// Expect false }}
 target is: jSTerm2 method is: isVariable()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: invalid parameter 'x'");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.matches(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: invalid parameter 'x'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "JSTerm: Error reading control parameters: invalid parameter 'x'";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(T13 a9=k~G(j_)")
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeEval(true);
        jSTerm.addElement("(T13 a9=k~G(j_)");
        jSTerm.addElement("(S12 b8=h~F(i_)");
        jSTerm.addElement("(R4 c7=g~E(f_)");
        jSTerm.standardizerTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: makeEval(Z)V
statement is: jSTerm.addElement("(T13 a9=k~G(j_)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(T13 a9=k~G(j_)") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.addElement("(S12 b8=h~F(i_)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(S12 b8=h~F(i_)") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.addElement("(R4 c7=g~E(f_)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(R4 c7=g~E(f_)") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
boolean _boolean = true;
jSTerm.makeEval(_boolean);
String string = "(T13 a9=k~G(j_)";
jSTerm.addElement(string);
String string = "(S12 b8=h~F(i_)";
jSTerm.addElement(string);
String string = "(R4 c7=g~E(f_)";
jSTerm.addElement(string);
jSTerm.standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Undefined function to be evaluated  in Call statement")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("Undefined function to be evaluated  in Call statement");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The area of a circle with radius 5 is 78.5.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("The area of a circle with radius 5 is 78.5."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "The area of a circle with radius 5 is 78.5.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

* test suite isTestSuite: 117
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 2: 
StringReader stringReader = new StringReader("(g1 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 4: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Ivock(wrlFZhpr>");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(*}G{l![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("($}G{![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("T13 a9=k~G(j)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.print();
Test 13: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 14: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 16: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 17: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("?`%TQ xXiUfWaL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.clear();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 21: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.equals(jSTerm);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.makeVariable();
call.equals(jSTerm);
Test 23: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 24: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 25: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.equals(jSTerm);
Test 26: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 27: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 28: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
call.addElement(jSTerm);
call.isGround();
Test 31: 
StringReader stringReader = new StringReader("c-vodb3ltw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.addAll((Collection) jSTerm);
call.standardizerTerm();
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 34: 
StringReader stringReader = new StringReader("?ZdBUBB},}");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 36: 
StringReader stringReader = new StringReader("zm4nIcKRb#6%m^j9>J");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 38: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 40: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 41: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 43: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  call.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 45: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 46: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 47: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);
Test 48: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 49: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 50: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 51: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) null);
jSTerm.applySubstitutionT(matches);
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 53: 
StringReader stringReader = new StringReader("?{YxlQhUi]]`?FKfyy<");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeConstant();
jSTerm.call();
Test 55: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.isEval();
Test 59: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.isFunction();
Test 60: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 61: 
StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.standardizerTerm();
Test 63: 
StringReader stringReader = new StringReader("Undefined function to be evaluated  in Call statement");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 64: 
JSTerm jSTerm = new JSTerm();

Test 65: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 66: 
StringReader stringReader = new StringReader("(g1 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm);

Test 67: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 68: 
StringReader stringReader = new StringReader("Hello, world! \t\n\"");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 69: 
StringReader stringReader = new StringReader("Hello, World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 70: 
StringReader stringReader = new StringReader("Welcome to the Java world of programming! The sun is shining brightly today.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
StringReader stringReader = new StringReader("((x + y) * 3 - 4)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 73: 
StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_);alert('Hello World!');");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 74: 
StringReader stringReader = new StringReader("T13 a9=k~G(123456789)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
jSTerm.print();

Test 75: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 76: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement((Object) null);
jSTerm.print();

Test 77: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

Test 78: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 79: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "2nrvV)s0=F%-]c");
String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 80: 
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 81: 
StringReader stringReader = new StringReader("This is a sample input string.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
jSTerm.matches(jSTerm, matches);

Test 82: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

Test 83: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();

Test 84: 
StringReader stringReader = new StringReader("(T15 a11=k~I(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
StringReader stringReader = new StringReader("(T16 a12=k~J(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 85: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 86: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((Vector) streamTokenizer).addElement(jSTerm);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 87: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

Test 88: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_) \u2026\u2026");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

Test 89: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 90: 
StringReader stringReader = new StringReader("c-vodb3ltw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

Test 91: 
JSTerm jSTerm = new JSTerm();
jSTerm.call();

Test 92: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

Test 93: 
StringReader stringReader = new StringReader("pi=3.14");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 94: 
JSTerm jSTerm = new JSTerm();

Test 95: 
JSTerm jSTerm = new JSTerm();

Test 96: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

Test 97: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("123 4.56 7.89 'hello' 'world'");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 98: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(1 2 3)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 99: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "123456789";
((JSTerm) streamTokenizer).matches(jSTerm, (JSSubstitution) string);

Test 100: 

Test 101: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 102: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "1234567890";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 103: 
StringReader stringReader = new StringReader("list of numbers");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

Test 104: 
StringReader stringReader = new StringReader("?x = ?y + 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 105: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, (JSSubstitution) null);
((JSTerm) streamTokenizer).applySubstitutionT(matches);

Test 106: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);

Test 107: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 108: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeConstant();
jSTerm.call();

Test 109: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).cloneT();

Test 110: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement((Object) null);
jSTerm.makeVariable();
jSTerm.cloneT();

Test 111: 
JSTerm jSTerm = new JSTerm();

Test 112: 

Test 113: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("element1");

Test 114: 
StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: invalid parameter 'x'");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm);

Test 115: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.addElement("(S12 b8=h~F(i_)");
jSTerm.addElement("(R4 c7=g~E(f_)");
jSTerm.standardizerTerm();

Test 116: 
StringReader stringReader = new StringReader("The area of a circle with radius 5 is 78.5.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();


* Generated after the refinement and before minimization 117 tests with total length 466
* test suite isTestSuite: 117
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 2: 
StringReader stringReader = new StringReader("(g1 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 4: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Ivock(wrlFZhpr>");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(*}G{l![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("($}G{![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("T13 a9=k~G(j)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.print();
Test 13: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 14: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 16: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 17: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("?`%TQ xXiUfWaL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 20: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.clear();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 21: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.equals(jSTerm);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.makeVariable();
call.equals(jSTerm);
Test 23: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 24: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 25: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.equals(jSTerm);
Test 26: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 27: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 28: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 29: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
call.addElement(jSTerm);
call.isGround();
Test 31: 
StringReader stringReader = new StringReader("c-vodb3ltw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.addAll((Collection) jSTerm);
call.standardizerTerm();
Test 33: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 34: 
StringReader stringReader = new StringReader("?ZdBUBB},}");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 36: 
StringReader stringReader = new StringReader("zm4nIcKRb#6%m^j9>J");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 38: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 40: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 41: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 43: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  call.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 45: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 46: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 47: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);
Test 48: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 49: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 50: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 51: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) null);
jSTerm.applySubstitutionT(matches);
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 53: 
StringReader stringReader = new StringReader("?{YxlQhUi]]`?FKfyy<");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeConstant();
jSTerm.call();
Test 55: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.isEval();
Test 59: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.isFunction();
Test 60: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 61: 
StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.standardizerTerm();
Test 63: 
StringReader stringReader = new StringReader("Undefined function to be evaluated  in Call statement");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 64: 
JSTerm jSTerm = new JSTerm();

Test 65: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 66: 
StringReader stringReader = new StringReader("(g1 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm);

Test 67: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 68: 
StringReader stringReader = new StringReader("Hello, world! \t\n\"");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 69: 
StringReader stringReader = new StringReader("Hello, World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 70: 
StringReader stringReader = new StringReader("Welcome to the Java world of programming! The sun is shining brightly today.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
StringReader stringReader = new StringReader("((x + y) * 3 - 4)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 73: 
StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_);alert('Hello World!');");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 74: 
StringReader stringReader = new StringReader("T13 a9=k~G(123456789)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
jSTerm.print();

Test 75: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 76: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement((Object) null);
jSTerm.print();

Test 77: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();

Test 78: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 79: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "2nrvV)s0=F%-]c");
String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 80: 
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 81: 
StringReader stringReader = new StringReader("This is a sample input string.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
jSTerm.matches(jSTerm, matches);

Test 82: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

Test 83: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();

Test 84: 
StringReader stringReader = new StringReader("(T15 a11=k~I(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
StringReader stringReader = new StringReader("(T16 a12=k~J(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 85: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 86: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((Vector) streamTokenizer).addElement(jSTerm);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 87: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

Test 88: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_) \u2026\u2026");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

Test 89: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 90: 
StringReader stringReader = new StringReader("c-vodb3ltw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();

Test 91: 
JSTerm jSTerm = new JSTerm();
jSTerm.call();

Test 92: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

Test 93: 
StringReader stringReader = new StringReader("pi=3.14");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 94: 
JSTerm jSTerm = new JSTerm();

Test 95: 
JSTerm jSTerm = new JSTerm();

Test 96: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

Test 97: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("123 4.56 7.89 'hello' 'world'");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 98: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(1 2 3)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 99: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "123456789";
((JSTerm) streamTokenizer).matches(jSTerm, (JSSubstitution) string);

Test 100: 

Test 101: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 102: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "1234567890";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 103: 
StringReader stringReader = new StringReader("list of numbers");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).toStr();

Test 104: 
StringReader stringReader = new StringReader("?x = ?y + 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 105: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, (JSSubstitution) null);
((JSTerm) streamTokenizer).applySubstitutionT(matches);

Test 106: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);
jSTerm.applySubstitutionT(jSSubstitution);

Test 107: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 108: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeConstant();
jSTerm.call();

Test 109: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).cloneT();

Test 110: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement((Object) null);
jSTerm.makeVariable();
jSTerm.cloneT();

Test 111: 
JSTerm jSTerm = new JSTerm();

Test 112: 

Test 113: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("element1");

Test 114: 
StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: invalid parameter 'x'");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).matches(jSTerm);

Test 115: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.addElement("(S12 b8=h~F(i_)");
jSTerm.addElement("(R4 c7=g~E(f_)");
jSTerm.standardizerTerm();

Test 116: 
StringReader stringReader = new StringReader("The area of a circle with radius 5 is 78.5.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();


* Minimizing test suite
* test suite isTestSuite: 65
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement(jSTerm);
jSTerm.print();
Test 3: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("%Ivock(wrlFZhpr>");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 7: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(*}G{l![|");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(1 2 3)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(XTuo\"V9=k~G(j_);alert('Hello World!');");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 13: 
StringReader stringReader = new StringReader("T13 a9=k~G(j)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.print();
Test 14: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 16: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 17: 
StringReader stringReader = new StringReader("?{YxlQhUi]]`?FKfyy<");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) null);
jSTerm.applySubstitutionT(matches);
Test 19: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 20: 
StringReader stringReader = new StringReader("JSTerm: Error reading control parameters: ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 21: 
StringReader stringReader = new StringReader("?`%TQ xXiUfWaL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 22: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.clear();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(call, jSSubstitution);
Test 23: 
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.equals(jSTerm);
Test 24: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.makeVariable();
call.equals(jSTerm);
Test 25: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 26: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 27: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.equals(jSTerm);
Test 28: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 29: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 30: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 31: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isGround();
Test 32: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
call.addElement(jSTerm);
call.isGround();
Test 33: 
StringReader stringReader = new StringReader("c-vodb3ltw");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 34: 
StringReader stringReader = new StringReader("Undefined function to be evaluated  in Call statement");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.standardizerTerm();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.addElement("(S12 b8=h~F(i_)");
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 37: 
StringReader stringReader = new StringReader("(T13 a9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 38: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 39: 
StringReader stringReader = new StringReader("?ZdBUBB},}");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 40: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 45: 
StringReader stringReader = new StringReader("2nrvV)s0=F%-]c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 46: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  call.matches(jSTerm, jSSubstitution);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 49: 
StringReader stringReader = new StringReader("(<T13 V9=k~G(j_)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 50: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 51: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 53: 
StringReader stringReader = new StringReader("list");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 54: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 55: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.makeConstant();
jSTerm.call();
Test 57: 
StringReader stringReader = new StringReader("J#UY=v-reIH96");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 58: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement((Object) null);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 59: 
StringReader stringReader = new StringReader("zm4nIcKRb#6%m^j9>J");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 60: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.isEval();
Test 61: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
JSTerm call = jSTerm.call();
call.isFunction();
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 63: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeEval(true);
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.standardizerTerm();
Test 64: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.addAll((Collection) jSTerm);
jSTerm.standardizerTerm();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 79%
* Total number of goals: 192
* Number of covered goals: 152
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 318
* Number of covered goals: 260
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 123
* Number of covered goals: 83
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 192
* Number of covered goals: 152
* Generated 65 tests with total length 265
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 65%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testPrintWithUndeclaredException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean function = jSTerm.isFunction();
assertFalse(function);


** It was a parseable test case! 
refined test name is: testIsFunctionWhenValueShouldReturnFalse
* Compiling Tests
refined test name is: testIsFunctionReturnsFalseForJSTermObjectWithValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeEval(true);
arg0.addElement(arg0);
arg0.print();
assertTrue(arg0.isEval());


** It was a parseable test case! 
refined test name is: testMakeEvalWithTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
boolean equals = jSTerm.equals(arg0);
assertTrue(jSTerm.isConstant());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testTermEqualityIsNotReflexive
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.addElement(arg0);
JSTerm call = arg0.call();
call.makeVariable();
boolean equals = call.equals(arg0);
assertTrue(call.isVariable());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testCallOnJSTermWithVariableElement
* Compiling Tests
refined test name is: testCallOnJSTermWithVariableElement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
boolean ground = jSTerm.isGround();
assertTrue(jSTerm.isVariable());
assertFalse(ground);


** It was a parseable test case! 
refined test name is: testMakeVariableShouldReturnVariableTerm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.addElement(arg0);
JSTerm call = arg0.call();
arg0.makeVariable();
call.addElement(arg0);
boolean ground = call.isGround();
assertEquals("[[(this Collection)], [(this Collection)]]", call.toString());
assertFalse(ground);


** It was a parseable test case! 
refined test name is: testCallMethodOnSubjectTerm
* Compiling Tests
refined test name is: testAddElementAndCallNotGround
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(T13 a9=k~G(j_)");
JSTerm standardizerTerm = jSTerm.standardizerTerm();
assertFalse(standardizerTerm.isEval());
assertFalse(standardizerTerm.isConstant());
assertTrue(standardizerTerm.isFunction());


** It was a parseable test case! 
refined test name is: testExtractStandardizerTermFromJSTerm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(T13 a9=k~G(j_)");
jSTerm.addElement("(S12 b8=h~F(i_)");
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}


** It was a parseable test case! 
refined test name is: testStandardizerTermthrowsClassCastException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
assertTrue(jSTerm.isVariable());

jSTerm.call();
assertFalse(jSTerm.isConstant());


** It was a parseable test case! 
refined test name is: testJSTermVariableCreationAndUse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean eval = jSTerm.isEval();
assertFalse(eval);


* Computation finished
