* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSTerm
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 14545
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:09:58.523 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:09:58.545 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:09:58.551 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:09:58.635 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSTerm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 846
* Using seed 1709280596538
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 201 / 846
[MASTER] 08:09:59.427 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:>                             0%] [Cov:==============>                    42%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:================>                  48%][Progress:>                             1%] [Cov:=================>                 49%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             2%] [Cov:===================>               56%][Progress:>                             2%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              59%][Progress:>                             3%] [Cov:=====================>             61%][Progress:>                             3%] [Cov:=====================>             62%][Progress:>                             3%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            63%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:=======================>           67%][Progress:=>                            5%] [Cov:=======================>           68%][Progress:=>                            5%] [Cov:=======================>           68%][Progress:=>                            5%] [Cov:=======================>           68%][Progress:=>                            6%] [Cov:=======================>           68%][Progress:=>                            6%] [Cov:=======================>           68%][Progress:=>                            6%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:=======================>           68%][Progress:==>                           8%] [Cov:=======================>           68%][Progress:==>                           8%] [Cov:=======================>           68%][Progress:==>                           8%] [Cov:=======================>           68%][Progress:==>                           8%] [Cov:========================>          69%][Progress:==>                           8%] [Cov:========================>          69%][MASTER] 08:10:08.017 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:==>                           9%] [Cov:========================>          69%][Progress:==>                           9%] [Cov:========================>          69%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:==>                           9%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          11%] [Cov:========================>          70%][Progress:===>                          12%] [Cov:========================>          70%][Progress:===>                          12%] [Cov:========================>          70%][Progress:===>                          12%] [Cov:========================>          70%][Progress:===>                          12%] [Cov:========================>          70%][Progress:===>                          12%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:====>                         14%] [Cov:========================>          70%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         14%] [Cov:========================>          71%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         72%][Progress:====>                         16%] [Cov:=========================>         73%][Progress:====>                         16%] [Cov:=========================>         73%][Progress:=====>                        17%] [Cov:=========================>         73%][Progress:=====>                        17%] [Cov:=========================>         73%][Progress:=====>                        17%] [Cov:=========================>         73%][Progress:=====>                        17%] [Cov:=========================>         73%][Progress:=====>                        17%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:=====>                        19%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       20%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       21%] [Cov:=========================>         73%][Progress:======>                       22%] [Cov:=========================>         73%][Progress:======>                       22%] [Cov:=========================>         73%][Progress:======>                       22%] [Cov:=========================>         73%][Progress:======>                       22%] [Cov:=========================>         73%][Progress:======>                       22%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:======>                       23%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      24%] [Cov:=========================>         73%][Progress:=======>                      25%] [Cov:=========================>         73%][Progress:=======>                      25%] [Cov:=========================>         73%][Progress:=======>                      25%] [Cov:=========================>         73%][Progress:=======>                      25%] [Cov:=========================>         73%][Progress:=======>                      25%] [Cov:=========================>         73%][Progress:=======>                      26%] [Cov:=========================>         73%][Progress:=======>                      26%] [Cov:=========================>         73%][Progress:=======>                      26%] [Cov:=========================>         73%][Progress:=======>                      26%] [Cov:=========================>         73%][Progress:=======>                      26%] [Cov:=========================>         73%][Progress:========>                     27%] [Cov:=========================>         73%][Progress:========>                     27%] [Cov:=========================>         73%][Progress:========>                     27%] [Cov:=========================>         73%][Progress:========>                     27%] [Cov:=========================>         73%][Progress:========>                     27%] [Cov:=========================>         73%][Progress:========>                     28%] [Cov:=========================>         73%][Progress:========>                     28%] [Cov:=========================>         73%][Progress:========>                     28%] [Cov:=========================>         73%][Progress:========>                     28%] [Cov:=========================>         73%][Progress:========>                     28%] [Cov:=========================>         73%][Progress:========>                     28%] [Cov:=========================>         73%][Progress:========>                     29%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    32%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         73%][Progress:=========>                    33%] [Cov:=========================>         74%][Progress:=========>                    33%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   34%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   35%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:==========>                   36%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  37%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  38%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:=========================>         74%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:===========>                  39%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 40%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 41%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 42%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:============>                 43%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                44%] [Cov:==========================>        75%][Progress:=============>                45%] [Cov:==========================>        75%][Progress:=============>                45%] [Cov:==========================>        75%][Progress:=============>                45%] [Cov:==========================>        75%][Progress:=============>                45%] [Cov:==========================>        75%][Progress:=============>                45%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:=============>                46%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               47%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               48%] [Cov:==========================>        75%][Progress:==============>               49%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              52%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             54%] [Cov:==========================>        75%][Progress:================>             55%] [Cov:==========================>        75%][Progress:================>             55%] [Cov:==========================>        75%][Progress:================>             55%] [Cov:==========================>        75%][Progress:================>             55%] [Cov:==========================>        75%][Progress:================>             55%] [Cov:==========================>        75%][Progress:================>             55%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        75%][Progress:=================>            57%] [Cov:==========================>        75%][Progress:=================>            57%] [Cov:==========================>        75%][Progress:=================>            57%] [Cov:==========================>        75%][Progress:=================>            57%] [Cov:==========================>        75%][Progress:=================>            57%] [Cov:==========================>        75%][Progress:=================>            57%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:======================>       75%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:=======================>      79%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:========================>     83%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    84%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    85%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:=========================>    86%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   87%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   88%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:==========================>   89%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        76%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:=============================>99%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%][Progress:==============================100%] [Cov:==========================>        77%]
* Search finished after 104s and 553 generations, 193664 statements, best individual has fitness: 224.0
* Generated before the refinement 72 tests with total length 345
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        int result = ((int) (jSTerm.call("add", 2, 3)));
        assertEquals(5, result);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
statement is: int result = ((int) (jSTerm.call("add", 2, 3))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((int) (jSTerm.call("add", 2, 3))) target is: jSTerm method is: call(java.lang.String,int,int)
statement is: assertEquals(5, result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(5, result) target is:  method is: assertEquals(int,int)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("4w>3?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("4w>3?");// Test data for StreamTokenizer to read a valid mathematical expression

        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("4w>3?")// Test data for StreamTokenizer to read a valid mathematical expression
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "4w>3?";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w(A!_1XrR`")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w(A!_1XrR`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
    }
}
statement is: StringReader stringReader = new StringReader("w(A!_1XrR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
TestCase is: String string = "w(A!_1XrR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: nextToken()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nextToken = streamTokenizer.nextToken()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader2 = new StringReader("iw(Ab3zy!_1X1ruR` ");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        streamTokenizer2.nextToken();
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        // Multi-line input:
        StringReader stringReader3 = new StringReader("This is a test string with multiple lines.\nIt has several special characters like !@#$%^&*()_+-=[]{}|;\':\"\\,./<>?`~ and spaces.");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        streamTokenizer3.nextToken();
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
    }
}
statement is: StringReader stringReader2 = new StringReader("iw(Ab3zy!_1X1ruR` "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer2.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer2.nextToken() target is: streamTokenizer2 method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 2
Matched Method is: nextToken()I
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Multi-line input:
StringReader stringReader3 = new StringReader("This is a test string with multiple lines.\nIt has several special characters like !@#$%^&*()_+-=[]{}|;\':\"\\,./<>?`~ and spaces."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer3.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer3.nextToken() target is: streamTokenizer3 method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 7
Matched Method is: nextToken()I
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "iw(Ab3zy!_1X1ruR` ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "This is a test string with multiple lines.\nIt has several special characters like !@#$%^&*()_+-=[]{}|;':\"\\,./<>?`~ and spaces.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello World!\"");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "\"Hello World!\"";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?f9VLV8.i(NI&~XJL")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("?f9VLV8.i(NI&~XJL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("100.25");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("100.25"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "100.25";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("% ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("% ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello world! %");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        streamTokenizer.ordinaryChar('%');
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Hello world! %"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer.ordinaryChar('%'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer.ordinaryChar('%') target is: streamTokenizer method is: ordinaryChar(char)
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello world! %";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(1.23456789 2.3456789 \"hello\" true)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(1.23456789 2.3456789 \"hello\" true)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(1.23456789 2.3456789 \"hello\" true)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(%")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(1 + 2)");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(1 + 2)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(1 + 2)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: nextToken()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nextToken = streamTokenizer.nextToken()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        streamTokenizer.nextToken();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data:
        StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        streamTokenizer.nextToken();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.setInput("42");
    }
}
statement is: StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer.nextToken() target is: streamTokenizer method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 2
Matched Method is: nextToken()I
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer.nextToken() target is: streamTokenizer method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 7
Matched Method is: nextToken()I
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setInput("42"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setInput("42") target is: jSTerm method is: setInput(java.lang.String)
TestCase is: String string = "R2(>~>6~!IcH,?%R";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "R2(>~>6~!IcH,?%R";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(-I-4PG^QcQ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(-I-4PG^QcQ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(-I-4PG^QcQ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(-I-4PG^QcQ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(-I-4PG^QcQ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: nextToken()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nextToken = streamTokenizer.nextToken()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        streamTokenizer.nextToken();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data:
        StringReader stringReader2 = new StringReader("iw(A3zy!1X1ruR`");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        streamTokenizer2.nextToken();
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        // Improved test data:
        StringReader stringReader3 = new StringReader("iw(A3zy!1X1ruR`");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        streamTokenizer3.nextToken();
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        // Improved test data:
        StringReader stringReader4 = new StringReader("iw(A3zy!1X1ruR`");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        streamTokenizer4.nextToken();
        JSTerm jSTerm4 = new JSTerm(streamTokenizer4);
    }
}
statement is: StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer.nextToken() target is: streamTokenizer method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 2
Matched Method is: nextToken()I
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
StringReader stringReader2 = new StringReader("iw(A3zy!1X1ruR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer2.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer2.nextToken() target is: streamTokenizer2 method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 7
Matched Method is: nextToken()I
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
StringReader stringReader3 = new StringReader("iw(A3zy!1X1ruR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer3.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer3.nextToken() target is: streamTokenizer3 method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 12
Matched Method is: nextToken()I
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
StringReader stringReader4 = new StringReader("iw(A3zy!1X1ruR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer4.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer4.nextToken() target is: streamTokenizer4 method is: nextToken()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type java.io.StreamTokenizerindex is: 17
Matched Method is: nextToken()I
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(")X{X()3DcY[?x^x")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: StringReader stringReader = new StringReader(")X{X()3DcY[?x^x");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
* this is vulnerable: StreamTokenizer streamTokenizer = null
TestCase is: JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = null;

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm jSTerm1 = new JSTerm(42);// Integer value of 42

        JSTerm jSTerm2 = new JSTerm(3.14);// Double value of pi

        JSTerm jSTerm3 = new JSTerm("Hello World!");// String value }}

    }
}
statement is: // Improved test data
JSTerm jSTerm1 = new JSTerm(42)// Integer value of 42
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(3.14)// Double value of pi
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm("Hello World!")// String value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("calculateSum(2, 3);");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.makeFunction();
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("calculateSum(2, 3);"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "calculateSum(2, 3);";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w(A!'1Xr+`")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("w(A!'1Xr+`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w(A!'1Xr+`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("w(A!'1Xr+`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "w(A!'1Xr+`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).cloneT();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSSubstitution()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 0
TestCase is: JSSubstitution jSSubstitution = new JSSubstitution();

statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%A~j``}[})m@MX<X$'c")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("%A~j``}[})m@MX<X$'c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSSubstitution jSSubstitution = new JSSubstitution();
        StringReader stringReader = new StringReader("This is a test sentence.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("This is a test sentence."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: JSSubstitution jSSubstitution = new JSSubstitution();
String string = "This is a test sentence.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("4 + 5 * 6 - 7");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement(jSTerm);
        jSTerm.makeFunction();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("4 + 5 * 6 - 7"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "4 + 5 * 6 - 7";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((Vector) streamTokenizer).addElement(jSTerm);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2JP[O")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("2JP[O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2JP[O");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("2JP[O"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: String string = "2JP[O";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("4w>3?")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("42>3.14");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution matches = jSTerm.matches(jSTerm);
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: StringReader stringReader = new StringReader("42>3.14"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "42>3.14";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("h;\"iB");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer);
        jSTerm1.makeVariable();
        JSTerm jSTerm2 = new JSTerm();
        jSTerm2.matches(jSTerm1);
    }
}
statement is: StringReader stringReader = new StringReader("h;\"iB"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeVariable() target is: jSTerm1 method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSTerm jSTerm2 = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.matches(jSTerm1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.matches(jSTerm1) target is: jSTerm2 method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "h;\"iB";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
((JSTerm) _void).matches(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.matches(jSTerm);
        int maxTokens = 15;
        char delimiter = ',';
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: int maxTokens = 15, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char delimiter = ',', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 15
* this is vulnerable: char _char = ','
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).matches(jSTerm);
int _int = 15;
char _char = ',';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJO!{:lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("6npHJO!{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 5
Matched Method is: makeFunction()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJO/{:lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: addAll(Ljava/util/Collection;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addAll = arg0.addAll((Collection) arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
test data is: StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.addAll(((Collection) (jSTerm)));
        jSTerm.matches(jSTerm);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
statement is: jSTerm.addAll(((Collection) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addAll(((Collection) (jSTerm))) target is: jSTerm method is: addAll(Collection)
statement is: jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("x");
        jSTerm1.equals(jSTerm1);// This line should return true, as it compares an object to itself.

        JSTerm jSTerm2 = new JSTerm("y");
        jSTerm2.equals(jSTerm1);// This line should return false, as it compares two objects that have different names. }}

    }
}
statement is: JSTerm jSTerm1 = new JSTerm("x"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm1)// This line should return true, as it compares an object to itself.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm1)// This line should return true, as it compares an object to itself.
 target is: jSTerm1 method is: equals(JSTerm)
statement is: JSTerm jSTerm2 = new JSTerm("y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.equals(jSTerm1)// This line should return false, as it compares two objects that have different names. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.equals(jSTerm1)// This line should return false, as it compares two objects that have different names. }}
 target is: jSTerm2 method is: equals(JSTerm)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("John", "Smith", 34, Gender.MALE);
        JSTerm jSTerm2 = new JSTerm("Jane", "Doe", 30, Gender.FEMALE);
        assertTrue(jSTerm1.equals(jSTerm2));
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("John", "Smith", 34, Gender.MALE), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("Jane", "Doe", 30, Gender.FEMALE), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(jSTerm1.equals(jSTerm2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(jSTerm1.equals(jSTerm2)) target is:  method is: assertTrue(<unknown>)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        JSTerm jSTerm = new JSTerm();
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 5
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm jSTerm = new JSTerm();
((JSTerm) _void).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w(A!_1XrR`")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: addAll(Ljava/util/Collection;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addAll = arg0.addAll((Collection) arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w(A!_1XrR`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.addAll(((Collection) (jSTerm)));
        String[] testStrings = new String[]{ "apple", "banana", "cherry" };
        for (int i = 0; i < testStrings.length; i++) {
            String stringToAdd = testStrings[i];
            jSTerm.equals(stringToAdd);
        }
    }
}
statement is: StringReader stringReader = new StringReader("w(A!_1XrR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.addAll(((Collection) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addAll(((Collection) (jSTerm))) target is: jSTerm method is: addAll(Collection)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: addAll(Ljava/util/Collection;)Z
statement is: String[] testStrings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < testStrings.length; i++) {
    String stringToAdd = testStrings[i];
    jSTerm.equals(stringToAdd);
}, class spoon.support.reflect.code.CtForImpl
TestCase is: String string = "w(A!_1XrR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((Vector) streamTokenizer).addAll((Collection) jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A complex mathematical expression with multiple variables and operators, such as '(x + y) * z - (w / u)'");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("A complex mathematical expression with multiple variables and operators, such as '(x + y) * z - (w / u)'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "A complex mathematical expression with multiple variables and operators, such as '(x + y) * z - (w / u)'";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJ/{:lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.toStr();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w(A!_1XrR`")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w(A!_1XrR`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("w(A!_1XrR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "w(A!_1XrR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("w(A!_1XrR`")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(2259)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.setSize(2259);
jSTerm.makeFunction();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("w(A!_1XrR`");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.setSize(2259);
        jSTerm.makeFunction();
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("w(A!_1XrR`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.setSize(2259), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setSize(2259) target is: jSTerm method is: setSize(int)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: setSize(I)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "w(A!_1XrR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
int _int = 2259;
((Vector) streamTokenizer).setSize(_int);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJ/{:lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("100;\"world");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.isGround();
    }
}
statement is: StringReader stringReader = new StringReader("100;\"world"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: String string = "100;\"world";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJO/{:lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) arg0)
statement is: addAll(Ljava/util/Collection;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addAll = jSTerm.addAll((Collection) arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
LinkedList<Object> linkedList = new LinkedList<Object>();
JSTerm jSTerm = new JSTerm(streamTokenizer);
linkedList.add((Object) jSTerm);
jSTerm.addAll((Collection) linkedList);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        LinkedList<Object> linkedList = new LinkedList<Object>();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        linkedList.add(((Object) (jSTerm)));
        jSTerm.addAll(((Collection) (linkedList)));
        jSTerm.isGround();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
statement is: LinkedList<Object> linkedList = new LinkedList<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: linkedList.add(((Object) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(((Object) (jSTerm))) target is: linkedList method is: add(java.lang.Object)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 4, type java.util.LinkedList<java.lang.Object>index is: 0
Matched Method is: add(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: add(Ljava/lang/Object;)Z
statement is: jSTerm.addAll(((Collection) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addAll(((Collection) (linkedList))) target is: jSTerm method is: addAll(Collection)
source statement: JSTerm jSTerm = null callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 1
Matched Method is: addAll(Ljava/util/Collection;)Z
TestCase Could not be added: addAll(Ljava/util/Collection;)Z
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: JSTerm jSTerm = null callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 1
Matched Method is: isGround()Z
TestCase Could not be added: isGround()Z
* this is vulnerable: JSTerm jSTerm = null
TestCase is: LinkedList<Object> linkedList = new LinkedList<Object>();
JSTerm jSTerm = null;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("h;\"iB");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("h;\"iB"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "h;\"iB";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : 12345");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("Line : 12345"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "Line : 12345";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h;\"iB")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement((Object) null)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addElement((Object) null);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("h;\"iB");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.addElement(((Object) ("This is a test string with some special characters like !@#$%^&*()_+{}[]`~-=\\|;\':\"<>,./?")));
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("h;\"iB"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.addElement(((Object) ("This is a test string with some special characters like !@#$%^&*()_+{}[]`~-=\\|;\':\"<>,./?"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(((Object) ("This is a test string with some special characters like !@#$%^&*()_+{}[]`~-=\\|;\':\"<>,./?"))) target is: jSTerm method is: addElement(java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "h;\"iB";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
String string = "This is a test string with some special characters like !@#$%^&*()_+{}[]`~-=\\|;':\"<>,./?";
((Vector) streamTokenizer).addElement(string);
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input for testing purposes");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.makeFunction();
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input for testing purposes"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "This is a sample input for testing purposes";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Go8(gA{yVv")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("Go8(gA{yVv");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.call();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(A3zy!_1X1ruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: addAll(Ljava/util/Collection;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addAll = arg0.addAll((Collection) arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("iw(A3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is an example input");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.addAll(((Collection) (jSTerm)));
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("This is an example input"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.addAll(((Collection) (jSTerm))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addAll(((Collection) (jSTerm))) target is: jSTerm method is: addAll(Collection)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: addAll(Ljava/util/Collection;)Z
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "This is an example input";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((Vector) streamTokenizer).addAll((Collection) jSTerm);
((JSTerm) streamTokenizer).call();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm(1234567890, "abcdefghijklmnopqrstuvwxyz");
        jSTerm.makeConstant();
        jSTerm.call();
    }
}
statement is: JSTerm jSTerm = new JSTerm(1234567890, "abcdefghijklmnopqrstuvwxyz"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeConstant() target is: jSTerm method is: makeConstant()
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isEval();
        // Improved test data:
        int x = 10;// instead of using the primitive value 10, we can use a more descriptive variable name like "ten" to make the code more readable and easier to understand.

        String y = "hello";// Instead of using the String literal "hello", we can use a more descriptive String variable like "greeting" to make the code more readable and easier to understand.

        jSTerm.isEval();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isEval()Z
statement is: // Improved test data:
int x = 10// instead of using the primitive value 10, we can use a more descriptive variable name like "ten" to make the code more readable and easier to understand.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "hello"// Instead of using the String literal "hello", we can use a more descriptive String variable like "greeting" to make the code more readable and easier to understand.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isEval()Z
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "hello"
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
int _int = 10;
String string = "hello";
jSTerm.isEval();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("fWw'VK08[")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: StringReader stringReader = new StringReader("fWw'VK08[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isVariable();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable() target is: jSTerm method is: isVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isVariable()Z
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isVariable();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with numbers 1234 and special characters $%^&*()_+");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with numbers 1234 and special characters $%^&*()_+"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a test string with numbers 1234 and special characters $%^&*()_+";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("not")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("123abc");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("123abc"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "123abc";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("not")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, (JSSubstitution) null)
test data is: StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
standardizerTerm.makeFunction();
jSTerm.matches(standardizerTerm, (JSSubstitution) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("the sun is shining brightly");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm standardizerTerm = jSTerm.standardizerTerm();
        standardizerTerm.makeFunction();
        jSTerm.matches(standardizerTerm, ((JSSubstitution) (null)));
    }
}
statement is: StringReader stringReader = new StringReader("the sun is shining brightly"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm standardizerTerm = jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
statement is: standardizerTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: standardizerTerm.makeFunction() target is: standardizerTerm method is: makeFunction()
source statement: standardizerTerm()Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: makeFunction()V
statement is: jSTerm.matches(standardizerTerm, ((JSSubstitution) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(standardizerTerm, ((JSSubstitution) (null))) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "the sun is shining brightly";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = ((JSTerm) streamTokenizer).standardizerTerm();
jSTerm.makeFunction();
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).matches(standardizerTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("not")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("not");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(new JSTerm("not"), new JSSubstitution());
    }
}
statement is: StringReader stringReader = new StringReader("not"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(new JSTerm("not"), new JSSubstitution()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(new JSTerm("not"), new JSSubstitution()) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "not";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
String string = "not";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : Hello World");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Line : Hello World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "Line : Hello World";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, (JSSubstitution) null)
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSTerm jSTerm = new JSTerm();
        jSTerm.matches(jSTerm, ((JSSubstitution) (null)));
    }
}
statement is: StringReader stringReader = new StringReader("Line : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, ((JSSubstitution) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, ((JSSubstitution) (null))) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Line : ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = null;
((JSTerm) _void).matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        JSSubstitution matches = jSTerm.matches(jSTerm);
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution;
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
JSTerm call = jSTerm.call();
call.makeFunction();
jSTerm.matches(call, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm();
        JSSubstitution matches = jSTerm.matches(jSTerm, "Matches");
        JSTerm call = jSTerm.call();
        call.makeFunction();
        jSTerm.matches(call, matches);
    }
}
statement is: StringReader stringReader = new StringReader("Line : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, "Matches"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, "Matches") target is: jSTerm method is: matches(JSTerm,java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
statement is: JSTerm call = jSTerm.call(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
statement is: call.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: call.makeFunction() target is: call method is: makeFunction()
source statement: call()Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 5, type umd.cs.shop.JSTermindex is: 7
Matched Method is: makeFunction()V
statement is: jSTerm.matches(call, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(call, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "Line : ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "Matches";
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) string);
JSTerm call = ((JSTerm) streamTokenizer).call();
((JSTerm) string).makeFunction();
jSTerm.matches(call, matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Line : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "Line : ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("call ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("call 123");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("call 123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "call 123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("call ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("call 123");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm();
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("call 123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "call 123";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("Line : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "Line : ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("o($y BCvrG+uuT)j")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("o($y BCvrG+uuT)j");// Replace primitive values with more descriptive examples.

        StringReader stringReader = new StringReader("o(1234567890)j");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.applySubstitutionT(new JSSubstitution("$y", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"));// Replace strings with more illustrative examples. }}

    }
}
statement is: JSTerm jSTerm = new JSTerm("o($y BCvrG+uuT)j")// Replace primitive values with more descriptive examples.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("o(1234567890)j"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 5
Matched Method is: makeEval(Z)V
statement is: jSTerm.applySubstitutionT(new JSSubstitution("$y", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))// Replace strings with more illustrative examples. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(new JSSubstitution("$y", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))// Replace strings with more illustrative examples. }}
 target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 5
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "o($y BCvrG+uuT)j";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "o(1234567890)j";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Line : 1");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSSubstitution.addSubstitution("x", 10);
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Line : 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSSubstitution.addSubstitution("x", 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSSubstitution.addSubstitution("x", 10) target is: jSSubstitution method is: addSubstitution(java.lang.String,int)
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "Line : 1";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data
        StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: // Test data
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "iw(Ab3zy!_1XruR` ";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJ/{:lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.cloneT();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("not")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("not");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isConstant();
    }
}
statement is: StringReader stringReader = new StringReader("not"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant() target is: jSTerm method is: isConstant()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isConstant()Z
TestCase is: String string = "not";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("not")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World! \n 1 + 2 * 3");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.isEval();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World! \n 1 + 2 * 3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isEval()Z
TestCase is: String string = "Hello, World! \n 1 + 2 * 3";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).isEval();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Line : ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("Line : 1234567890");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        jSTerm1.makeVariable();
        jSTerm1.isVariable();
        StringReader stringReader2 = new StringReader("Line : -1234567890");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
        jSTerm2.makeVariable();
        jSTerm2.isVariable();
        StringReader stringReader3 = new StringReader("Line : 12.34567890");
        StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
        JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
        jSTerm3.makeVariable();
        jSTerm3.isVariable();
        StringReader stringReader4 = new StringReader("Line : -12.34567890");
        StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
        JSTerm jSTerm4 = new JSTerm(streamTokenizer4);
        jSTerm4.makeVariable();
        jSTerm4.isVariable();
    }
}
statement is: StringReader stringReader1 = new StringReader("Line : 1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.makeVariable() target is: jSTerm1 method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm1.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.isVariable() target is: jSTerm1 method is: isVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isVariable()Z
statement is: StringReader stringReader2 = new StringReader("Line : -1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm2.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.makeVariable() target is: jSTerm2 method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: makeVariable()V
statement is: jSTerm2.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm2.isVariable() target is: jSTerm2 method is: isVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 9
Matched Method is: isVariable()Z
statement is: StringReader stringReader3 = new StringReader("Line : 12.34567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm3 = new JSTerm(streamTokenizer3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm3.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.makeVariable() target is: jSTerm3 method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 15
Matched Method is: makeVariable()V
statement is: jSTerm3.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm3.isVariable() target is: jSTerm3 method is: isVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 15
Matched Method is: isVariable()Z
statement is: StringReader stringReader4 = new StringReader("Line : -12.34567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm4 = new JSTerm(streamTokenizer4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm4.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm4.makeVariable() target is: jSTerm4 method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 21
Matched Method is: makeVariable()V
statement is: jSTerm4.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm4.isVariable() target is: jSTerm4 method is: isVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 21
Matched Method is: isVariable()Z
TestCase is: String string = "Line : 1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : -1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : 12.34567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : -12.34567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("o($y BCvrG+uuT)j")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("function greet(name) { \n console.log(\'Hello, \' + name); \n }");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("function greet(name) { \n console.log(\'Hello, \' + name); \n }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "function greet(name) { \n console.log('Hello, ' + name); \n }";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6np>J/{,lb")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("6np>J/{,lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.standardizerTerm();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: setSize(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.setSize(42)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(42);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm originalTerm = new JSTerm("original");
        JSTerm cloneTerm = originalTerm.clone();
        assertEquals(originalTerm.getSize(), cloneTerm.getSize());// checking that size is same for both terms }}

    }
}
statement is: // Improved test data
JSTerm originalTerm = new JSTerm("original"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm cloneTerm = originalTerm.clone(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: originalTerm.clone() target is: originalTerm method is: clone()
statement is: assertEquals(originalTerm.getSize(), cloneTerm.getSize())// checking that size is same for both terms }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(originalTerm.getSize(), cloneTerm.getSize())// checking that size is same for both terms }}
 target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6npHJD{:Up")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = jSTerm.add((Object) null)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("6npHJD{:Up");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.add((Object) null);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.add(((Object) (3)), ((Object) (4)));
        jSTerm.print();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
statement is: jSTerm.add(((Object) (3)), ((Object) (4))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(((Object) (3)), ((Object) (4))) target is: jSTerm method is: add(java.lang.Object,java.lang.Object)
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
* test suite isTestSuite: 129
Test 0: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.call();
Test 1: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 2: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.equals(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?f9VLV8.i(NI&~XJL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 6: 
StringReader stringReader = new StringReader("% ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(-I-4PG^QcQ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader(")X{X()3DcY[?x^x");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.parseList(streamTokenizer);
Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("w(A!'1Xr+`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.cloneT();
Test 17: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 18: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("%A~j``}[})m@MX<X$'c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.applySubstitutionT(jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 20: 
StringReader stringReader = new StringReader("2JP[O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 21: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 22: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm);
Test 23: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.matches(jSTerm);
Test 24: 
StringReader stringReader = new StringReader("6npHJO!{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 25: 
StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 26: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 27: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 28: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 29: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 30: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 31: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 32: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.toStr();
Test 33: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.setSize(2259);
jSTerm.makeFunction();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 34: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 35: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();
Test 36: 
StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
LinkedList<Object> linkedList = new LinkedList<Object>();
JSTerm jSTerm = new JSTerm(streamTokenizer);
linkedList.add((Object) jSTerm);
jSTerm.addAll((Collection) linkedList);
jSTerm.isGround();
Test 37: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.standardizerTerm();
Test 38: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 39: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addElement((Object) null);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 40: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 41: 
StringReader stringReader = new StringReader("Go8(gA{yVv");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.call();
Test 42: 
StringReader stringReader = new StringReader("iw(A3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.call();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 46: 
StringReader stringReader = new StringReader("fWw'VK08[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isVariable();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 48: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 49: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 50: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
standardizerTerm.makeFunction();
jSTerm.matches(standardizerTerm, (JSSubstitution) null);
Test 51: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 52: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 53: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 54: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 55: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
JSTerm call = jSTerm.call();
call.makeFunction();
jSTerm.matches(call, matches);
Test 56: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 57: 
StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 58: 
StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 59: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);
Test 60: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(matches);
Test 61: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 62: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 63: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 64: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 65: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
jSTerm.isFunction();
Test 67: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 68: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 69: 
StringReader stringReader = new StringReader("6np>J/{,lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 70: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(42);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 71: 
StringReader stringReader = new StringReader("6npHJD{:Up");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.add((Object) null);
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 72: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

Test 73: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();

Test 74: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "This is a test string with multiple lines.\nIt has several special characters like !@#$%^&*()_+-=[]{}|;':\"\\,./<>?`~ and spaces.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 75: 
StringReader stringReader = new StringReader("\"Hello World!\"");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 76: 
StringReader stringReader = new StringReader("100.25");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 77: 
StringReader stringReader = new StringReader("Hello world! %");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 78: 
StringReader stringReader = new StringReader("(1.23456789 2.3456789 \"hello\" true)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 79: 
StringReader stringReader = new StringReader("(1 + 2)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 80: 
StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "R2(>~>6~!IcH,?%R";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 81: 
StringReader stringReader = new StringReader("(-I-4PG^QcQ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 82: 
StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 83: 
JSTerm jSTerm = new JSTerm();

Test 84: 
StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 85: 
StringReader stringReader = new StringReader("calculateSum(2, 3);");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).print();

Test 86: 
StringReader stringReader = new StringReader("w(A!'1Xr+`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).cloneT();

Test 87: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 88: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("This is a test sentence.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 89: 
StringReader stringReader = new StringReader("4 + 5 * 6 - 7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((Vector) streamTokenizer).addElement(jSTerm);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 90: 
StringReader stringReader = new StringReader("2JP[O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 91: 
StringReader stringReader = new StringReader("42>3.14");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 92: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
((JSTerm) _void).matches(jSTerm);

Test 93: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).matches(jSTerm);

Test 94: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 95: 
StringReader stringReader = new StringReader("Hello, World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm jSTerm = new JSTerm();
((JSTerm) _void).equals(jSTerm);

Test 96: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((Vector) streamTokenizer).addAll((Collection) jSTerm);

Test 97: 
StringReader stringReader = new StringReader("A complex mathematical expression with multiple variables and operators, such as '(x + y) * z - (w / u)'");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

Test 98: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).toStr();

Test 99: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).setSize(2259);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).toStr();

Test 100: 
StringReader stringReader = new StringReader("100;\"world");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isGround();

Test 101: 
LinkedList<Object> linkedList = new LinkedList<Object>();

Test 102: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).standardizerTerm();

Test 103: 
StringReader stringReader = new StringReader("Line : 12345");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

Test 104: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
String string = "This is a test string with some special characters like !@#$%^&*()_+{}[]`~-=\\|;':\"<>,./?";
((Vector) streamTokenizer).addElement(string);
((JSTerm) streamTokenizer).standardizerTerm();

Test 105: 
StringReader stringReader = new StringReader("This is a sample input for testing purposes");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).call();

Test 106: 
StringReader stringReader = new StringReader("This is an example input");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((Vector) streamTokenizer).addAll((Collection) jSTerm);
((JSTerm) streamTokenizer).call();

Test 107: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
jSTerm.isEval();

Test 108: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isVariable();

Test 109: 
JSTerm jSTerm = new JSTerm();

Test 110: 
StringReader stringReader = new StringReader("This is a test string with numbers 1234 and special characters $%^&*()_+");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 111: 
StringReader stringReader = new StringReader("123abc");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);

Test 112: 
StringReader stringReader = new StringReader("the sun is shining brightly");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = ((JSTerm) streamTokenizer).standardizerTerm();
jSTerm.makeFunction();
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).matches(standardizerTerm, jSSubstitution);

Test 113: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm((StreamTokenizer) "not");
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 114: 
StringReader stringReader = new StringReader("Line : Hello World");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 115: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = null;
((JSTerm) _void).matches(jSTerm, jSSubstitution);

Test 116: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

Test 117: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "Matches";
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) "Matches");
JSTerm call = ((JSTerm) streamTokenizer).call();
((JSTerm) string).makeFunction();
jSTerm.matches(call, matches);

Test 118: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 119: 
StringReader stringReader = new StringReader("call 123");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 120: 
StringReader stringReader = new StringReader("call 123");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).equals(jSTerm);

Test 121: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).equals(jSTerm);

Test 122: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "o($y BCvrG+uuT)j");
String string = "o(1234567890)j";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 123: 
StringReader stringReader = new StringReader("Line : 1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 124: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 125: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 126: 
StringReader stringReader = new StringReader("Hello, World! \n 1 + 2 * 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).isEval();

Test 127: 
StringReader stringReader = new StringReader("Line : 1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : -1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : 12.34567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : -12.34567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();

Test 128: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("function greet(name) { \n console.log('Hello, ' + name); \n }");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);


* Generated after the refinement and before minimization 129 tests with total length 661
* test suite isTestSuite: 129
Test 0: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.call();
Test 1: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 2: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.equals(jSTerm);
Test 3: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?f9VLV8.i(NI&~XJL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 6: 
StringReader stringReader = new StringReader("% ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(-I-4PG^QcQ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader(")X{X()3DcY[?x^x");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.parseList(streamTokenizer);
Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("w(A!'1Xr+`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.cloneT();
Test 17: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 18: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("%A~j``}[})m@MX<X$'c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.applySubstitutionT(jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 20: 
StringReader stringReader = new StringReader("2JP[O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 21: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 22: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm);
Test 23: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.matches(jSTerm);
Test 24: 
StringReader stringReader = new StringReader("6npHJO!{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 25: 
StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 26: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 27: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 28: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 29: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 30: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 31: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 32: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.toStr();
Test 33: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.setSize(2259);
jSTerm.makeFunction();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 34: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 35: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();
Test 36: 
StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
LinkedList<Object> linkedList = new LinkedList<Object>();
JSTerm jSTerm = new JSTerm(streamTokenizer);
linkedList.add((Object) jSTerm);
jSTerm.addAll((Collection) linkedList);
jSTerm.isGround();
Test 37: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.standardizerTerm();
Test 38: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 39: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addElement((Object) null);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 40: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 41: 
StringReader stringReader = new StringReader("Go8(gA{yVv");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.call();
Test 42: 
StringReader stringReader = new StringReader("iw(A3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 43: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.call();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 46: 
StringReader stringReader = new StringReader("fWw'VK08[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isVariable();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 48: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 49: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 50: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
standardizerTerm.makeFunction();
jSTerm.matches(standardizerTerm, (JSSubstitution) null);
Test 51: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 52: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 53: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 54: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 55: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
JSTerm call = jSTerm.call();
call.makeFunction();
jSTerm.matches(call, matches);
Test 56: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 57: 
StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 58: 
StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 59: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);
Test 60: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(matches);
Test 61: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 62: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 63: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 64: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 65: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 66: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
jSTerm.isFunction();
Test 67: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();
Test 68: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 69: 
StringReader stringReader = new StringReader("6np>J/{,lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 70: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(42);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 71: 
StringReader stringReader = new StringReader("6npHJD{:Up");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.add((Object) null);
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 72: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).cloneT();

Test 73: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();

Test 74: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "This is a test string with multiple lines.\nIt has several special characters like !@#$%^&*()_+-=[]{}|;':\"\\,./<>?`~ and spaces.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 75: 
StringReader stringReader = new StringReader("\"Hello World!\"");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 76: 
StringReader stringReader = new StringReader("100.25");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 77: 
StringReader stringReader = new StringReader("Hello world! %");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 78: 
StringReader stringReader = new StringReader("(1.23456789 2.3456789 \"hello\" true)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 79: 
StringReader stringReader = new StringReader("(1 + 2)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 80: 
StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "R2(>~>6~!IcH,?%R";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 81: 
StringReader stringReader = new StringReader("(-I-4PG^QcQ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 82: 
StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "iw(A3zy!1X1ruR`";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).nextToken();
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 83: 
JSTerm jSTerm = new JSTerm();

Test 84: 
StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 85: 
StringReader stringReader = new StringReader("calculateSum(2, 3);");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).print();

Test 86: 
StringReader stringReader = new StringReader("w(A!'1Xr+`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).cloneT();

Test 87: 
JSSubstitution jSSubstitution = new JSSubstitution();

Test 88: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("This is a test sentence.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 89: 
StringReader stringReader = new StringReader("4 + 5 * 6 - 7");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((Vector) streamTokenizer).addElement(jSTerm);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 90: 
StringReader stringReader = new StringReader("2JP[O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();

Test 91: 
StringReader stringReader = new StringReader("42>3.14");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 92: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
((JSTerm) _void).matches(jSTerm);

Test 93: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).matches(jSTerm);

Test 94: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 95: 
StringReader stringReader = new StringReader("Hello, World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm jSTerm = new JSTerm();
((JSTerm) _void).equals(jSTerm);

Test 96: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((Vector) streamTokenizer).addAll((Collection) jSTerm);

Test 97: 
StringReader stringReader = new StringReader("A complex mathematical expression with multiple variables and operators, such as '(x + y) * z - (w / u)'");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

Test 98: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).toStr();

Test 99: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((Vector) streamTokenizer).setSize(2259);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).toStr();

Test 100: 
StringReader stringReader = new StringReader("100;\"world");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isGround();

Test 101: 
LinkedList<Object> linkedList = new LinkedList<Object>();

Test 102: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).standardizerTerm();

Test 103: 
StringReader stringReader = new StringReader("Line : 12345");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

Test 104: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
String string = "This is a test string with some special characters like !@#$%^&*()_+{}[]`~-=\\|;':\"<>,./?";
((Vector) streamTokenizer).addElement(string);
((JSTerm) streamTokenizer).standardizerTerm();

Test 105: 
StringReader stringReader = new StringReader("This is a sample input for testing purposes");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).call();

Test 106: 
StringReader stringReader = new StringReader("This is an example input");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((Vector) streamTokenizer).addAll((Collection) jSTerm);
((JSTerm) streamTokenizer).call();

Test 107: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
jSTerm.isEval();

Test 108: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isVariable();

Test 109: 
JSTerm jSTerm = new JSTerm();

Test 110: 
StringReader stringReader = new StringReader("This is a test string with numbers 1234 and special characters $%^&*()_+");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 111: 
StringReader stringReader = new StringReader("123abc");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).parseList(streamTokenizer);

Test 112: 
StringReader stringReader = new StringReader("the sun is shining brightly");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = ((JSTerm) streamTokenizer).standardizerTerm();
jSTerm.makeFunction();
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).matches(standardizerTerm, jSSubstitution);

Test 113: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm((StreamTokenizer) "not");
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 114: 
StringReader stringReader = new StringReader("Line : Hello World");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 115: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = null;
((JSTerm) _void).matches(jSTerm, jSSubstitution);

Test 116: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);

Test 117: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "Matches";
JSSubstitution matches = jSTerm.matches(jSTerm, (JSSubstitution) "Matches");
JSTerm call = ((JSTerm) streamTokenizer).call();
((JSTerm) string).makeFunction();
jSTerm.matches(call, matches);

Test 118: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 119: 
StringReader stringReader = new StringReader("call 123");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 120: 
StringReader stringReader = new StringReader("call 123");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).equals(jSTerm);

Test 121: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).equals(jSTerm);

Test 122: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "o($y BCvrG+uuT)j");
String string = "o(1234567890)j";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
JSSubstitution jSSubstitution = null;
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 123: 
StringReader stringReader = new StringReader("Line : 1");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 124: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).call();

Test 125: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isConstant();

Test 126: 
StringReader stringReader = new StringReader("Hello, World! \n 1 + 2 * 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).isEval();

Test 127: 
StringReader stringReader = new StringReader("Line : 1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : -1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : 12.34567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();
String string = "Line : -12.34567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).isVariable();

Test 128: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("function greet(name) { \n console.log('Hello, ' + name); \n }");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);


* Minimizing test suite
* test suite isTestSuite: 72
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.isEval();
Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 2: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("function greet(name) { \n console.log('Hello, ' + name); \n }");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
Test 3: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 4: 
StringReader stringReader = new StringReader("6np>J/{,lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 5: 
StringReader stringReader = new StringReader("(-I-4PG^QcQ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("?f9VLV8.i(NI&~XJL");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 8: 
StringReader stringReader = new StringReader("% ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("iw(A3zy!1X1ruR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
StringReader stringReader = new StringReader("R2(>~>6~!IcH,?%R");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
StringReader stringReader = new StringReader("(1 + 2)");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.nextToken();
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 14: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 15: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 17: 
StringReader stringReader = new StringReader("6npHJD{:Up");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.add((Object) null);
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 18: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("%A~j``}[})m@MX<X$'c");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.applySubstitutionT(jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 20: 
StringReader stringReader = new StringReader("w(A!'1Xr+`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.cloneT();
Test 21: 
JSTerm jSTerm = new JSTerm();
jSTerm.setSize(42);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 22: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 23: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 24: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
// Undeclared exception!
try { 
  jSTerm.applySubstitutionT(jSSubstitution);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 25: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 26: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
standardizerTerm.makeFunction();
jSTerm.matches(standardizerTerm, (JSSubstitution) null);
Test 27: 
StringReader stringReader = new StringReader("2JP[O");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 29: 
StringReader stringReader = new StringReader("4w>3?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution matches = jSTerm.matches(jSTerm);
jSTerm.matches(jSTerm, matches);
Test 30: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 31: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.matches(jSTerm);
Test 32: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
JSTerm call = jSTerm.call();
call.makeFunction();
jSTerm.matches(call, matches);
Test 33: 
StringReader stringReader = new StringReader("6npHJO!{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 34: 
StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.matches(jSTerm);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 35: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 37: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.equals(jSTerm);
Test 38: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 39: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 40: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 41: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 42: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.toStr();
Test 43: 
StringReader stringReader = new StringReader("w(A!_1XrR`");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.setSize(2259);
jSTerm.makeFunction();
// Undeclared exception!
try { 
  jSTerm.toStr();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 44: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();
Test 45: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 46: 
StringReader stringReader = new StringReader("6npHJO/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
LinkedList<Object> linkedList = new LinkedList<Object>();
JSTerm jSTerm = new JSTerm(streamTokenizer);
linkedList.add((Object) jSTerm);
jSTerm.addAll((Collection) linkedList);
jSTerm.isGround();
Test 47: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 48: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.standardizerTerm();
Test 49: 
StringReader stringReader = new StringReader("h;\"iB");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addElement((Object) null);
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 50: 
StringReader stringReader = new StringReader("Go8(gA{yVv");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.call();
Test 51: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 52: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.call();
Test 53: 
StringReader stringReader = new StringReader("iw(A3zy!_1X1ruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.addAll((Collection) jSTerm);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // java.lang.String cannot be cast to umd.cs.shop.JSTerm
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.call();
Test 55: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 56: 
StringReader stringReader = new StringReader("fWw'VK08[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isVariable();
Test 57: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 58: 
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 59: 
StringReader stringReader = new StringReader(")X{X()3DcY[?x^x");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.parseList(streamTokenizer);
Test 60: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.cloneT();
Test 61: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 62: 
StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 63: 
StringReader stringReader = new StringReader("call ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 64: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.equals(jSTerm);
Test 65: 
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm);
StringReader stringReader = new StringReader("o($y BCvrG+uuT)j");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(matches);
Test 66: 
StringReader stringReader = new StringReader("iw(Ab3zy!_1XruR` ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 67: 
StringReader stringReader = new StringReader("6npHJ/{:lb");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 68: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 69: 
StringReader stringReader = new StringReader("not");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 70: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
jSTerm.isFunction();
Test 71: 
StringReader stringReader = new StringReader("Line : ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isVariable();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 192
* Number of covered goals: 141
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 318
* Number of covered goals: 237
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 123
* Number of covered goals: 83
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 192
* Number of covered goals: 140
* Generated 72 tests with total length 343
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 47%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean eval = jSTerm.isEval();
assertFalse(eval);


** It was a parseable test case! 
refined test name is: testIsNotEval
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testPrintMethodWithoutDeclaringVariableFirst
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
JSSubstitution arg1 = arg0.matches(arg0);
JSSubstitution matches = arg0.matches(arg0, arg1);
assertTrue(arg1.fail());
assertTrue(matches.fail());


** It was a parseable test case! 
refined test name is: testMatchesReturnsFalseForDifferentObjects
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.setSize(42);
// Undeclared exception!
try { 
  jSTerm.cloneT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testCloneWithSizeThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
boolean equals = arg0.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWhenCalledWithItselfReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm arg0 = new JSTerm();
boolean equals = jSTerm.equals(arg0);
assertTrue(jSTerm.isVariable());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentVariables
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
assertTrue(jSTerm.isConstant());

jSTerm.call();
assertFalse(jSTerm.isFunction());


** It was a parseable test case! 
refined test name is: testIsConstantAndCallJSTermReturnsCorrectValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean constant = jSTerm.isConstant();
assertFalse(constant);


** It was a parseable test case! 
refined test name is: testJSTermNotConstant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean function = jSTerm.isFunction();
assertFalse(function);


** It was a parseable test case! 
refined test name is: testIsFunctionReturnsFalseWhenNotAFunction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeFunction();
boolean function = jSTerm.isFunction();
assertTrue(function);


** It was a parseable test case! 
refined test name is: testIsFunctionJSTermWithFunctionReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.107 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.132 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.197 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.274 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.358 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.360 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.433 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.569 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.628 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.630 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.693 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.695 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.755 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.757 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:41.933 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:18:41.935 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
[MASTER] 08:18:42.122 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar6018294091966434906.jar
* Writing tests to file
* Writing JUnit test case 'JSTerm_ESTest' to evosuite-tests
[MASTER] 08:18:42.124 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6018294091966434906.jar
* Done!

* Computation finished
