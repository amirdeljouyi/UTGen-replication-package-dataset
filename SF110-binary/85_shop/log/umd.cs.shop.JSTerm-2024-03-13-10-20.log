* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSTerm
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 19280
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 10:21:01.459 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 10:21:01.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 10:21:01.475 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 10:21:01.541 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSTerm
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 846
* Using seed 1710325259681
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 201 / 846
[Progress:>                             0%] [Cov:==============>                    42%][Progress:>                             0%] [Cov:=================>                 49%][Progress:>                             1%] [Cov:=================>                 51%][Progress:>                             1%] [Cov:===================>               56%][Progress:>                             1%] [Cov:===================>               56%][Progress:>                             1%] [Cov:====================>              58%][Progress:>                             1%] [Cov:====================>              58%][Progress:>                             1%] [Cov:====================>              58%][Progress:>                             1%] [Cov:=====================>             60%][Progress:>                             1%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:=====================>             61%][MASTER] 10:21:06.213 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:>                             2%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:=====================>             62%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           66%][MASTER] 10:21:08.488 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=========================>         72%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         74%][Progress:>                             3%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        76%][Progress:=>                            4%] [Cov:==========================>        76%][Progress:=>                            4%] [Cov:==========================>        76%][Progress:=>                            4%] [Cov:==========================>        76%][Progress:=>                            4%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:=====>                        19%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       22%] [Cov:==========================>        77%][Progress:======>                       22%] [Cov:===========================>       78%][Progress:======>                       22%] [Cov:===========================>       78%][Progress:======>                       23%] [Cov:===========================>       78%][Progress:======>                       23%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:========>                     29%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    31%] [Cov:===========================>       78%][Progress:=========>                    33%] [Cov:===========================>       78%][Progress:=========>                    33%] [Cov:===========================>       78%][Progress:=========>                    33%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       78%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:============================>      80%]
* Search finished after 202s and 265 generations, 92000 statements, best individual has fitness: 191.0
* Generated before the refinement 65 tests with total length 309
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.cloneT();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(v JK9^;]")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(v JK9^;]");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        // Improved test data
        StringReader stringReader1 = new StringReader("(+ 3.14 2.71)");
        StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
        JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
        // Improved test data
        StringReader stringReader2 = new StringReader("(* 6 9)");
        StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
        JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
    }
}
statement is: StringReader stringReader = new StringReader("(v JK9^;]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
StringReader stringReader1 = new StringReader("(+ 3.14 2.71)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm1 = new JSTerm(streamTokenizer1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
StringReader stringReader2 = new StringReader("(* 6 9)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm(streamTokenizer2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(v JK9^;]";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(+ 3.14 2.71)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(* 6 9)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?{)- G<?,\"^A:I")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("?{)- G<?,\"^A:I");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.call();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("? ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("? ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%bH#4m+(E:5oE;'^")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%bH#4m+(E:5oE;'^");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello, world!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("%%%")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("hello");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("hello"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "hello";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("5.0")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
cloneT.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("5.0");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm cloneT = jSTerm.cloneT();
        cloneT.makeFunction();
        JSSubstitution jSSubstitution = new JSSubstitution();
        cloneT.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("5.0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm cloneT = jSTerm.cloneT(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
statement is: cloneT.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: cloneT.makeFunction() target is: cloneT method is: makeFunction()
source statement: cloneT()Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: makeFunction()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: cloneT.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: cloneT.matches(jSTerm, jSSubstitution) target is: cloneT method is: matches(JSTerm,JSSubstitution)
source statement: cloneT()Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "5.0";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(100 + 2.5) * 3");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(100 + 2.5) * 3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(100 + 2.5) * 3";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(!Ee(vop(")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(!Ee(vop(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("(!Ee(vop(\"Hello World\")");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("(!Ee(vop(\"Hello World\")"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "(!Ee(vop(\"Hello World\")";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7#Ad@{-;{;d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader("(I,7#Ad@{-;{;d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("[1, 2.3, 'hello', 'world']");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("[1, 2.3, 'hello', 'world']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "[1, 2.3, 'hello', 'world']";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: resetSyntax()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: streamTokenizer.resetSyntax()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.resetSyntax();
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        streamTokenizer.resetSyntax();
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: streamTokenizer.resetSyntax(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: streamTokenizer.resetSyntax() target is: streamTokenizer method is: resetSyntax()
source statement: java.io.StreamTokenizer(Ljava/io/Reader;)V callee: VariableReference: Statement 2, type java.io.StreamTokenizerindex is: 3
Matched Method is: resetSyntax()V
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = ".Df.P|KVNjy:e4S@";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).resetSyntax();
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(".")
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement(".", 1, "apple");// Using a more descriptive value for the element type and an illustrative value for the element name

        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(".", 1, "apple")// Using a more descriptive value for the element type and an illustrative value for the element name
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(".", 1, "apple")// Using a more descriptive value for the element type and an illustrative value for the element name
 target is: jSTerm method is: addElement(java.lang.String,int,java.lang.String)
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: print()V
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.print();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm(10, "Hello World!");
        jSTerm.print();
    }
}
statement is: JSTerm jSTerm = new JSTerm(10, "Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.makeFunction();
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: clone()Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm clone = (JSTerm)jSTerm.clone()
statement is: add(ILjava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.add(1, (Object) arg1)
statement is: print()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.print()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.add(1, (Object) clone);
jSTerm.print();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        JSTerm clone = ((JSTerm) (jSTerm.clone()));
        jSTerm.add(1, ((Object) (clone)));
        jSTerm.print();
    }
}
statement is: StringReader stringReader = new StringReader("A,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: JSTerm clone = ((JSTerm) (jSTerm.clone())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((JSTerm) (jSTerm.clone())) target is: jSTerm method is: clone()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: clone()Ljava/lang/Object;
statement is: jSTerm.add(1, ((Object) (clone))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.add(1, ((Object) (clone))) target is: jSTerm method is: add(int,java.lang.Object)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: add(ILjava/lang/Object;)V
statement is: jSTerm.print(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.print() target is: jSTerm method is: print()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: print()V
TestCase is: String string = "A,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm clone = (JSTerm)((Vector) streamTokenizer).clone();
int _int = 1;
((Vector) streamTokenizer).add(_int, (Object) clone);
((JSTerm) streamTokenizer).print();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
jSTerm.equals(cloneT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm cloneT = jSTerm.cloneT();
        cloneT.makeFunction();
        jSTerm.equals(cloneT);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm cloneT = jSTerm.cloneT(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
statement is: cloneT.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: cloneT.makeFunction() target is: cloneT method is: makeFunction()
source statement: cloneT()Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: makeFunction()V
statement is: jSTerm.equals(cloneT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(cloneT) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "Hello, world!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = ((JSTerm) streamTokenizer).cloneT();
jSTerm.makeFunction();
((JSTerm) streamTokenizer).equals(cloneT);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: clone()Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm clone = (JSTerm)jSTerm.clone()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm clone = ((JSTerm) (jSTerm.clone()));
        jSTerm.addElement(clone);
        jSTerm.cloneT();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: JSTerm clone = ((JSTerm) (jSTerm.clone())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((JSTerm) (jSTerm.clone())) target is: jSTerm method is: clone()
statement is: jSTerm.addElement(clone), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(clone) target is: jSTerm method is: addElement(JSTerm)
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with some numbers 1234567890 and some special characters $%^&*()_-+={}[]|\\:\";\'<>?,./");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with some numbers 1234567890 and some special characters $%^&*()_-+={}[]|\\:\";\'<>?,./"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "This is a test string with some numbers 1234567890 and some special characters $%^&*()_-+={}[]|\\:\";'<>?,./";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSSubstitution jSSubstitution = new JSSubstitution();
        // Improved test data
        List<String> inputStrings = Arrays.asList("T", "_r", "5XJ-zY^#d");
        for (int i = 0; i < inputStrings.size(); i++) {
            String inputString = inputStrings.get(i);
            StreamTokenizer streamTokenizer = new StreamTokenizer(new StringReader(inputString));
            JSTerm parseList = jSTerm.parseList(streamTokenizer);
            parseList.applySubstitutionT(jSSubstitution);
        }
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
List<String> inputStrings = Arrays.asList("T", "_r", "5XJ-zY^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList("T", "_r", "5XJ-zY^#d") target is: Arrays method is: asList(java.lang.String,java.lang.String,java.lang.String)
statement is: for (int i = 0; i < inputStrings.size(); i++) {
    String inputString = inputStrings.get(i);
    StreamTokenizer streamTokenizer = new StreamTokenizer(new StringReader(inputString));
    JSTerm parseList = jSTerm.parseList(streamTokenizer);
    parseList.applySubstitutionT(jSSubstitution);
}, class spoon.support.reflect.code.CtForImpl
TestCase is: String string = "T,_r)5XJ-zY^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(stringReader);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
JSSubstitution matches = standardizerTerm.matches(jSTerm);
standardizerTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement("Ie7");// Improved test data: using a more descriptive and representative string value for the element being added to the term.

        jSTerm.addElement("Ad{-+{;:");// Improved test data: using a more descriptive and representative string value for the element being added to the term.

        JSTerm standardizerTerm = jSTerm.standardizerTerm();
        JSSubstitution matches = standardizerTerm.matches(jSTerm);
        standardizerTerm.matches(jSTerm, matches);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.addElement("Ie7")// Improved test data: using a more descriptive and representative string value for the element being added to the term.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("Ie7")// Improved test data: using a more descriptive and representative string value for the element being added to the term.
 target is: jSTerm method is: addElement(java.lang.String)
statement is: jSTerm.addElement("Ad{-+{;:")// Improved test data: using a more descriptive and representative string value for the element being added to the term.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("Ad{-+{;:")// Improved test data: using a more descriptive and representative string value for the element being added to the term.
 target is: jSTerm method is: addElement(java.lang.String)
statement is: JSTerm standardizerTerm = jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
statement is: JSSubstitution matches = standardizerTerm.matches(jSTerm), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: standardizerTerm.matches(jSTerm) target is: standardizerTerm method is: matches(JSTerm)
statement is: standardizerTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: standardizerTerm.matches(jSTerm, matches) target is: standardizerTerm method is: matches(JSTerm,JSSubstitution)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm parseList = jSTerm.parseList(streamTokenizer);
        parseList.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm parseList = jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: parseList.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parseList.matches(jSTerm, jSSubstitution) target is: parseList method is: matches(JSTerm,JSSubstitution)
source statement: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; callee: VariableReference: Statement 4, type umd.cs.shop.JSTermindex is: 5
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution("T", "r");
        JSTerm jSTerm = new JSTerm("5XJ-zY^#d");
        JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
        jSTerm.matches(jSTerm, matches);
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution("T", "r"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm("5XJ-zY^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 6
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 6
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: jSTerm.matches(jSTerm, matches), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, matches) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 6
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 6
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "T,_r)5XJ-zY^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "5XJ-zY^#d";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution jSSubstitution = null;
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 5, type umd.cs.shop.JSTermindex is: 6
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "A-=']=o.0Q3,>u";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private String term;

    private int frequency;

    public  JSTerm(String term) {
        this.term = term;
    }

    public void setFrequency(int frequency) {
        this.frequency = frequency;
    }

    public String getTerm() {
        return this.term;
    }

    public int getFrequency() {
        return this.frequency;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof JSTerm) {
            JSTerm other = ((JSTerm) (obj));
            return this.term.equalsIgnoreCase(other.getTerm()) && (this.frequency == other.getFrequency());
        } else {
            return false;
        }
    }

    @Override
    public String toString() {
        return (((("JSTerm{" + "term=") + term) + ", frequency=") + frequency) + '}';
    }

    public static void main(String[] args) throws Exception {
        JSTerm jst1 = new JSTerm("Java-like programming language");
        jst1.setFrequency(10);
        JSTerm jst2 = new JSTerm("JavaScript");
        jst2.setFrequency(8);
        JSTerm jst3 = new JSTerm("Java-like programming language");
        jst3.setFrequency(10);
        System.out.println(jst1.equals(jst3));// Output: true }}

    }
}
statement is: this.term = term, class spoon.support.reflect.code.CtAssignmentImpl
statement is: if (obj instanceof JSTerm) {
    JSTerm other = ((JSTerm) (obj));
    return this.term.equalsIgnoreCase(other.getTerm()) && (this.frequency == other.getFrequency());
} else {
    return false;
}, class spoon.support.reflect.code.CtIfImpl
statement is: return this.frequency, class spoon.support.reflect.code.CtReturnImpl
statement is: return this.term, class spoon.support.reflect.code.CtReturnImpl
statement is: JSTerm jst1 = new JSTerm("Java-like programming language"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jst1.setFrequency(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jst1.setFrequency(10) target is: jst1 method is: setFrequency(int)
statement is: JSTerm jst2 = new JSTerm("JavaScript"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jst2.setFrequency(8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jst2.setFrequency(8) target is: jst2 method is: setFrequency(int)
statement is: JSTerm jst3 = new JSTerm("Java-like programming language"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jst3.setFrequency(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jst3.setFrequency(10) target is: jst3 method is: setFrequency(int)
statement is: System.out.println(jst1.equals(jst3))// Output: true }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(jst1.equals(jst3))// Output: true }}
 target is: System.out method is: println(char[])
statement is: this.frequency = frequency, class spoon.support.reflect.code.CtAssignmentImpl
statement is: return (((("JSTerm{" + "term=") + term) + ", frequency=") + frequency) + '}', class spoon.support.reflect.code.CtReturnImpl
TestCase is: String string = "Java-like programming language";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "JavaScript";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "Java-like programming language";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(I,7)Ad@{-;{;:")
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("(I,7)Ad@{-;{;:");// This line is redundant and can be removed.

        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("(I,7)Ad@{-;{;:")// This line is redundant and can be removed.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(I,7)Ad@{-;{;:")// This line is redundant and can be removed.
 target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
TestCase Could not be added: addElement(Ljava/lang/Object;)V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 0
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
* this is vulnerable: String string = "(I,7)Ad@{-;{;:"
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "(I,7)Ad@{-;{;:";
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSSubstitution jSSubstitution = new JSSubstitution();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement(jSTerm);
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 4
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSSubstitution.addElement(jSTerm);
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input string for testing JSTerm class.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        JSTerm jSTerm = new JSTerm();
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input string for testing JSTerm class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "This is a sample input string for testing JSTerm class.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm();
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 0
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase Could not be added: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:")
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("(I,7)Ad@{-;{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("7");
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("(I,7)Ad@{-;{;:");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("7"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("(I,7)Ad@{-;{;:"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("(I,7)Ad@{-;{;:") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 1, type umd.cs.shop.JSTermindex is: 2
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 1, type umd.cs.shop.JSTermindex is: 2
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "7";
StringReader stringReader = new StringReader(string);
JSTerm jSTerm = new JSTerm();
String string = "(I,7)Ad@{-;{;:";
((Vector) stringReader).addElement(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).equals(jSTerm);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = jSTerm.equals(arg0)
test data is: StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
jSTerm.equals(standardizerTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement(jSTerm);
        JSTerm standardizerTerm = jSTerm.standardizerTerm();
        jSTerm.equals(standardizerTerm);
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
statement is: JSTerm standardizerTerm = jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
statement is: jSTerm.equals(standardizerTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(standardizerTerm) target is: jSTerm method is: equals(JSTerm)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.toStr();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: toStr()Ljava/lang/StringBuffer;
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: clone()Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm clone = (JSTerm)jSTerm.clone()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: toStr()Ljava/lang/StringBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.StringBuffer
statement code is: StringBuffer str = jSTerm.toStr()
test data is: StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.toStr();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm clone = ((JSTerm) (jSTerm.clone()));
        jSTerm.addElement(clone);
        jSTerm.toStr();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: JSTerm clone = ((JSTerm) (jSTerm.clone())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((JSTerm) (jSTerm.clone())) target is: jSTerm method is: clone()
statement is: jSTerm.addElement(clone), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(clone) target is: jSTerm method is: addElement(JSTerm)
statement is: jSTerm.toStr(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.toStr() target is: jSTerm method is: toStr()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isGround();
        // Test that the term is grounded, as expected
        assertTrue(jSTerm.isGround());
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
statement is: // Test that the term is grounded, as expected
assertTrue(jSTerm.isGround()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test that the term is grounded, as expected
assertTrue(jSTerm.isGround()) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.isGround();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement("A-=']=o.0Q3,>u")
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: isGround()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean ground = jSTerm.isGround()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement("A-=']=o.0Q3,>u");
        JSTerm jSTerm = new JSTerm();
        jSTerm.addElement(new JSTerm(1, "John", "Doe"));
        jSTerm.isGround();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement("A-=']=o.0Q3,>u"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement("A-=']=o.0Q3,>u") target is: jSTerm method is: addElement(java.lang.String)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: addElement(Ljava/lang/Object;)V
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(new JSTerm(1, "John", "Doe")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(new JSTerm(1, "John", "Doe")) target is: jSTerm method is: addElement(JSTerm)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 3
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 3
Matched Method is: addElement(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: jSTerm.isGround(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isGround() target is: jSTerm method is: isGround()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isGround()Z
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "A-=']=o.0Q3,>u";
jSTerm.addElement(string);
JSTerm jSTerm = new JSTerm();
String string = null;
jSTerm.addElement(string);
jSTerm.isGround();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeVariable();
        jSTerm.standardizerTerm();
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement(jSTerm);
        jSTerm.call();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.addElement(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(jSTerm) target is: jSTerm method is: addElement(JSTerm)
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.makeVariable();
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeVariable()V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "A-=']=o.0Q3,>u";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.addElement(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.addElement(new JSTerm(streamTokenizer));
        jSTerm.makeEval(true);
        jSTerm.call();
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: jSTerm.addElement(new JSTerm(streamTokenizer)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(new JSTerm(streamTokenizer)) target is: jSTerm method is: addElement(JSTerm)
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.isEval();
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isEval()Z
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isEval();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("u'I*50]hl+g<ny=")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: StringReader stringReader = new StringReader("u'I*50]hl+g<ny=");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        assertEquals(true, jSTerm.isConstant());
    }
}
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.StreamTokenizer(Ljava/io/Reader;)V
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V
statement is: assertEquals(true, jSTerm.isConstant()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(true, jSTerm.isConstant()) target is:  method is: assertEquals(boolean,<unknown>)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.isVariable();
        // Improved test data:
        String variableName = "x";
        int variableValue = 5;
        jSTerm.setVariable(variableName, variableValue);
        boolean isVariable = true;
        assertEquals(isVariable, jSTerm.isVariable());
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable() target is: jSTerm method is: isVariable()
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: isVariable()Z
statement is: // Improved test data:
String variableName = "x", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int variableValue = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: jSTerm.setVariable(variableName, variableValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.setVariable(variableName, variableValue) target is: jSTerm method is: setVariable(java.lang.String,int)
statement is: boolean isVariable = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(isVariable, jSTerm.isVariable()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(isVariable, jSTerm.isVariable()) target is:  method is: assertEquals(boolean,<unknown>)
* this is vulnerable: String string = "x"
* this is vulnerable: int _int = 5
* this is vulnerable: boolean _boolean = true
TestCase is: JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
String string = "x";
int _int = 5;
boolean _boolean = true;

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" ")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
test data is: StringReader stringReader = new StringReader(" ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm parseList = jSTerm.parseList(arg0)
test data is: JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("2 + 3");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
        // Improved test data:
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("2 + 3 * 4");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
        // Improved test data:
        JSTerm jSTerm = new JSTerm();
        StringReader stringReader = new StringReader("2 + 3 * 4 / 5");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSTerm.parseList(streamTokenizer);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("2 + 3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 0
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: // Improved test data:
JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("2 + 3 * 4"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 5
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
statement is: // Improved test data:
JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("2 + 3 * 4 / 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.parseList(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.parseList(streamTokenizer) target is: jSTerm method is: parseList(StreamTokenizer)
source statement: umd.cs.shop.JSTerm()V callee: VariableReference: Statement 0, type umd.cs.shop.JSTermindex is: 10
Matched Method is: parseList(Ljava/io/StreamTokenizer;)Lumd/cs/shop/JSTerm;
TestCase is: JSTerm jSTerm = new JSTerm();
String string = "2 + 3";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * 4";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * 4 / 5";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Expecting variable name in term")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("Expecting variable name in term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Expecting variable name in term");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSTerm jSTerm = new JSTerm();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("Expecting variable name in term"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 3, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "Expecting variable name in term";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = null;
jSTerm.matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = arg0.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input for tokenization");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input for tokenization"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution;
TestCase is: String string = "This is a sample input for tokenization";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: matches(Lumd/cs/shop/JSTerm;Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSSubstitution; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution matches = jSTerm.matches(arg0, arg1)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.makeFunction("T,_r)5XJ-z1Y^#d");
        JSTerm jSTerm = new JSTerm("T,_r)5XJ-z1Y^#d");
        jSTerm.matches(jSTerm, jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction("T,_r)5XJ-z1Y^#d") target is: jSTerm method is: makeFunction(java.lang.String)
statement is: JSTerm jSTerm = new JSTerm("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.matches(jSTerm, jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.matches(jSTerm, jSSubstitution) target is: jSTerm method is: matches(JSTerm,JSSubstitution)
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
String string = "T,_r)5XJ-z1Y^#d";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.equals(jSTerm);
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.equals(jSTerm), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.equals(jSTerm) target is: jSTerm method is: equals(JSTerm)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: equals(Lumd/cs/shop/JSTerm;)Z
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm term1 = new JSTerm("x", 3);
        JSTerm term2 = new JSTerm("y", 5);
        assertTrue(term1.equals(term2));
    }
}
statement is: JSTerm term1 = new JSTerm("x", 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm term2 = new JSTerm("y", 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(term1.equals(term2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(term1.equals(term2)) target is:  method is: assertTrue(<unknown>)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: equals(Lumd/cs/shop/JSTerm;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm1 = new JSTerm("a", 5, true);
        JSTerm jSTerm2 = new JSTerm("b", 10, false);
        jSTerm1.equals(jSTerm2);
    }
}
statement is: JSTerm jSTerm1 = new JSTerm("a", 5, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm2 = new JSTerm("b", 10, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm1.equals(jSTerm2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm1.equals(jSTerm2) target is: jSTerm1 method is: equals(JSTerm)
statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeConstant()
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeConstant(1234567890);// replace with a more descriptive and representative value for testing standardization

        jSTerm.standardizerTerm("This is a test string.");// replace with a more descriptive and representative string for testing standardization }}

    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeConstant(1234567890)// replace with a more descriptive and representative value for testing standardization
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeConstant(1234567890)// replace with a more descriptive and representative value for testing standardization
 target is: jSTerm method is: makeConstant(int)
statement is: jSTerm.standardizerTerm("This is a test string.")// replace with a more descriptive and representative string for testing standardization }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm("This is a test string.")// replace with a more descriptive and representative string for testing standardization }}
 target is: jSTerm method is: standardizerTerm(java.lang.String)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: umd.cs.shop.JSSubstitution()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSSubstitution
statement code is: JSSubstitution jSSubstitution = new JSSubstitution()
statement is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm applySubstitutionT = jSTerm.applySubstitutionT(arg0)
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("let x = 5; let y = 10; return x + y");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        JSSubstitution jSSubstitution = new JSSubstitution();
        jSTerm.applySubstitutionT(jSSubstitution);
    }
}
statement is: StringReader stringReader = new StringReader("let x = 5; let y = 10; return x + y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: JSSubstitution jSSubstitution = new JSSubstitution(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.applySubstitutionT(jSSubstitution), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.applySubstitutionT(jSSubstitution) target is: jSTerm method is: applySubstitutionT(JSSubstitution)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: applySubstitutionT(Lumd/cs/shop/JSSubstitution;)Lumd/cs/shop/JSTerm;
TestCase is: String string = "let x = 5; let y = 10; return x + y";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm();
        jSTerm.makeVariable("result");
        jSTerm.call("addTwoNumbers", 12, 5);
        assertEquals(jSTerm.getResult(), 17);
    }
}
statement is: JSTerm jSTerm = new JSTerm(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable("result"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable("result") target is: jSTerm method is: makeVariable(java.lang.String)
statement is: jSTerm.call("addTwoNumbers", 12, 5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call("addTwoNumbers", 12, 5) target is: jSTerm method is: call(java.lang.String,int,int)
statement is: assertEquals(jSTerm.getResult(), 17), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(jSTerm.getResult(), 17) target is:  method is: assertEquals(<unknown>,int)
TestCase is: JSTerm jSTerm = new JSTerm();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: call()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm call = jSTerm.call()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input string with some special characters like !@#$%^&*()_+=-{}[]|\":;\'<>./?");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval("x + y * z - (a / b)");
        jSTerm.call();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input string with some special characters like !@#$%^&*()_+=-{}[]|\":;\'<>./?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval("x + y * z - (a / b)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval("x + y * z - (a / b)") target is: jSTerm method is: makeEval(java.lang.String)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.call(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.call() target is: jSTerm method is: call()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: call()Lumd/cs/shop/JSTerm;
TestCase is: String string = "This is a sample input string with some special characters like !@#$%^&*()_+=-{}[]|\":;'<>./?";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "x + y * z - (a / b)";
((JSTerm) streamTokenizer).makeEval((boolean) string);
((JSTerm) streamTokenizer).call();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: cloneT()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm cloneT = jSTerm.cloneT()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test sentence for the StreamTokenizer class, which should tokenize all the words in the sentence and provide them as tokens.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.cloneT();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test sentence for the StreamTokenizer class, which should tokenize all the words in the sentence and provide them as tokens."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.cloneT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.cloneT() target is: jSTerm method is: cloneT()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: cloneT()Lumd/cs/shop/JSTerm;
TestCase is: String string = "This is a test sentence for the StreamTokenizer class, which should tokenize all the words in the sentence and provide them as tokens.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).cloneT();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: isConstant()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean constant = jSTerm.isConstant()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("1+2", 3);
        jSTerm.isConstant(true);
    }
}
statement is: JSTerm jSTerm = new JSTerm("1+2", 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.isConstant(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isConstant(true) target is: jSTerm method is: isConstant(boolean)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: isEval()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eval = jSTerm.isEval()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test data for the StreamTokenizer class in Java, which is used to tokenize input streams and perform various operations on them.");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeEval(true);
        jSTerm.isEval();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test data for the StreamTokenizer class in Java, which is used to tokenize input streams and perform various operations on them."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeEval(Z)V
statement is: jSTerm.isEval(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isEval() target is: jSTerm method is: isEval()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isEval()Z
TestCase is: String string = "This is a test data for the StreamTokenizer class in Java, which is used to tokenize input streams and perform various operations on them.";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
boolean _boolean = true;
((JSTerm) streamTokenizer).makeEval(_boolean);
((JSTerm) streamTokenizer).isEval();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: makeFunction()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeFunction()
statement is: isFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean function = jSTerm.isFunction()
test data is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.makeFunction();
        jSTerm.isFunction();
    }
}
statement is: StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeFunction() target is: jSTerm method is: makeFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: makeFunction()V
statement is: jSTerm.isFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isFunction() target is: jSTerm method is: isFunction()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: isFunction()Z
TestCase is: String string = "T,_r)5XJ-z1Y^#d";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).isFunction();

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: makeVariable()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeVariable()
statement is: isVariable()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean variable = jSTerm.isVariable()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSTerm jSTerm = new JSTerm("A");
        jSTerm.makeVariable();
        jSTerm.isVariable();
        // This test data is more descriptive and representative of the situation being tested, as it uses a more specific value for the variable "A" instead of using a generic integer value. }}
    }
}
statement is: JSTerm jSTerm = new JSTerm("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.makeVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeVariable() target is: jSTerm method is: makeVariable()
statement is: jSTerm.isVariable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.isVariable() target is: jSTerm method is: isVariable()
statement is: // This test data is more descriptive and representative of the situation being tested, as it uses a more specific value for the variable "A" instead of using a generic integer value. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("WJl\"Gz'ao:[")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm(arg0)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: StringReader stringReader = new StringReader("WJl\"Gz'ao:[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("WJl\"Gz\'ao:[");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        JSTerm jSTerm = new JSTerm(streamTokenizer);
        jSTerm.standardizerTerm();
        String expectedOutput = "Standardized term";
        assertEquals(expectedOutput, jSTerm.getStandardizedTerm());
    }
}
statement is: StringReader stringReader = new StringReader("WJl\"Gz\'ao:["), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSTerm jSTerm = new JSTerm(streamTokenizer), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
source statement: umd.cs.shop.JSTerm(Ljava/io/StreamTokenizer;)V callee: VariableReference: Statement 2, type umd.cs.shop.JSTermindex is: 3
Matched Method is: standardizerTerm()Lumd/cs/shop/JSTerm;
statement is: String expectedOutput = "Standardized term", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedOutput, jSTerm.getStandardizedTerm()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, jSTerm.getStandardizedTerm()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "Standardized term"
TestCase is: String string = "WJl\"Gz'ao:[";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();
String string = "Standardized term";

statement is: umd.cs.shop.JSTerm()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm jSTerm = new JSTerm()
statement is: addElement(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addElement(arg0)
statement is: makeEval(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSTerm.makeEval(true)
statement is: standardizerTerm()Lumd/cs/shop/JSTerm; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSTerm
statement code is: JSTerm standardizerTerm = jSTerm.standardizerTerm()
test data is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTerm jSTerm = new JSTerm("Hello, World!");
        jSTerm.addElement(new JSTerm("This", "is", "a", "test"));
        jSTerm.makeEval(true);
        jSTerm.standardizerTerm();
    }
}
statement is: // Improved test data
JSTerm jSTerm = new JSTerm("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTerm.addElement(new JSTerm("This", "is", "a", "test")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.addElement(new JSTerm("This", "is", "a", "test")) target is: jSTerm method is: addElement(JSTerm)
statement is: jSTerm.makeEval(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.makeEval(true) target is: jSTerm method is: makeEval(boolean)
statement is: jSTerm.standardizerTerm(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTerm.standardizerTerm() target is: jSTerm method is: standardizerTerm()
* test suite isTestSuite: 112
Test 0: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 1: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 2: 
StringReader stringReader = new StringReader("?{)- G<?,\"^A:I");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 3: 
StringReader stringReader = new StringReader("? ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("%bH#4m+(E:5oE;'^");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 5: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
cloneT.matches(jSTerm, jSSubstitution);
Test 7: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(!Ee(vop(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(I,7#Ad@{-;{;d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.resetSyntax();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.add(1, (Object) clone);
jSTerm.print();
Test 17: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
jSTerm.equals(cloneT);
Test 18: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.cloneT();
Test 19: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 20: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.applySubstitutionT(jSSubstitution);
Test 21: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(stringReader);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
JSSubstitution matches = standardizerTerm.matches(jSTerm);
standardizerTerm.matches(jSTerm, matches);
Test 22: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.matches(jSTerm, jSSubstitution);
Test 23: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 24: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 25: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 26: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 27: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.matches(jSTerm, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 29: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 30: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 31: 
StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
jSTerm.equals(standardizerTerm);
Test 32: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 33: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 34: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.toStr();
Test 35: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 36: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 38: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 39: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
Test 40: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeVariable();
jSTerm.call();
Test 41: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 42: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 43: 
StringReader stringReader = new StringReader("u'I*50]hl+g<ny=");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 46: 
StringReader stringReader = new StringReader(" ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 47: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 48: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("Expecting variable name in term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 49: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 50: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 51: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 53: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 55: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 57: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 58: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 59: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 60: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 61: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 63: 
StringReader stringReader = new StringReader("WJl\"Gz'ao:[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 64: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 65: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(+ 3.14 2.71)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(* 6 9)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 66: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 67: 
StringReader stringReader = new StringReader("Hello, world!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 68: 
StringReader stringReader = new StringReader("hello");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 69: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

Test 70: 
StringReader stringReader = new StringReader("(100 + 2.5) * 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("(!Ee(vop(\"Hello World\")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("[1, 2.3, 'hello', 'world']");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 73: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).resetSyntax();
jSTerm.parseList(streamTokenizer);

Test 74: 
JSTerm jSTerm = new JSTerm();
jSTerm.print();

Test 75: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 76: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).print();

Test 77: 
StringReader stringReader = new StringReader("A,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm clone = (JSTerm)((Vector) streamTokenizer).clone();
int _int = 1;
((Vector) streamTokenizer).add(_int, (Object) clone);
((JSTerm) streamTokenizer).print();

Test 78: 
StringReader stringReader = new StringReader("Hello, world!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = ((JSTerm) streamTokenizer).cloneT();
jSTerm.makeFunction();
((JSTerm) streamTokenizer).equals(cloneT);

Test 79: 
StringReader stringReader = new StringReader("This is a test string with some numbers 1234567890 and some special characters $%^&*()_-+={}[]|:\";'<>?,./");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 80: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();

Test 81: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 82: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "5XJ-zY^#d";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution jSSubstitution = null;
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 83: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 84: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "Java-like programming language");
String string = "JavaScript";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "Java-like programming language";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);

Test 85: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 86: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSSubstitution.addElement(jSTerm);
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 87: 
StringReader stringReader = new StringReader("This is a sample input string for testing JSTerm class.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).equals(jSTerm);

Test 88: 
JSTerm jSTerm = new JSTerm();

Test 89: 
StringReader stringReader = new StringReader("7");
JSTerm jSTerm = new JSTerm();
((Vector) stringReader).addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).equals(jSTerm);

Test 90: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

Test 91: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 92: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement((Object) null);
jSTerm.isGround();

Test 93: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

Test 94: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).call();

Test 95: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isEval();

Test 96: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();

Test 97: 
JSTerm jSTerm = new JSTerm();

Test 98: 
StringReader stringReader = new StringReader("Hello, World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 99: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2 + 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * 4";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * 4 / 5";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 100: 
StringReader stringReader = new StringReader("Expecting variable name in term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);

Test 101: 
StringReader stringReader = new StringReader("This is a sample input for tokenization");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 102: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm((StreamTokenizer) "T,_r)5XJ-z1Y^#d");

Test 103: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 104: 
JSTerm jSTerm = new JSTerm();

Test 105: 
StringReader stringReader = new StringReader("let x = 5; let y = 10; return x + y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 106: 
JSTerm jSTerm = new JSTerm();

Test 107: 
StringReader stringReader = new StringReader("This is a sample input string with some special characters like !@#$%^&*()_+=-{}[]|\":;'<>./?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval((boolean) "x + y * z - (a / b)");
((JSTerm) streamTokenizer).call();

Test 108: 
StringReader stringReader = new StringReader("This is a test sentence for the StreamTokenizer class, which should tokenize all the words in the sentence and provide them as tokens.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).cloneT();

Test 109: 
StringReader stringReader = new StringReader("This is a test data for the StreamTokenizer class in Java, which is used to tokenize input streams and perform various operations on them.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).isEval();

Test 110: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).isFunction();

Test 111: 
StringReader stringReader = new StringReader("WJl\"Gz'ao:[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();


* Generated after the refinement and before minimization 112 tests with total length 536
* test suite isTestSuite: 112
Test 0: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 1: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 2: 
StringReader stringReader = new StringReader("?{)- G<?,\"^A:I");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 3: 
StringReader stringReader = new StringReader("? ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("%bH#4m+(E:5oE;'^");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 5: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
cloneT.matches(jSTerm, jSSubstitution);
Test 7: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(!Ee(vop(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(I,7#Ad@{-;{;d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.resetSyntax();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.add(1, (Object) clone);
jSTerm.print();
Test 17: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
jSTerm.equals(cloneT);
Test 18: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.cloneT();
Test 19: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 20: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.applySubstitutionT(jSSubstitution);
Test 21: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(stringReader);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
JSSubstitution matches = standardizerTerm.matches(jSTerm);
standardizerTerm.matches(jSTerm, matches);
Test 22: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.matches(jSTerm, jSSubstitution);
Test 23: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 24: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 25: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 26: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 27: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.matches(jSTerm, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 29: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 30: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 31: 
StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
jSTerm.equals(standardizerTerm);
Test 32: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 33: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 34: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.toStr();
Test 35: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 36: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 38: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 39: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
Test 40: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeVariable();
jSTerm.call();
Test 41: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 42: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 43: 
StringReader stringReader = new StringReader("u'I*50]hl+g<ny=");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 44: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 45: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 46: 
StringReader stringReader = new StringReader(" ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 47: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 48: 
JSSubstitution jSSubstitution = new JSSubstitution();
StringReader stringReader = new StringReader("Expecting variable name in term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 49: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 50: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 51: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 52: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 53: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 55: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 56: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 57: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 58: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 59: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 60: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 61: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 62: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 63: 
StringReader stringReader = new StringReader("WJl\"Gz'ao:[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 64: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();
Test 65: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(+ 3.14 2.71)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
String string = "(* 6 9)";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 66: 
StringReader stringReader = new StringReader("1234567890");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 67: 
StringReader stringReader = new StringReader("Hello, world!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 68: 
StringReader stringReader = new StringReader("hello");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 69: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).cloneT();
jSTerm.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);

Test 70: 
StringReader stringReader = new StringReader("(100 + 2.5) * 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 71: 
StringReader stringReader = new StringReader("(!Ee(vop(\"Hello World\")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 72: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("[1, 2.3, 'hello', 'world']");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 73: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
((StreamTokenizer) stringReader).resetSyntax();
jSTerm.parseList(streamTokenizer);

Test 74: 
JSTerm jSTerm = new JSTerm();
jSTerm.print();

Test 75: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).print();

Test 76: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).print();

Test 77: 
StringReader stringReader = new StringReader("A,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
JSTerm clone = (JSTerm)((Vector) streamTokenizer).clone();
int _int = 1;
((Vector) streamTokenizer).add(_int, (Object) clone);
((JSTerm) streamTokenizer).print();

Test 78: 
StringReader stringReader = new StringReader("Hello, world!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = ((JSTerm) streamTokenizer).cloneT();
jSTerm.makeFunction();
((JSTerm) streamTokenizer).equals(cloneT);

Test 79: 
StringReader stringReader = new StringReader("This is a test string with some numbers 1234567890 and some special characters $%^&*()_-+={}[]|:\";'<>?,./");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 80: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();

Test 81: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).parseList(streamTokenizer);
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 82: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
String string = "5XJ-zY^#d";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
JSSubstitution jSSubstitution = null;
JSSubstitution matches = ((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);
((JSTerm) streamTokenizer).matches(jSTerm, matches);

Test 83: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 84: 
JSTerm jSTerm = new JSTerm((StreamTokenizer) "Java-like programming language");
String string = "JavaScript";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);
String string = "Java-like programming language";
JSTerm jSTerm = new JSTerm((StreamTokenizer) string);

Test 85: 
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 86: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSSubstitution.addElement(jSTerm);
((JSTerm) jSSubstitution).matches(jSTerm, jSSubstitution);

Test 87: 
StringReader stringReader = new StringReader("This is a sample input string for testing JSTerm class.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
JSTerm jSTerm = new JSTerm();
((JSTerm) streamTokenizer).equals(jSTerm);

Test 88: 
JSTerm jSTerm = new JSTerm();

Test 89: 
StringReader stringReader = new StringReader("7");
JSTerm jSTerm = new JSTerm();
((Vector) stringReader).addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) stringReader).equals(jSTerm);

Test 90: 
StringReader stringReader = new StringReader("Hello World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).toStr();

Test 91: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isGround();

Test 92: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement((Object) null);
jSTerm.isGround();

Test 93: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).standardizerTerm();

Test 94: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).makeVariable();
((JSTerm) streamTokenizer).call();

Test 95: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).isEval();

Test 96: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();

Test 97: 
JSTerm jSTerm = new JSTerm();

Test 98: 
StringReader stringReader = new StringReader("Hello, World!");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);

Test 99: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("2 + 3");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * 4";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);
JSTerm jSTerm = new JSTerm();
String string = "2 + 3 * 4 / 5";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSTerm.parseList(streamTokenizer);

Test 100: 
StringReader stringReader = new StringReader("Expecting variable name in term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);

Test 101: 
StringReader stringReader = new StringReader("This is a sample input for tokenization");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).matches(jSTerm, jSSubstitution);

Test 102: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm((StreamTokenizer) "T,_r)5XJ-z1Y^#d");

Test 103: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).equals(jSTerm);

Test 104: 
JSTerm jSTerm = new JSTerm();

Test 105: 
StringReader stringReader = new StringReader("let x = 5; let y = 10; return x + y");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
JSSubstitution jSSubstitution = new JSSubstitution();
((JSTerm) streamTokenizer).applySubstitutionT(jSSubstitution);

Test 106: 
JSTerm jSTerm = new JSTerm();

Test 107: 
StringReader stringReader = new StringReader("This is a sample input string with some special characters like !@#$%^&*()_+=-{}[]|\":;'<>./?");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval((boolean) "x + y * z - (a / b)");
((JSTerm) streamTokenizer).call();

Test 108: 
StringReader stringReader = new StringReader("This is a test sentence for the StreamTokenizer class, which should tokenize all the words in the sentence and provide them as tokens.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).cloneT();

Test 109: 
StringReader stringReader = new StringReader("This is a test data for the StreamTokenizer class in Java, which is used to tokenize input streams and perform various operations on them.");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeEval(true);
((JSTerm) streamTokenizer).isEval();

Test 110: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).makeFunction();
((JSTerm) streamTokenizer).isFunction();

Test 111: 
StringReader stringReader = new StringReader("WJl\"Gz'ao:[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
((JSTerm) streamTokenizer).standardizerTerm();


* Minimizing test suite
* test suite isTestSuite: 64
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 2: 
StringReader stringReader = new StringReader("Expecting variable name in term");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, (JSSubstitution) null);
Test 3: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("? ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("?{)- G<?,\"^A:I");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 6: 
StringReader stringReader = new StringReader("%%%");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
StringReader stringReader = new StringReader("%bH#4m+(E:5oE;'^");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
Test 8: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(!Ee(vop(\"Hello World\")");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
StringReader stringReader = new StringReader("(I,7#Ad@{-;{;d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 11: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 12: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.resetSyntax();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 13: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 14: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 16: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.add(1, (Object) clone);
jSTerm.print();
Test 17: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
jSTerm.equals(cloneT);
Test 18: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.cloneT();
Test 19: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.cloneT();
Test 20: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 21: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.applySubstitutionT(jSSubstitution);
Test 22: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 23: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.matches(jSTerm, jSSubstitution);
Test 24: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 25: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 26: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 27: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 28: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.matches(jSTerm, jSSubstitution);
Test 29: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(stringReader);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
JSSubstitution matches = standardizerTerm.matches(jSTerm);
standardizerTerm.matches(jSTerm, matches);
Test 30: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 31: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 32: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 33: 
StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
jSTerm.equals(standardizerTerm);
Test 34: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.toStr();
Test 35: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 36: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.toStr();
Test 37: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 38: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.isGround();
Test 39: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 40: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
jSTerm.standardizerTerm();
Test 41: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeVariable();
jSTerm.call();
Test 42: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 43: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
Test 44: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 45: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.isConstant();
Test 47: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 48: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 49: 
StringReader stringReader = new StringReader(" ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 50: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
cloneT.matches(jSTerm, jSSubstitution);
Test 51: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 52: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 53: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.equals(jSTerm);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 54: 
JSTerm jSTerm = new JSTerm();
jSTerm.equals(jSTerm);
Test 55: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.applySubstitutionT(jSSubstitution);
Test 56: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 57: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 58: 
StringReader stringReader = new StringReader("u'I*50]hl+g<ny=");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 59: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 60: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 61: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 62: 
StringReader stringReader = new StringReader("WJl\"Gz'ao:[");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();
Test 63: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
jSTerm.standardizerTerm();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 192
* Number of covered goals: 150
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 318
* Number of covered goals: 253
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 66%
* Total number of goals: 123
* Number of covered goals: 81
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 192
* Number of covered goals: 150
* Generated 64 tests with total length 303
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 66%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testPrintNonExistentElement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testStandardizerTermWithoutException
* Compiling Tests
refined test name is: testStandardizerTermArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testPrintWithNoElements
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm arg0 = new JSTerm();
jSTerm.addElement(arg0);
boolean ground = jSTerm.isGround();
assertTrue(ground);


** It was a parseable test case! 
refined test name is: testNonGroundTermWithNestedListIsRecognizedAsSuch
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
JSTerm call = jSTerm.call();
assertEquals(0, call.capacity());
assertFalse(call.isFunction());


** It was a parseable test case! 
refined test name is: testVariableIsNotAFunction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean constant = jSTerm.isConstant();
assertFalse(constant);


** It was a parseable test case! 
refined test name is: testIsNotConstantwhenInstanceIsNotConstant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean variable = jSTerm.isVariable();
assertFalse(variable);


** It was a parseable test case! 
refined test name is: testIsVariableReturnsFalse
* Compiling Tests
refined test name is: testIsVariableReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
boolean function = jSTerm.isFunction();
assertFalse(function);


** It was a parseable test case! 
refined test name is: testIsNotAFunction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.makeVariable();
// Undeclared exception!
try { 
  arg0.equals(arg0);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}


** It was a parseable test case! 
refined test name is: testEqualsThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
boolean equals = arg0.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsReturnsFalseForSameObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
assertFalse(jSTerm.isFunction());


** It was a parseable test case! 
refined test name is: testJSTermIsNotFunctionWhenCreated
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTerm arg0 = new JSTerm();
arg0.addElement(arg0);
arg0.makeEval(true);
arg0.standardizerTerm();
assertTrue(arg0.isEval());


** It was a parseable test case! 
refined test name is: testAddElementAndMakeEvalWhenCalledReturnsEvalTerm
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.443 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:27:17.504 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.505 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.552 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.553 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.591 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.592 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.624 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.658 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.658 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:27:17.691 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.691 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.726 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.726 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.765 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.766 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.803 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.804 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.845 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.846 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:27:17.887 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:17.887 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 6 called: 1 to improve: false
[MASTER] 11:27:18.059 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:18.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
[MASTER] 11:27:18.212 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:27:18.213 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
[MASTER] 11:27:19.011 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 43
Test 0: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 1: 
StringReader stringReader = new StringReader("GV");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.call();
Test 2: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
cloneT.matches(jSTerm, jSSubstitution);
Test 3: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 4: 
StringReader stringReader = new StringReader("(!Ee(vop(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.resetSyntax();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 7: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 8: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.ordinaryChar((-3));
streamTokenizer.ordinaryChar((-338));
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
UnaryOperator<Object> identity = UnaryOperator.identity();
stringReader.ready();
jSSubstitution.replaceAll(identity);
JSTerm applySubstitutionT = jSTerm.applySubstitutionT(jSSubstitution);
cloneT.makeFunction();
jSTerm.equals(cloneT);
jSTerm.print();
JSTerm parseList = cloneT.parseList(streamTokenizer);
applySubstitutionT.makeEval(false);
jSTerm.equals(applySubstitutionT);
cloneT.print();
JSTerm jSTerm = new JSTerm();
parseList.matches(applySubstitutionT, jSSubstitution);
Test 9: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 10: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.add(1, (Object) clone);
jSTerm.print();
Test 11: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.cloneT();
Test 12: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.applySubstitutionT(jSSubstitution);
Test 13: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(stringReader);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
JSSubstitution matches = standardizerTerm.matches(jSTerm);
standardizerTerm.matches(jSTerm, matches);
Test 14: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.matches(jSTerm, jSSubstitution);
Test 15: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 16: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeVariable();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 17: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 18: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 19: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.matches(jSTerm, jSSubstitution);
Test 20: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 21: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 22: 
StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.equals(jSTerm);
Test 23: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.toStr();
Test 24: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 25: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.ordinaryChar(1);
streamTokenizer.ordinaryChar(1);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
JSJshopVars.VarCounter = 1;
JSJshopVars.interrogation = 1;
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
UnaryOperator<Object> identity = UnaryOperator.identity();
stringReader.ready();
streamTokenizer.parseNumbers();
jSSubstitution.replaceAll(identity);
JSTerm applySubstitutionT = cloneT.applySubstitutionT(jSSubstitution);
applySubstitutionT.makeFunction();
cloneT.equals(applySubstitutionT);
JSTerm applySubstitutionT = cloneT.applySubstitutionT(jSSubstitution);
applySubstitutionT.makeFunction();
JSTerm jSTerm = new JSTerm();
applySubstitutionT.equals(jSTerm);
applySubstitutionT.toStr();
JSTerm standardizerTerm = jSTerm.standardizerTerm();
standardizerTerm.replaceAll(identity);
Test 26: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
Test 27: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 28: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 29: 
StringReader stringReader = new StringReader("u'I*50]hl+g<ny=");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 31: 
StringReader stringReader = new StringReader(" ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 32: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 33: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 34: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.ordinaryChar((-3));
streamTokenizer.ordinaryChar((-3));
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
JSJshopVars.VarCounter = (-3);
JSJshopVars.interrogation = (-3);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
UnaryOperator<Object> identity = UnaryOperator.identity();
stringReader.ready();
jSSubstitution.replaceAll(identity);
JSTerm applySubstitutionT = cloneT.applySubstitutionT(jSSubstitution);
applySubstitutionT.makeFunction();
cloneT.equals(applySubstitutionT);
cloneT.print();
cloneT.parseList(streamTokenizer);
applySubstitutionT.makeEval(false);
cloneT.equals(jSTerm);
jSTerm.toStr();
Test 35: 
StringReader stringReader = new StringReader("c*?0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
streamTokenizer.quoteChar(2);
jSTerm.call();
JSJshopVars.leftBrac = (-1);
stringReader.skip(2);
jSTerm.isVariable();
cloneT.isGround();
cloneT.isGround();
jSTerm.makeEval(true);
jSTerm.isEval();
Test 36: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 38: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 39: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 40: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 41: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 42: 
StringReader stringReader = new StringReader("U&nHxh3R)Ho?/[,+s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches((JSTerm) null);

* Minimizing test suite
* test suite isTestSuite: 48
Test 0: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.call();
Test 1: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeConstant();
// Undeclared exception!
try { 
  jSTerm.standardizerTerm();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 2: 
JSTerm jSTerm = new JSTerm();
jSTerm.isFunction();
Test 3: 
StringReader stringReader = new StringReader("U&nHxh3R)Ho?/[,+s");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches((JSTerm) null);
Test 4: 
StringReader stringReader = new StringReader(" ");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 5: 
StringReader stringReader = new StringReader("(!Ee(vop(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 6: 
StringReader stringReader = new StringReader("GV");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

jSTerm.call();
Test 7: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader(".Df.P|KVNjy:e4S@");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.resetSyntax();
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 8: 
StringReader stringReader = new StringReader("(");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 9: 
StringReader stringReader = new StringReader("(v JK9^;]");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = null;
try {
  jSTerm = new JSTerm(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 10: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(".");
// Undeclared exception!
try { 
  jSTerm.print();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1 >= 1
   //
   verifyException("java.util.Vector", e);
}

Test 11: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.print();
Test 12: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.ordinaryChar((-3));
streamTokenizer.ordinaryChar((-3));
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
JSJshopVars.VarCounter = (-3);
JSJshopVars.interrogation = (-3);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
UnaryOperator<Object> identity = UnaryOperator.identity();
stringReader.ready();
jSSubstitution.replaceAll(identity);
JSTerm applySubstitutionT = cloneT.applySubstitutionT(jSSubstitution);
applySubstitutionT.makeFunction();
cloneT.equals(applySubstitutionT);
cloneT.print();
cloneT.parseList(streamTokenizer);
applySubstitutionT.makeEval(false);
cloneT.equals(jSTerm);
jSTerm.toStr();
Test 13: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.makeFunction();
jSTerm.print();
Test 14: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.add(1, (Object) clone);
jSTerm.print();
Test 15: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.cloneT();
Test 16: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.applySubstitutionT(jSSubstitution);
Test 17: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm parseList = jSTerm.parseList(streamTokenizer);
parseList.matches(jSTerm, jSSubstitution);
Test 18: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(stringReader);
jSTerm.addElement(jSTerm);
JSTerm standardizerTerm = jSTerm.standardizerTerm();
JSSubstitution matches = standardizerTerm.matches(jSTerm);
standardizerTerm.matches(jSTerm, matches);
Test 19: 
StringReader stringReader = new StringReader("T,_r)5XJ-zY^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
JSSubstitution matches = jSTerm.matches(jSTerm, jSSubstitution);
jSTerm.matches(jSTerm, matches);
Test 20: 
StringReader stringReader = new StringReader("A-=']=o.0Q3,>u");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 21: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("(IAH)Ad{?-+{;A:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.matches(jSTerm);
Test 22: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.matches(jSTerm, jSSubstitution);
Test 23: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSSubstitution jSSubstitution = new JSSubstitution();
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.matches(jSTerm, jSSubstitution);
Test 24: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 25: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 26: 
StringReader stringReader = new StringReader("(IDe7)AdH{-+6;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.equals(jSTerm);
Test 27: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.toStr();
Test 28: 
StringReader stringReader = new StringReader("(I,7)Ad@{-;{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm clone = (JSTerm)jSTerm.clone();
jSTerm.addElement(clone);
jSTerm.toStr();
Test 29: 
StringReader stringReader = new StringReader("c*?0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isGround();
Test 30: 
JSTerm jSTerm = new JSTerm();
jSTerm.addElement("A-=']=o.0Q3,>u");
JSTerm jSTerm = new JSTerm();
jSTerm.addElement(jSTerm);
jSTerm.isGround();
Test 31: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
streamTokenizer.ordinaryChar(1);
streamTokenizer.ordinaryChar(1);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
JSJshopVars.VarCounter = 1;
JSJshopVars.interrogation = 1;
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
UnaryOperator<Object> identity = UnaryOperator.identity();
stringReader.ready();
streamTokenizer.parseNumbers();
jSSubstitution.replaceAll(identity);
JSTerm applySubstitutionT = cloneT.applySubstitutionT(jSSubstitution);
applySubstitutionT.makeFunction();
cloneT.equals(applySubstitutionT);
JSTerm applySubstitutionT = cloneT.applySubstitutionT(jSSubstitution);
applySubstitutionT.makeFunction();
JSTerm jSTerm = new JSTerm();
applySubstitutionT.equals(jSTerm);
applySubstitutionT.toStr();
jSTerm.standardizerTerm();
Test 32: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.call();
Test 33: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.call();
Test 34: 
StringReader stringReader = new StringReader("(Ie7)Ad{-+{;:");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.addElement(jSTerm);
jSTerm.makeEval(true);
// Undeclared exception!
try { 
  jSTerm.call();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2 >= 2
   //
   verifyException("java.util.Vector", e);
}

Test 35: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isEval();
Test 36: 
StringReader stringReader = new StringReader("u'I*50]hl+g<ny=");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.isConstant();
Test 37: 
JSTerm jSTerm = new JSTerm();
jSTerm.isVariable();
Test 38: 
JSTerm jSTerm = new JSTerm();
StringReader stringReader = new StringReader("");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSTerm.parseList(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSTerm", e);
}

Test 39: 
StringReader stringReader = new StringReader("5.0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSTerm cloneT = jSTerm.cloneT();
cloneT.makeFunction();
JSSubstitution jSSubstitution = new JSSubstitution();
cloneT.matches(jSTerm, jSSubstitution);
Test 40: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeFunction();
JSTerm jSTerm = new JSTerm();
jSTerm.matches(jSTerm, jSSubstitution);
Test 41: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.equals(jSTerm);
Test 42: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
JSSubstitution jSSubstitution = new JSSubstitution();
jSTerm.makeEval(true);
jSTerm.applySubstitutionT(jSSubstitution);
Test 43: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.cloneT();
Test 44: 
StringReader stringReader = new StringReader("c*?0");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeEval(true);
jSTerm.isEval();
Test 45: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.makeFunction();
jSTerm.isFunction();
Test 46: 
JSTerm jSTerm = new JSTerm();
jSTerm.makeVariable();
jSTerm.isVariable();
Test 47: 
StringReader stringReader = new StringReader("T,_r)5XJ-z1Y^#d");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
JSTerm jSTerm = new JSTerm(streamTokenizer);
jSTerm.standardizerTerm();

[MASTER] 11:28:40.190 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 76%
* Total number of goals: 192
* Number of covered goals: 146
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 318
* Number of covered goals: 247
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 123
* Number of covered goals: 82
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 192
* Number of covered goals: 145
* Generated 48 tests with total length 269
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:28:40.364 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 54%
* Compiling and checking tests
[MASTER] 11:29:24.249 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.319 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.320 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.380 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.451 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.491 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.492 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.558 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.560 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.649 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:29:26.721 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.722 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 11:29:26.809 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.810 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 11:29:26.905 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar3402612528761145190.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:29:26.906 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3402612528761145190.jar
* Writing tests to file
[MASTER] 11:29:26.908 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'JSTerm_ESTest' to evosuite-tests
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
* Writing JUnit test case 'JSTerm_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
* Done!

* Computation finished
