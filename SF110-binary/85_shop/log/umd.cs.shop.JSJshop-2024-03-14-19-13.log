* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: umd.cs.shop.JSJshop
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/85_shop/evosuite-files/evosuite.properties
* Connecting to master process on port 19173
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:14:16.229 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:14:16.321 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:14:16.322 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:14:17.987 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 19:14:23.479 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 19:14:23.482 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 19:14:35.292 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 19:14:35.871 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 19:14:35.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 19:14:35.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 19:14:35.873 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 19:14:35.874 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 19:14:35.874 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 19:14:35.906 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 19:14:35.907 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 19:14:36.038 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 19:14:36.124 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class umd.cs.shop.JSJshop
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 528
* Using seed 1710443645297
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 132 / 528
[MASTER] 19:14:57.116 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           8%] [Cov:========>                          25%][Progress:=====>                        19%] [Cov:=========>                         26%][Progress:======>                       21%] [Cov:=========>                         26%][Progress:======>                       21%] [Cov:===========>                       33%][Progress:======>                       23%] [Cov:===========>                       33%][Progress:========>                     27%] [Cov:===========>                       33%][Progress:========>                     27%] [Cov:===========>                       33%][Progress:========>                     29%] [Cov:===========>                       34%][Progress:=========>                    31%] [Cov:===========>                       34%][Progress:=========>                    32%] [Cov:===========>                       34%][Progress:==========>                   36%] [Cov:===========>                       34%][Progress:===========>                  37%] [Cov:===========>                       34%][Progress:============>                 40%] [Cov:===========>                       34%][Progress:============>                 40%] [Cov:===========>                       34%][Progress:============>                 42%] [Cov:===========>                       34%][Progress:============>                 42%] [Cov:===========>                       34%][Progress:============>                 43%] [Cov:===========>                       34%][Progress:============>                 43%] [Cov:===========>                       34%][Progress:=============>                45%] [Cov:===========>                       34%][Progress:===============>              50%] [Cov:===========>                       34%][Progress:===============>              52%] [Cov:===========>                       34%][Progress:================>             55%] [Cov:===========>                       34%][Progress:=================>            57%] [Cov:===========>                       34%][Progress:==================>           60%] [Cov:===========>                       34%][Progress:===================>          64%] [Cov:===========>                       34%][Progress:===================>          66%] [Cov:===========>                       34%][Progress:===========================>  92%] [Cov:===========>                       34%][Progress:============================> 94%] [Cov:================>                  46%][Progress:============================> 96%] [Cov:================>                  47%][Progress:============================> 96%] [Cov:================>                  48%][Progress:=============================>99%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%]
* Search finished after 207s and 32 generations, 9237 statements, best individual has fitness: 295.0
* Generated before the refinement 25 tests with total length 61
statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getTree()Lumd/cs/shop/JSJshopNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSJshopNode
statement code is: JSJshopNode tree = jSJshop.getTree()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getTree();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int numProducts = 10;
        String[] productNames = new String[]{ "Product A", "Product B", "Product C", "Product D", "Product E", "Product F", "Product G", "Product H", "Product I", "Product J" };
        int[] productPrices = new int[]{ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110 };
        String[] productCategories = new String[]{ "Electronics", "Fashion", "Home Appliances", "Sports Equipment", "Beauty and Personal Care" };
        jSJshop.addProduct(new Product("Product A", 20, "Electronics"));
        jSJshop.addProduct(new Product("Product B", 30, "Fashion"));
        jSJshop.addProduct(new Product("Product C", 40, "Home Appliances"));
        jSJshop.addProduct(new Product("Product D", 50, "Sports Equipment"));
        jSJshop.addProduct(new Product("Product E", 60, "Beauty and Personal Care"));
        jSJshop.addProduct(new Product("Product F", 70, "Electronics"));
        jSJshop.addProduct(new Product("Product G", 80, "Fashion"));
        jSJshop.addProduct(new Product("Product H", 90, "Home Appliances"));
        jSJshop.addProduct(new Product("Product I", 100, "Sports Equipment"));
        jSJshop.addProduct(new Product("Product J", 110, "Beauty and Personal Care"));
    }
}
statement is: int numProducts = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] productNames = new String[]{ "Product A", "Product B", "Product C", "Product D", "Product E", "Product F", "Product G", "Product H", "Product I", "Product J" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] productPrices = new int[]{ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] productCategories = new String[]{ "Electronics", "Fashion", "Home Appliances", "Sports Equipment", "Beauty and Personal Care" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: jSJshop.addProduct(new Product("Product A", 20, "Electronics")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product A", 20, "Electronics")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product B", 30, "Fashion")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product B", 30, "Fashion")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product C", 40, "Home Appliances")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product C", 40, "Home Appliances")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product D", 50, "Sports Equipment")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product D", 50, "Sports Equipment")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product E", 60, "Beauty and Personal Care")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product E", 60, "Beauty and Personal Care")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product F", 70, "Electronics")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product F", 70, "Electronics")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product G", 80, "Fashion")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product G", 80, "Fashion")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product H", 90, "Home Appliances")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product H", 90, "Home Appliances")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product I", 100, "Sports Equipment")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product I", 100, "Sports Equipment")) target is: jSJshop method is: addProduct(Product)
statement is: jSJshop.addProduct(new Product("Product J", 110, "Beauty and Personal Care")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.addProduct(new Product("Product J", 110, "Beauty and Personal Care")) target is: jSJshop method is: addProduct(Product)
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getAppletURL(Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/net/URL; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.net.URL
statement code is: URL appletURL = jSJshop.getAppletURL(" Invalid name for a method if/then pair.", (JApplet) null)
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getAppletURL(" Invalid name for a method if/then pair.", (JApplet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.getAppletURL("Invalid name for a method if/then pair.", ((JApplet) (null)));
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.getAppletURL("Invalid name for a method if/then pair.", ((JApplet) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getAppletURL("Invalid name for a method if/then pair.", ((JApplet) (null))) target is: jSJshop method is: getAppletURL(java.lang.String,JApplet)
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getAppletURL(Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/net/URL;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "Invalid name for a method if/then pair.";
JApplet jApplet = null;
jSJshop.getAppletURL(string, jApplet);

statement is: umd.cs.shop.JSTaskAtom()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSTaskAtom
statement code is: JSTaskAtom jSTaskAtom = new JSTaskAtom()
statement is: umd.cs.shop.JSJshop(Ljava/lang/String;Lumd/cs/shop/JSTaskAtom;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop("UBDll", arg1)
test data is: JSTaskAtom jSTaskAtom = new JSTaskAtom();
JSJshop jSJshop = new JSJshop("UBDll", jSTaskAtom);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JSTaskAtom jSTaskAtom = new JSTaskAtom();
        JSJshop jSJshop = new JSJshop("UBDll", jSTaskAtom);
        jSTaskAtom.setTaskName("Test task");
        jSTaskAtom.setTaskDescription("This is a test task for demonstration purposes.");
        jSTaskAtom.setTaskStartDate(LocalDate.now());
        jSTaskAtom.setTaskEndDate(LocalDate.now().plusDays(5));
        jSTaskAtom.setTaskStatus(IN_PROGRESS);
        jSJshop.setShopName("Test shop");
        jSJshop.setShopAddress("123 Main St, Anytown USA");
    }
}
statement is: // Improved test data
JSTaskAtom jSTaskAtom = new JSTaskAtom(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JSJshop jSJshop = new JSJshop("UBDll", jSTaskAtom), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSTaskAtom.setTaskName("Test task"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTaskAtom.setTaskName("Test task") target is: jSTaskAtom method is: setTaskName(java.lang.String)
statement is: jSTaskAtom.setTaskDescription("This is a test task for demonstration purposes."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTaskAtom.setTaskDescription("This is a test task for demonstration purposes.") target is: jSTaskAtom method is: setTaskDescription(java.lang.String)
statement is: jSTaskAtom.setTaskStartDate(LocalDate.now()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTaskAtom.setTaskStartDate(LocalDate.now()) target is: jSTaskAtom method is: setTaskStartDate()
statement is: jSTaskAtom.setTaskEndDate(LocalDate.now().plusDays(5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTaskAtom.setTaskEndDate(LocalDate.now().plusDays(5)) target is: jSTaskAtom method is: setTaskEndDate()
statement is: jSTaskAtom.setTaskStatus(IN_PROGRESS), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSTaskAtom.setTaskStatus(IN_PROGRESS) target is: jSTaskAtom method is: setTaskStatus()
statement is: jSJshop.setShopName("Test shop"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setShopName("Test shop") target is: jSJshop method is: setShopName(java.lang.String)
statement is: jSJshop.setShopAddress("123 Main St, Anytown USA"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setShopAddress("123 Main St, Anytown USA") target is: jSJshop method is: setShopAddress(java.lang.String)
TestCase is: JSTaskAtom jSTaskAtom = new JSTaskAtom();
String string = "UBDll";
JSJshop jSJshop = new JSJshop(string, jSTaskAtom);

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getSolution()Lumd/cs/shop/JSPairPlanTSListNodes; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPairPlanTSListNodes
statement code is: JSPairPlanTSListNodes solution = jSJshop.getSolution()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.getSolution();
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.getSolution(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getSolution() target is: jSJshop method is: getSolution()
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getSolution()Lumd/cs/shop/JSPairPlanTSListNodes;
TestCase is: JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: sol()Lumd/cs/shop/JSPlan; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPlan
statement code is: JSPlan sol = jSJshop.sol()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.sol();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.sol("Example String 1", "Example String 2");
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.sol("Example String 1", "Example String 2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.sol("Example String 1", "Example String 2") target is: jSJshop method is: sol(java.lang.String,java.lang.String)
TestCase is: JSJshop jSJshop = new JSJshop();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: tree()Lumd/cs/shop/JSJshopNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSJshopNode
statement code is: JSJshopNode tree = jSJshop.tree()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.tree();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] numbers = new int[]{ 100, 200, 300, 400, 500 };
        String[] fruits = new String[]{ "banana", "orange", "mango" };
        char[] letters = new char[]{ 'a', 'b', 'c' };
        double[] prices = new double[]{ 5.99, 8.99, 10.99 };
    }
}
statement is: int[] numbers = new int[]{ 100, 200, 300, 400, 500 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] fruits = new String[]{ "banana", "orange", "mango" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] letters = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] prices = new double[]{ 5.99, 8.99, 10.99 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: prob()Lumd/cs/shop/JSPlanningProblem; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPlanningProblem
statement code is: JSPlanningProblem prob = jSJshop.prob()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.prob();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.prob(50, "Apple", 3.14);
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.prob(50, "Apple", 3.14), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.prob(50, "Apple", 3.14) target is: jSJshop method is: prob(int,java.lang.String,double)
TestCase is: JSJshop jSJshop = new JSJshop();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: dom()Lumd/cs/shop/JSPlanningDomain; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSPlanningDomain
statement code is: JSPlanningDomain dom = jSJshop.dom()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.dom();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int numItems = 10;
        List<String> itemNames = Arrays.asList("Apple", "Orange", "Banana", "Grape", "Mango", "Pear", "Apricot", "Plum", "Peach", "Pineapple");
        List<Integer> itemPrices = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
        jSJshop.setNumItems(numItems);
        jSJshop.setItemNames(itemNames);
        jSJshop.setItemPrices(itemPrices);
        // Original test data
        // int numItems = 5;
        // List<String> itemNames = Arrays.asList("Apple", "Orange", "Banana", "Grape", "Mango");
        // List<Integer> itemPrices = Arrays.asList(10, 20, 30, 40, 50);
        // jSJshop.setNumItems(numItems);
        // jSJshop.setItemNames(itemNames);
        // jSJshop.setItemPrices(itemPrices); }}
    }
}
statement is: // Improved test data
int numItems = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: List<String> itemNames = Arrays.asList("Apple", "Orange", "Banana", "Grape", "Mango", "Pear", "Apricot", "Plum", "Peach", "Pineapple"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList("Apple", "Orange", "Banana", "Grape", "Mango", "Pear", "Apricot", "Plum", "Peach", "Pineapple") target is: Arrays method is: asList(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
statement is: List<Integer> itemPrices = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90, 100) target is: Arrays method is: asList(int,int,int,int,int,int,int,int,int,int)
statement is: jSJshop.setNumItems(numItems), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setNumItems(numItems) target is: jSJshop method is: setNumItems(int)
statement is: jSJshop.setItemNames(itemNames), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setItemNames(itemNames) target is: jSJshop method is: setItemNames(List)
statement is: jSJshop.setItemPrices(itemPrices), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setItemPrices(itemPrices) target is: jSJshop method is: setItemPrices(List)
statement is: // Original test data, class spoon.support.reflect.code.CtCommentImpl
statement is: // int numItems = 5;, class spoon.support.reflect.code.CtCommentImpl
statement is: // List<String> itemNames = Arrays.asList("Apple", "Orange", "Banana", "Grape", "Mango");, class spoon.support.reflect.code.CtCommentImpl
statement is: // List<Integer> itemPrices = Arrays.asList(10, 20, 30, 40, 50);, class spoon.support.reflect.code.CtCommentImpl
statement is: // jSJshop.setNumItems(numItems);, class spoon.support.reflect.code.CtCommentImpl
statement is: // jSJshop.setItemNames(itemNames);, class spoon.support.reflect.code.CtCommentImpl
statement is: // jSJshop.setItemPrices(itemPrices); }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;

statement is: org.evosuite.testcase.statements.ArrayStatement@cfcc8f86 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JSJshop.main(arg0)
test data is: String[] stringArray = new String[1];
JSJshop.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        ArrayList<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        numbers.add(5);
        System.out.println(numbers);
    }
}
statement is: ArrayList<Integer> numbers = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: numbers.add(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: numbers.add(1) target is: numbers method is: add(int)
statement is: numbers.add(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: numbers.add(2) target is: numbers method is: add(int)
statement is: numbers.add(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: numbers.add(3) target is: numbers method is: add(int)
statement is: numbers.add(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: numbers.add(4) target is: numbers method is: add(int)
statement is: numbers.add(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: numbers.add(5) target is: numbers method is: add(int)
statement is: System.out.println(numbers), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(numbers) target is: System.out method is: println(char[])
statement is: org.evosuite.testcase.statements.ArrayStatement@c0c3d3cd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JSJshop.main(arg0)
test data is: String[] stringArray = new String[9];
JSJshop.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "create", "--help" };
        JSJshop.main(stringArray);
    }
}
statement is: String[] stringArray = new String[]{ "create", "--help" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new String[]{ "create", "--help" } Elements: ["create", "--help"]
lengths: [9] []
statement is: JSJshop.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JSJshop.main(stringArray) target is: JSJshop method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = null;
JSJshop.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@33481e5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JSJshop.main(arg0)
test data is: String[] stringArray = new String[3];
JSJshop.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Red";
        stringArray[1] = "Orange";
        stringArray[2] = "Yellow";
        JSJshop.main(stringArray);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Red", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Red" Ct is: stringArray[0] = "Red"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Orange", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Orange" Ct is: stringArray[1] = "Orange"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Yellow", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Yellow" Ct is: stringArray[2] = "Yellow"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JSJshop.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JSJshop.main(stringArray) target is: JSJshop method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[3];
JSJshop.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@8bd49702 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7dfff799 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "all"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JSJshop.main(arg0)
test data is: String[] stringArray = new String[3];
stringArray[2] = "all";
JSJshop.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "--help";
        stringArray[1] = "-v";
        stringArray[2] = "all";
        JSJshop.main(stringArray);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "--help", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"--help" Ct is: stringArray[0] = "--help"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "-v", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-v" Ct is: stringArray[1] = "-v"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[2] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JSJshop.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JSJshop.main(stringArray) target is: JSJshop method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[3];
String string = "--help";
stringArray[2] = string;
String string = "-v";
stringArray[2] = string;
String string = "all";
stringArray[2] = string;
JSJshop.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@e419403e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b2c9627f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "3D"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JSJshop.main(arg0)
test data is: String[] stringArray = new String[2];
stringArray[0] = "3D";
JSJshop.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TechnoCraft-18";
        JSJshop.main(stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TechnoCraft-18", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TechnoCraft-18" Ct is: stringArray[0] = "TechnoCraft-18"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JSJshop.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JSJshop.main(stringArray) target is: JSJshop method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[2];
String string = "TechnoCraft-18";
stringArray[0] = string;
JSJshop.main(stringArray);

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getAddList()Lumd/cs/shop/JSListLogicalAtoms; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSListLogicalAtoms
statement code is: JSListLogicalAtoms addList = jSJshop.getAddList()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.setAdd("New York", "NY");
        jSJshop.getAddList();
        jSJshop.setAdd("Los Angeles", "CA");
        jSJshop.getAddList();
        jSJshop.setAdd("Paris", "FR");
        jSJshop.getAddList();
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.setAdd("New York", "NY"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setAdd("New York", "NY") target is: jSJshop method is: setAdd(java.lang.String,java.lang.String)
statement is: jSJshop.getAddList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getAddList() target is: jSJshop method is: getAddList()
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getAddList()Lumd/cs/shop/JSListLogicalAtoms;
statement is: jSJshop.setAdd("Los Angeles", "CA"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setAdd("Los Angeles", "CA") target is: jSJshop method is: setAdd(java.lang.String,java.lang.String)
statement is: jSJshop.getAddList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getAddList() target is: jSJshop method is: getAddList()
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getAddList()Lumd/cs/shop/JSListLogicalAtoms;
statement is: jSJshop.setAdd("Paris", "FR"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.setAdd("Paris", "FR") target is: jSJshop method is: setAdd(java.lang.String,java.lang.String)
statement is: jSJshop.getAddList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getAddList() target is: jSJshop method is: getAddList()
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getAddList()Lumd/cs/shop/JSListLogicalAtoms;
TestCase is: JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();
jSJshop.getAddList();
jSJshop.getAddList();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getDeleteList()Lumd/cs/shop/JSListLogicalAtoms; type is: class org.evosuite.testcase.statements.MethodStatement return type class umd.cs.shop.JSListLogicalAtoms
statement code is: JSListLogicalAtoms deleteList = jSJshop.getDeleteList()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getDeleteList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.getDeleteList(new String[]{ "Item 1", "Item 2", "Item 3" });
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.getDeleteList(new String[]{ "Item 1", "Item 2", "Item 3" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getDeleteList(new String[]{ "Item 1", "Item 2", "Item 3" }) target is: jSJshop method is: getDeleteList(java.lang.String[])
TestCase is: JSJshop jSJshop = new JSJshop();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, "_@ofp,vNr0")
statement is: testParser()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSJshop.testParser()
test data is: JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "_@ofp,vNr0");
jSJshop.testParser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "The quick brown fox jumps over the lazy dog.");// Improved test data: replaced with a more descriptive and representative sentence.

        jSJshop.testParser();
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "The quick brown fox jumps over the lazy dog.")// Improved test data: replaced with a more descriptive and representative sentence.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "The quick brown fox jumps over the lazy dog.")// Improved test data: replaced with a more descriptive and representative sentence.
 target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: jSJshop.testParser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.testParser() target is: jSJshop method is: testParser()
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: testParser()V
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "The quick brown fox jumps over the lazy dog.";
String string = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);
jSJshop.testParser();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, " ) ")
statement is: testParser()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSJshop.testParser()
test data is: JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, " ) ");
jSJshop.testParser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "100000) ");
        jSJshop.testParser();
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "100000) "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "100000) ") target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: jSJshop.testParser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.testParser() target is: jSJshop method is: testParser()
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: testParser()V
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "100000) ";
String string = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);
jSJshop.testParser();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, "um.*s.shp.jsjshopars")
statement is: testParser()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSJshop.testParser()
test data is: JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars");
jSJshop.testParser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars");
        jSJshop.testParser("um.1234567890.shp", new JSShopParser());
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars") target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: jSJshop.testParser("um.1234567890.shp", new JSShopParser()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.testParser("um.1234567890.shp", new JSShopParser()) target is: jSJshop method is: testParser(java.lang.String,JSShopParser)
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "um.*s.shp.jsjshopars";
String string = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getBufferedReader(Ljava/lang/String;Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null)
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Implement the method to return a buffered reader for the given input string
        return null;
    }
}
statement is: // Implement the method to return a buffered reader for the given input string
return null, class spoon.support.reflect.code.CtReturnImpl
statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: getBufferedReader(Ljava/lang/String;Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = jSJshop.getBufferedReader((String) null, (String) null, (JApplet) null)
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader((String) null, (String) null, (JApplet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        jSJshop.getBufferedReader("testData.txt", "UTF-8", new JApplet());
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.getBufferedReader("testData.txt", "UTF-8", new JApplet()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getBufferedReader("testData.txt", "UTF-8", new JApplet()) target is: jSJshop method is: getBufferedReader(java.lang.String,java.lang.String,JApplet)
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getBufferedReader(Ljava/lang/String;Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/io/BufferedReader;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "testData.txt";
String string = "UTF-8";
JApplet jApplet = null;
jSJshop.getBufferedReader(string, string, jApplet);

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile(" Invalid name for a method if/then pair./umd.cs.shop.JSParserError") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile(" Invalid name for a method if/then pair./umd.cs.shop.JSParserError")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, "HXZ*")
statement is: getBufferedReader(Ljava/lang/String;Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null)
test data is: JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile(" Invalid name for a method if/then pair./umd.cs.shop.JSParserError");
FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*");
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("Invalid name for a method if/then pair.txt");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*");
        jSJshop.getBufferedReader("Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", ((JApplet) (null)));
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("Invalid name for a method if/then pair.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*") target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: jSJshop.getBufferedReader("Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", ((JApplet) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.getBufferedReader("Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", ((JApplet) (null))) target is: jSJshop method is: getBufferedReader(java.lang.String,java.lang.String,JApplet)
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: getBufferedReader(Ljava/lang/String;Ljava/lang/String;Ljavax/swing/JApplet;)Ljava/io/BufferedReader;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "HXZ*";
String string = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);
String string = "Invalid name for a method if/then pair.";
String string = "umd.cs.shop.JSParserError";
JApplet jApplet = null;
jSJshop.getBufferedReader(string, string, jApplet);

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("-")
statement is: java.io.StreamTokenizer(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StreamTokenizer
statement code is: StreamTokenizer streamTokenizer = new StreamTokenizer(arg0)
statement is: processToken(Ljava/io/StreamTokenizer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSJshop.processToken(arg0)
test data is: JSJshop jSJshop = new JSJshop();
StringReader stringReader = new StringReader("-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSJshop.processToken(streamTokenizer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop();
        StringReader stringReader = new StringReader("This is a test string");
        StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
        jSJshop.processToken(streamTokenizer);
    }
}
statement is: JSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("This is a test string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.processToken(streamTokenizer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.processToken(streamTokenizer) target is: jSJshop method is: processToken(StreamTokenizer)
source statement: umd.cs.shop.JSJshop()V callee: VariableReference: Statement 0, type umd.cs.shop.JSJshopindex is: 0
Matched Method is: processToken(Ljava/io/StreamTokenizer;)V
TestCase is: JSJshop jSJshop = new JSJshop();
String string = "This is a test string";
StringReader stringReader = new StringReader(string);
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSJshop.processToken(streamTokenizer);

statement is: umd.cs.shop.JSJshop(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop("um.*s.shp.JSJshopars", "um.*s.shp.JSJshopars")
test data is: JSJshop jSJshop = new JSJshop("um.*s.shp.JSJshopars", "um.*s.shp.JSJshopars");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop("example.com", "example.com");
    }
}
statement is: JSJshop jSJshop = new JSJshop("example.com", "example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "example.com";
String string = "example.com";
JSJshop jSJshop = new JSJshop(string, string);

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: parserFile(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean parserFile = jSJshop.parserFile("bd0\"")
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.parserFile("bd0\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        jSJshop jSJshop = new JSJshop();
        jSJshop.parserFile("bd0\"");
    }
}
statement is: jSJshop jSJshop = new JSJshop(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.parserFile("bd0\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.parserFile("bd0\"") target is: jSJshop method is: parserFile(java.lang.String)
TestCase is: JSJshop jSJshop = new JSJshop();

statement is: umd.cs.shop.JSJshop()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class umd.cs.shop.JSJshop
statement code is: JSJshop jSJshop = new JSJshop()
statement is: testParser()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jSJshop.testParser()
test data is: JSJshop jSJshop = new JSJshop();
jSJshop.testParser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JSJshop jSJshop = new JSJshop("123 Main St", 5, "New York", "NY");
        jSJshop.testParser();
    }
}
statement is: JSJshop jSJshop = new JSJshop("123 Main St", 5, "New York", "NY"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jSJshop.testParser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jSJshop.testParser() target is: jSJshop method is: testParser()
* test suite isTestSuite: 46
Test 0: 
JSJshop jSJshop = new JSJshop();
jSJshop.getTree();
Test 1: 
JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.getAppletURL(" Invalid name for a method if/then pair.", (JApplet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 2: 
JSTaskAtom jSTaskAtom = new JSTaskAtom();
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("UBDll", jSTaskAtom);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 3: 
JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();
Test 4: 
JSJshop jSJshop = new JSJshop();
jSJshop.sol();
Test 5: 
JSJshop jSJshop = new JSJshop();
jSJshop.tree();
Test 6: 
JSJshop jSJshop = new JSJshop();
jSJshop.prob();
Test 7: 
JSJshop jSJshop = new JSJshop();
jSJshop.dom();
Test 8: 
String[] stringArray = new String[1];
JSJshop.main(stringArray);
Test 9: 
String[] stringArray = new String[9];
JSJshop.main(stringArray);
Test 10: 
String[] stringArray = new String[3];
JSJshop.main(stringArray);
Test 11: 
String[] stringArray = new String[3];
stringArray[2] = "all";
// Undeclared exception!
try { 
  JSJshop.main(stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
}

Test 12: 
String[] stringArray = new String[2];
stringArray[0] = "3D";
// Undeclared exception!
try { 
  JSJshop.main(stringArray);
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 13: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();
Test 14: 
JSJshop jSJshop = new JSJshop();
jSJshop.getDeleteList();
Test 15: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "_@ofp,vNr0");
jSJshop.testParser();
Test 16: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, " ) ");
jSJshop.testParser();
Test 17: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars");
jSJshop.testParser();
Test 18: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);
Test 19: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader((String) null, (String) null, (JApplet) null);
Test 20: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile(" Invalid name for a method if/then pair./umd.cs.shop.JSParserError");
FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*");
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);
Test 21: 
JSJshop jSJshop = new JSJshop();
StringReader stringReader = new StringReader("-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSJshop.processToken(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 22: 
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("um.*s.shp.JSJshopars", "um.*s.shp.JSJshopars");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 23: 
JSJshop jSJshop = new JSJshop();
jSJshop.parserFile("bd0\"");
Test 24: 
JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.testParser();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 25: 

Test 26: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAppletURL("Invalid name for a method if/then pair.", (JApplet) null);

Test 27: 
JSTaskAtom jSTaskAtom = new JSTaskAtom();
JSJshop jSJshop = new JSJshop("UBDll", jSTaskAtom);

Test 28: 
JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();

Test 29: 
JSJshop jSJshop = new JSJshop();

Test 30: 
JSJshop jSJshop = new JSJshop();

Test 31: 

Test 32: 
JSJshop.main((String[]) null);

Test 33: 
String[] stringArray = new String[3];
JSJshop.main(stringArray);

Test 34: 
String[] stringArray = new String[3];
stringArray[2] = "--help";
stringArray[2] = "-v";
stringArray[2] = "all";
JSJshop.main(stringArray);

Test 35: 
String[] stringArray = new String[2];
stringArray[0] = "TechnoCraft-18";
JSJshop.main(stringArray);

Test 36: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();
jSJshop.getAddList();
jSJshop.getAddList();

Test 37: 
JSJshop jSJshop = new JSJshop();

Test 38: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "The quick brown fox jumps over the lazy dog.", (String) null);
jSJshop.testParser();

Test 39: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "100000) ", (String) null);
jSJshop.testParser();

Test 40: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "um.*s.shp.jsjshopars", (String) null);

Test 41: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader("testData.txt", "UTF-8", (JApplet) null);

Test 42: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "HXZ*", (String) null);
String string = "Invalid name for a method if/then pair.";
String string = "umd.cs.shop.JSParserError";
JApplet jApplet = null;
jSJshop.getBufferedReader(string, string, jApplet);

Test 43: 
JSJshop jSJshop = new JSJshop();
StringReader stringReader = new StringReader("This is a test string");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSJshop.processToken(streamTokenizer);

Test 44: 
JSJshop jSJshop = new JSJshop("example.com", "example.com");

Test 45: 
JSJshop jSJshop = new JSJshop();


* Generated after the refinement and before minimization 46 tests with total length 107
* test suite isTestSuite: 46
Test 0: 
JSJshop jSJshop = new JSJshop();
jSJshop.getTree();
Test 1: 
JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.getAppletURL(" Invalid name for a method if/then pair.", (JApplet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 2: 
JSTaskAtom jSTaskAtom = new JSTaskAtom();
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("UBDll", jSTaskAtom);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 3: 
JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();
Test 4: 
JSJshop jSJshop = new JSJshop();
jSJshop.sol();
Test 5: 
JSJshop jSJshop = new JSJshop();
jSJshop.tree();
Test 6: 
JSJshop jSJshop = new JSJshop();
jSJshop.prob();
Test 7: 
JSJshop jSJshop = new JSJshop();
jSJshop.dom();
Test 8: 
String[] stringArray = new String[1];
JSJshop.main(stringArray);
Test 9: 
String[] stringArray = new String[9];
JSJshop.main(stringArray);
Test 10: 
String[] stringArray = new String[3];
JSJshop.main(stringArray);
Test 11: 
String[] stringArray = new String[3];
stringArray[2] = "all";
// Undeclared exception!
try { 
  JSJshop.main(stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
}

Test 12: 
String[] stringArray = new String[2];
stringArray[0] = "3D";
// Undeclared exception!
try { 
  JSJshop.main(stringArray);
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 13: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();
Test 14: 
JSJshop jSJshop = new JSJshop();
jSJshop.getDeleteList();
Test 15: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "_@ofp,vNr0");
jSJshop.testParser();
Test 16: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, " ) ");
jSJshop.testParser();
Test 17: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars");
jSJshop.testParser();
Test 18: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);
Test 19: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader((String) null, (String) null, (JApplet) null);
Test 20: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile(" Invalid name for a method if/then pair./umd.cs.shop.JSParserError");
FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*");
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);
Test 21: 
JSJshop jSJshop = new JSJshop();
StringReader stringReader = new StringReader("-");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSJshop.processToken(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 22: 
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("um.*s.shp.JSJshopars", "um.*s.shp.JSJshopars");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 23: 
JSJshop jSJshop = new JSJshop();
jSJshop.parserFile("bd0\"");
Test 24: 
JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.testParser();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 25: 

Test 26: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAppletURL("Invalid name for a method if/then pair.", (JApplet) null);

Test 27: 
JSTaskAtom jSTaskAtom = new JSTaskAtom();
JSJshop jSJshop = new JSJshop("UBDll", jSTaskAtom);

Test 28: 
JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();

Test 29: 
JSJshop jSJshop = new JSJshop();

Test 30: 
JSJshop jSJshop = new JSJshop();

Test 31: 

Test 32: 
JSJshop.main((String[]) null);

Test 33: 
String[] stringArray = new String[3];
JSJshop.main(stringArray);

Test 34: 
String[] stringArray = new String[3];
stringArray[2] = "--help";
stringArray[2] = "-v";
stringArray[2] = "all";
JSJshop.main(stringArray);

Test 35: 
String[] stringArray = new String[2];
stringArray[0] = "TechnoCraft-18";
JSJshop.main(stringArray);

Test 36: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();
jSJshop.getAddList();
jSJshop.getAddList();

Test 37: 
JSJshop jSJshop = new JSJshop();

Test 38: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "The quick brown fox jumps over the lazy dog.", (String) null);
jSJshop.testParser();

Test 39: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "100000) ", (String) null);
jSJshop.testParser();

Test 40: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "um.*s.shp.jsjshopars", (String) null);

Test 41: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader("testData.txt", "UTF-8", (JApplet) null);

Test 42: 
JSJshop jSJshop = new JSJshop();
FileSystemHandling.appendStringToFile((EvoSuiteFile) "HXZ*", (String) null);
String string = "Invalid name for a method if/then pair.";
String string = "umd.cs.shop.JSParserError";
JApplet jApplet = null;
jSJshop.getBufferedReader(string, string, jApplet);

Test 43: 
JSJshop jSJshop = new JSJshop();
StringReader stringReader = new StringReader("This is a test string");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
jSJshop.processToken(streamTokenizer);

Test 44: 
JSJshop jSJshop = new JSJshop("example.com", "example.com");

Test 45: 
JSJshop jSJshop = new JSJshop();


* Minimizing test suite
* test suite isTestSuite: 25
Test 0: 
JSJshop jSJshop = new JSJshop();
jSJshop.getTree();
Test 1: 
JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.getAppletURL("Invalid name for a method if/then pair.", (JApplet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 2: 
JSTaskAtom jSTaskAtom = new JSTaskAtom();
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("UBDll", jSTaskAtom);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 3: 
JSJshop jSJshop = new JSJshop();
jSJshop.getSolution();
Test 4: 
JSJshop jSJshop = new JSJshop();
jSJshop.sol();
Test 5: 
JSJshop jSJshop = new JSJshop();
jSJshop.tree();
Test 6: 
JSJshop jSJshop = new JSJshop();
jSJshop.prob();
Test 7: 
JSJshop jSJshop = new JSJshop();
jSJshop.dom();
Test 8: 
String[] stringArray = new String[1];
JSJshop.main(stringArray);
Test 9: 
String[] stringArray = new String[9];
JSJshop.main(stringArray);
Test 10: 
String[] stringArray = new String[3];
JSJshop.main(stringArray);
Test 11: 
String[] stringArray = new String[3];
stringArray[2] = "all";
// Undeclared exception!
try { 
  JSJshop.main(stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
}

Test 12: 
String[] stringArray = new String[2];
stringArray[0] = "TechnoCraft-18";
// Undeclared exception!
try { 
  JSJshop.main(stringArray);
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 13: 
JSJshop jSJshop = new JSJshop();
jSJshop.getAddList();
Test 14: 
JSJshop jSJshop = new JSJshop();
jSJshop.getDeleteList();
Test 15: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, " ) ");
jSJshop.testParser();
Test 16: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "_@ofp,vNr0");
jSJshop.testParser();
Test 17: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("farp.shp");
FileSystemHandling.appendStringToFile(evoSuiteFile, "um.*s.shp.jsjshopars");
jSJshop.testParser();
Test 18: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader("testData.txt", "UTF-8", (JApplet) null);
Test 19: 
JSJshop jSJshop = new JSJshop();
jSJshop.getBufferedReader((String) null, (String) null, (JApplet) null);
Test 20: 
JSJshop jSJshop = new JSJshop();
EvoSuiteFile evoSuiteFile = new EvoSuiteFile(" Invalid name for a method if/then pair./umd.cs.shop.JSParserError");
FileSystemHandling.appendStringToFile(evoSuiteFile, "HXZ*");
jSJshop.getBufferedReader(" Invalid name for a method if/then pair.", "umd.cs.shop.JSParserError", (JApplet) null);
Test 21: 
JSJshop jSJshop = new JSJshop();
StringReader stringReader = new StringReader("This is a test string");
StreamTokenizer streamTokenizer = new StreamTokenizer(stringReader);
// Undeclared exception!
try { 
  jSJshop.processToken(streamTokenizer);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}

Test 22: 
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("example.com", "example.com");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 23: 
JSJshop jSJshop = new JSJshop();
jSJshop.parserFile("bd0\"");
Test 24: 
JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.testParser();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 114
* Number of covered goals: 54
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 45%
* Total number of goals: 225
* Number of covered goals: 102
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 56
* Number of covered goals: 11
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 89%
* Total number of goals: 19
* Number of covered goals: 17
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 114
* Number of covered goals: 54
* Generated 25 tests with total length 61
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
JSJshopNode tree = jSJshop.getTree();
assertNull(tree);


** It was a parseable test case! 
refined test name is: testGetTreeWithNewInstanceReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
// Undeclared exception!
try { 
  jSJshop.getAppletURL("Invalid name for a method if/then pair.", (JApplet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}


** It was a parseable test case! 
refined test name is: testGetAppletURLInvalidNameReturnsNull
* Compiling Tests
refined test name is: testGetAppletURLWithInvalidNameShouldReturnNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSTaskAtom arg1 = new JSTaskAtom();
JSJshop jSJshop = null;
try {
  jSJshop = new JSJshop("UBDll", arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("umd.cs.shop.JSJshop", e);
}


** It was a parseable test case! 
refined test name is: testConstructorCreatesInstanceWithValidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
JSPairPlanTSListNodes solution = jSJshop.getSolution();
assertNull(solution);


** It was a parseable test case! 
refined test name is: testGetSolutionReturnsNullIfNoSolutionAvailable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
JSPlan sol = jSJshop.sol();
assertNull(sol);


** It was a parseable test case! 
refined test name is: testSolReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
JSJshopNode tree = jSJshop.tree();
assertNull(tree);


** It was a parseable test case! 
refined test name is: testGetTreeMethodReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
JSPlanningProblem prob = jSJshop.prob();
assertNull(prob);


** It was a parseable test case! 
refined test name is: testGetProbReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JSJshop jSJshop = new JSJshop();
JSPlanningDomain dom = jSJshop.dom();
assertNull(dom);


** It was a parseable test case! 
refined test name is: testGetDomainReturnsSameInstance
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String[] arg0 = new String[1];
JSJshop.main(arg0);
assertEquals(1, arg0.length);


** It was a parseable test case! 
refined test name is: testInvalidArgumentsThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String[] arg0 = new String[9];
JSJshop.main(arg0);
assertEquals(9, arg0.length);


** It was a parseable test case! 
refined test name is: testArgsLengthShouldBeNine
* Compiling Tests
refined test name is: testOptimizeJUnitTestForClarityAndReadability
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String[] arg0 = new String[3];
JSJshop.main(arg0);
assertEquals(3, arg0.length);


** It was a parseable test case! 
* Computation finished
