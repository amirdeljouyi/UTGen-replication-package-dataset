* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.heal.module.search.AdvSearchDAO
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/96_heal/evosuite-files/evosuite.properties
* Connecting to master process on port 13297
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:32:55.739 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 22:32:55.853 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:32:55.863 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:32:55.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 22:32:57.439 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 22:32:57.467 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 22:32:57.481 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 22:32:57.887 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 22:32:57.894 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 22:32:57.897 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 22:32:57.901 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 22:32:57.903 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 22:32:57.910 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 22:32:57.958 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:32:57.966 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:32:57.971 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:32:58.222 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 22:32:58.317 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.heal.module.search.AdvSearchDAO
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 642
* Using seed 1710455564487
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 129 / 642
[Progress:>                             0%] [Cov:================>                  47%][Progress:>                             1%] [Cov:================>                  48%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:=====================>             60%][Progress:>                             3%] [Cov:=====================>             61%][Progress:>                             3%] [Cov:=====================>             61%][Progress:>                             3%] [Cov:=====================>             61%][Progress:=>                            4%] [Cov:=====================>             62%][Progress:=>                            5%] [Cov:=====================>             62%][Progress:=>                            5%] [Cov:======================>            63%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           67%][Progress:===>                          10%] [Cov:=======================>           67%][Progress:===>                          10%] [Cov:=======================>           67%][Progress:===>                          11%] [Cov:=======================>           67%][Progress:===>                          11%] [Cov:=======================>           67%][Progress:===>                          11%] [Cov:=======================>           67%][Progress:===>                          11%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          12%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           67%][Progress:====>                         14%] [Cov:=======================>           68%][Progress:====>                         14%] [Cov:=======================>           68%][Progress:====>                         14%] [Cov:=======================>           68%][Progress:====>                         14%] [Cov:=======================>           68%][Progress:====>                         14%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         15%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:====>                         16%] [Cov:========================>          69%][Progress:=====>                        17%] [Cov:========================>          69%][Progress:=====>                        17%] [Cov:========================>          69%][Progress:=====>                        17%] [Cov:========================>          69%][Progress:=====>                        17%] [Cov:========================>          69%][Progress:=====>                        17%] [Cov:========================>          69%][Progress:=====>                        19%] [Cov:========================>          69%][Progress:=====>                        19%] [Cov:========================>          69%][Progress:=====>                        19%] [Cov:========================>          69%][Progress:======>                       20%] [Cov:========================>          69%][Progress:======>                       20%] [Cov:========================>          69%][Progress:======>                       20%] [Cov:========================>          69%][Progress:======>                       20%] [Cov:========================>          69%][Progress:======>                       20%] [Cov:========================>          69%][Progress:======>                       20%] [Cov:========================>          69%][Progress:======>                       21%] [Cov:========================>          69%][Progress:======>                       21%] [Cov:========================>          69%][Progress:======>                       21%] [Cov:========================>          69%][Progress:======>                       21%] [Cov:========================>          69%][Progress:======>                       21%] [Cov:========================>          69%][Progress:======>                       21%] [Cov:========================>          69%][Progress:======>                       22%] [Cov:========================>          69%][Progress:======>                       22%] [Cov:========================>          69%][Progress:======>                       22%] [Cov:========================>          69%][Progress:======>                       22%] [Cov:========================>          69%][Progress:======>                       22%] [Cov:========================>          69%][Progress:======>                       22%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:=======>                      24%] [Cov:========================>          70%][Progress:=======>                      24%] [Cov:========================>          70%][Progress:=======>                      24%] [Cov:========================>          70%][Progress:=======>                      24%] [Cov:========================>          70%][Progress:=======>                      24%] [Cov:========================>          70%][Progress:=======>                      24%] [Cov:========================>          70%][Progress:=======>                      25%] [Cov:========================>          70%][Progress:=======>                      25%] [Cov:========================>          70%][Progress:=======>                      25%] [Cov:========================>          70%][Progress:=======>                      25%] [Cov:========================>          70%][Progress:=======>                      26%] [Cov:========================>          70%][Progress:=======>                      26%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   36%] [Cov:========================>          70%][Progress:==========>                   36%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:============>                 40%] [Cov:========================>          70%][Progress:============>                 40%] [Cov:========================>          70%][Progress:============>                 40%] [Cov:========================>          70%][Progress:============>                 40%] [Cov:========================>          70%][Progress:============>                 41%] [Cov:========================>          70%][Progress:============>                 41%] [Cov:========================>          70%][Progress:============>                 41%] [Cov:========================>          70%][Progress:============>                 41%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                45%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:==============>               47%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               48%] [Cov:========================>          70%][Progress:==============>               49%] [Cov:========================>          70%][Progress:==============>               49%] [Cov:========================>          70%][Progress:==============>               49%] [Cov:========================>          70%][Progress:==============>               49%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:=================>            59%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           62%] [Cov:========================>          71%][Progress:==================>           62%] [Cov:========================>          71%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           62%] [Cov:=========================>         72%][Progress:==================>           63%] [Cov:=========================>         72%][Progress:==================>           63%] [Cov:=========================>         72%][Progress:===================>          64%] [Cov:=========================>         72%][Progress:===================>          64%] [Cov:=========================>         72%][Progress:===================>          65%] [Cov:=========================>         72%][Progress:===================>          65%] [Cov:=========================>         72%][Progress:===================>          65%] [Cov:=========================>         72%][Progress:===================>          65%] [Cov:=========================>         72%][Progress:===================>          65%] [Cov:=========================>         72%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:=====================>        73%] [Cov:=========================>         73%][Progress:=====================>        73%] [Cov:=========================>         73%][Progress:=====================>        73%] [Cov:=========================>         73%][Progress:=====================>        73%] [Cov:=========================>         73%][Progress:=====================>        73%] [Cov:=========================>         73%][Progress:======================>       74%] [Cov:=========================>         73%][Progress:======================>       74%] [Cov:=========================>         73%][Progress:======================>       74%] [Cov:=========================>         73%][Progress:======================>       74%] [Cov:=========================>         73%][Progress:======================>       74%] [Cov:=========================>         73%][Progress:======================>       75%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:======================>       76%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      77%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      78%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:=======================>      79%] [Cov:=========================>         73%][Progress:========================>     80%] [Cov:=========================>         73%][Progress:========================>     80%] [Cov:=========================>         73%][Progress:========================>     80%] [Cov:=========================>         73%][Progress:========================>     80%] [Cov:=========================>         73%][Progress:========================>     80%] [Cov:=========================>         73%][Progress:========================>     80%] [Cov:=========================>         73%][Progress:========================>     81%] [Cov:=========================>         73%][Progress:========================>     81%] [Cov:=========================>         73%][Progress:========================>     82%] [Cov:=========================>         73%][Progress:========================>     82%] [Cov:=========================>         73%][Progress:========================>     82%] [Cov:=========================>         73%][Progress:========================>     82%] [Cov:=========================>         73%][Progress:========================>     82%] [Cov:=========================>         73%][Progress:========================>     83%] [Cov:=========================>         73%][Progress:========================>     83%] [Cov:=========================>         73%][Progress:========================>     83%] [Cov:=========================>         73%][Progress:========================>     83%] [Cov:=========================>         73%][Progress:========================>     83%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    84%] [Cov:=========================>         73%][Progress:=========================>    85%] [Cov:=========================>         73%][Progress:=========================>    85%] [Cov:=========================>         73%][Progress:=========================>    85%] [Cov:=========================>         73%][Progress:=========================>    85%] [Cov:=========================>         73%][Progress:=========================>    85%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:=========================>    86%] [Cov:=========================>         73%][Progress:==========================>   87%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   88%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:==========================>   89%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  90%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  91%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  92%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:===========================>  93%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 94%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 95%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:============================> 96%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>97%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>98%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:=============================>99%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%][Progress:==============================100%] [Cov:=========================>         73%]
* Search finished after 201s and 569 generations, 279330 statements, best individual has fitness: 138.0
* Generated before the refinement 36 tests with total length 161
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: com.microsoft.jdbcx.base.BaseXADataSource()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.microsoft.jdbcx.base.BaseXADataSource
statement code is: BaseXADataSource baseXADataSource = new BaseXADataSource()
statement is: setDataSource(Ljavax/sql/DataSource;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: advSearchDAO.setDataSource(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
advSearchDAO.setDataSource(baseXADataSource);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        BaseXADataSource baseXADataSource = new BaseXADataSource();
        // Improve the test data by changing the primitive values and Strings to more illustrative examples.
        int[] intArray = new int[]{ 1, 2, 3 };
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        double[] doubleArray = new double[]{ 1.5, 2.6, 3.7 };
        char[] charArray = new char[]{ 'a', 'b', 'c' };
        advSearchDAO.setDataSource(baseXADataSource);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BaseXADataSource baseXADataSource = new BaseXADataSource(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improve the test data by changing the primitive values and Strings to more illustrative examples.
int[] intArray = new int[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubleArray = new double[]{ 1.5, 2.6, 3.7 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] charArray = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: advSearchDAO.setDataSource(baseXADataSource), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setDataSource(baseXADataSource) target is: advSearchDAO method is: setDataSource(BaseXADataSource)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: setDataSource(Ljavax/sql/DataSource;)V
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
advSearchDAO.setDataSource(baseXADataSource);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all")
statement is: org.evosuite.testcase.statements.ArrayStatement@50323ae2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[18]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2f0d7040 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[18];
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[18];
        stringArray[0] = "all";// This value is not very descriptive, let's change it to a more representative example.

        parameterBean.setPrimaryArray(new String[]{ "book", "author", "title" });
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[18], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [18] Ct is: String[] stringArray = new String[18] isAssignment: false Array: new String[18] Elements: []
lengths: [18] [18]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all"// This value is not very descriptive, let's change it to a more representative example.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"// This value is not very descriptive, let's change it to a more representative example.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@98a2e16f
statement is: parameterBean.setPrimaryArray(new String[]{ "book", "author", "title" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(new String[]{ "book", "author", "title" }) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[18];
String string = "all";
String[] stringArray = null;
((ParameterBean) string).setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("Invalid instance ID entered", "The requested instance does not exist", "The requested instance is either invalid or not running.");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("Invalid instance ID entered", "The requested instance does not exist", "The requested instance is either invalid or not running."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("Invalid instance ID entered", "The requested instance does not exist", "The requested instance is either invalid or not running.") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "Invalid instance ID entered";
String string = "The requested instance does not exist";
String string = "The requested instance is either invalid or not running.";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("--%")
statement is: org.evosuite.testcase.statements.ArrayStatement@1e219ad5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@55d1d95a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "`^M"
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("--%");
String[] stringArray = new String[1];
parameterBean.setPrimaryArray(stringArray);
stringArray[0] = "`^M";
parameterBean.setImaging(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
advSearchDAO.addDefaultConnectives(makeQuery);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("--%");
        String[] stringArray = new String[1];
        parameterBean.setPrimaryArray(stringArray);
        stringArray[0] = "Honda";// Using a more descriptive make value

        parameterBean.setImaging(stringArray);
        String makeQuery = advSearchDAO.makeQuery(parameterBean);
        advSearchDAO.addDefaultConnectives(makeQuery);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("--%"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: stringArray[0] = "Honda"// Using a more descriptive make value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Honda" Ct is: stringArray[0] = "Honda"// Using a more descriptive make value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d298088c
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: String makeQuery = advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: advSearchDAO.addDefaultConnectives(makeQuery), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives(makeQuery) target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
* this is vulnerable: String string = "Honda"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "--%";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
((ParameterBean) string).setPrimaryArray(stringArray);
String string = "Honda";
((ParameterBean) string).setImaging(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
advSearchDAO.addDefaultConnectives(makeQuery);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("Error closing Blob or Clob object.", "Error closing Blob or Clob object.", "\"")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Error closing Blob or Clob object.", "Error closing Blob or Clob object.", "\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("Invalid query", "Insufficient data to build valid query", "\\");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("Invalid query", "Insufficient data to build valid query", "\\"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("Invalid query", "Insufficient data to build valid query", "\\") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "Invalid query";
String string = "Insufficient data to build valid query";
String string = "\\";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("\"", "\"", "\"")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("\"", "\"", "\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("\"query for testing buildCommonQuery method\"", "\"2023-01-01\"", "\"2023-01-31\"");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("\"query for testing buildCommonQuery method\"", "\"2023-01-01\"", "\"2023-01-31\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("\"query for testing buildCommonQuery method\"", "\"2023-01-01\"", "\"2023-01-31\"") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "\"query for testing buildCommonQuery method\"";
String string = "\"2023-01-01\"";
String string = "\"2023-01-31\"";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT  AND (.metadataID from  AND ( WHERE  AND ( IN (Select  AND ( from  AND ( WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND  AND ( IN (SELECT  AND ( FROM  AND ( WHERE ( )", "all", " \nUNION ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT  AND (.metadataID from  AND ( WHERE  AND ( IN (Select  AND ( from  AND ( WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND  AND ( IN (SELECT  AND ( FROM  AND ( WHERE ( )", "all", " \nUNION ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT * from users where age > 18 AND gender = 'male'", "all", " \nUNION ");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT * from users where age > 18 AND gender = 'male'", "all", " \nUNION "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT * from users where age > 18 AND gender = 'male'", "all", " \nUNION ") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT * from users where age > 18 AND gender = 'male'";
String string = "all";
String string = " \nUNION ";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title", "\"")
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery(arg0, "{t '", "\"", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title", "\"")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title", "\"");
advSearchDAO.buildMutiQuery(buildCommonQuery, "{t '", "\"", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title", "\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String buildCommonQuery = advSearchDAO.buildCommonQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'%\"%\' ) \n order by Title", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'%\"%\' ) \n order by Title", "\"");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String buildCommonQuery = advSearchDAO.buildCommonQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'%\"%\' ) \n order by Title", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'%\"%\' ) \n order by Title", "\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'%\"%\' ) \n order by Title", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'%\"%\' ) \n order by Title", "\"") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title";
String string = "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%\"%' ) \n order by Title";
String string = "\"";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery(" AND (", " AND (", " AND (", " AND (", " AND (")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", " AND (", " AND (", " AND (", " AND (");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery(" AND (", " AND (", " AND (", " AND (", " AND (");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery(" AND (", " AND (", " AND (", " AND (", " AND ("), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery(" AND (", " AND (", " AND (", " AND (", " AND (") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = " AND (";
String string = " AND (";
String string = " AND (";
String string = " AND (";
String string = " AND (";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("The requeseed nstance is either invalid or noZ running.", "The requeseed nstance is either invalid or noZ running.", " '2C]:eR ][ j", "Metadata.PublicationId IN (SELECT Publications.PublicationId FROM Publications WHERE PublicationName LIKE '", "deletesAreDetected")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The requeseed nstance is either invalid or noZ running.", "The requeseed nstance is either invalid or noZ running.", " '2C]:eR ][ j", "Metadata.PublicationId IN (SELECT Publications.PublicationId FROM Publications WHERE PublicationName LIKE '", "deletesAreDetected");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("The request instance is either invalid or not running.", "The request instance is either invalid or not running.", " '2C]:eR ][ j");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("The request instance is either invalid or not running.", "The request instance is either invalid or not running.", " '2C]:eR ][ j"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("The request instance is either invalid or not running.", "The request instance is either invalid or not running.", " '2C]:eR ][ j") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String)
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "The requested instance is either invalid or not running.";
String string = "The requested instance is either invalid or not running.";
String string = "The requested instance is either invalid or not running.";
String string = "The requested instance is either invalid or not running.";
String string = "The requested instance is either invalid or not running.";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.evosuite.testcase.statements.ArrayStatement@29d9bcfb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String multiSelection = advSearchDAO.getMultiSelection(arg0, "A@py W")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[2];
advSearchDAO.getMultiSelection(stringArray, "A@py W");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String[] stringArray = new String[2];
        advSearchDAO.getMultiSelection(stringArray, "A@py W");
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String[] stringArray = new String[2];
        stringArray[0] = "apple";
        stringArray[1] = "watermelon";
        advSearchDAO.getMultiSelection(stringArray, "A@py W");
        // Alternative test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String[] stringArray = new String[2];
        stringArray[0] = "orange";
        stringArray[1] = "banana";
        advSearchDAO.getMultiSelection(stringArray, "A@py W");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: advSearchDAO.getMultiSelection(stringArray, "A@py W"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(stringArray, "A@py W") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "apple", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"apple" Ct is: stringArray[0] = "apple"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "watermelon", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"watermelon" Ct is: stringArray[1] = "watermelon"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: advSearchDAO.getMultiSelection(stringArray, "A@py W"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(stringArray, "A@py W") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 4
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Alternative test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "orange", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"orange" Ct is: stringArray[0] = "orange"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "banana", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"banana" Ct is: stringArray[1] = "banana"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: advSearchDAO.getMultiSelection(stringArray, "A@py W"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(stringArray, "A@py W") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 8
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[2];
String string = "A@py W";
advSearchDAO.getMultiSelection(stringArray, string);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[2];
String string = "A@py W";
advSearchDAO.getMultiSelection(stringArray, string);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[2];
String string = "A@py W";
advSearchDAO.getMultiSelection(stringArray, string);

statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("--%")
statement is: setHidden(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setHidden(true)
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: ParameterBean parameterBean = new ParameterBean("--%");
parameterBean.setHidden(true);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean("--%");
        parameterBean.setHidden(true);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // This test data simulates the scenario where a user is searching for a hidden parameter using the "--" prefix in the search bar. }}
    }
}
statement is: ParameterBean parameterBean = new ParameterBean("--%"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.setHidden(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setHidden(true) target is: parameterBean method is: setHidden(boolean)
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setHidden(Z)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 2, type org.heal.module.search.AdvSearchDAOindex is: 4
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // This test data simulates the scenario where a user is searching for a hidden parameter using the "--" prefix in the search bar. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "--%";
ParameterBean parameterBean = new ParameterBean(string);
boolean _boolean = true;
((ParameterBean) string).setHidden(_boolean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _boolean).makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@4acf77f0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@485a532f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[9];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

* Computation finished
