* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.heal.module.search.AdvSearchDAO
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/96_heal/evosuite-files/evosuite.properties
* Connecting to master process on port 9230
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:31:24.353 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 23:31:24.637 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 23:31:24.639 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 23:31:24.642 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 23:31:26.088 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 23:31:26.108 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 23:31:26.109 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 23:31:26.391 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 23:31:26.393 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 23:31:26.394 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 23:31:26.395 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 23:31:26.397 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 23:31:26.411 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 23:31:26.444 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:31:26.461 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:31:26.462 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 23:31:26.687 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 23:31:26.782 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.heal.module.search.AdvSearchDAO
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 642
* Using seed 1710459076908
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 129 / 642
[Progress:>                             0%] [Cov:================>                  47%][Progress:>                             1%] [Cov:=================>                 49%][Progress:>                             1%] [Cov:=================>                 50%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             3%] [Cov:==================>                52%][Progress:>                             3%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            5%] [Cov:==================>                53%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:===================>               56%][Progress:=>                            5%] [Cov:=====================>             62%][Progress:=>                            6%] [Cov:=====================>             62%][Progress:=>                            6%] [Cov:======================>            63%][Progress:=>                            6%] [Cov:======================>            63%][Progress:=>                            6%] [Cov:======================>            63%][Progress:=>                            6%] [Cov:======================>            63%][Progress:==>                           7%] [Cov:======================>            64%][Progress:==>                           7%] [Cov:======================>            64%][Progress:==>                           7%] [Cov:======================>            64%][Progress:==>                           7%] [Cov:======================>            64%][Progress:==>                           8%] [Cov:=======================>           66%][Progress:==>                           8%] [Cov:=======================>           66%][Progress:==>                           8%] [Cov:=======================>           66%][Progress:==>                           8%] [Cov:=======================>           66%][Progress:==>                           8%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          12%] [Cov:=======================>           66%][Progress:===>                          12%] [Cov:=======================>           66%][Progress:===>                          12%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           67%][Progress:=====>                        17%] [Cov:=======================>           67%][Progress:=====>                        18%] [Cov:=======================>           67%][Progress:=====>                        18%] [Cov:=======================>           67%][Progress:=====>                        18%] [Cov:=======================>           67%][Progress:=====>                        18%] [Cov:=======================>           67%][Progress:=====>                        19%] [Cov:=======================>           67%][Progress:=====>                        19%] [Cov:=======================>           67%][Progress:======>                       20%] [Cov:=======================>           67%][Progress:======>                       20%] [Cov:=======================>           67%][Progress:======>                       20%] [Cov:=======================>           67%][Progress:======>                       20%] [Cov:=======================>           67%][Progress:======>                       21%] [Cov:=======================>           67%][Progress:======>                       21%] [Cov:=======================>           67%][Progress:======>                       21%] [Cov:=======================>           67%][Progress:======>                       21%] [Cov:=======================>           67%][Progress:======>                       22%] [Cov:=======================>           67%][Progress:======>                       22%] [Cov:=======================>           67%][Progress:======>                       22%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:=======================>           68%][Progress:=======>                      26%] [Cov:========================>          70%][Progress:=======>                      26%] [Cov:========================>          70%][Progress:=======>                      26%] [Cov:========================>          70%][Progress:=======>                      26%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     27%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     28%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:========>                     29%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    30%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:==========>                   36%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:========================>          71%][Progress:===========>                  37%] [Cov:=========================>         72%][Progress:===========>                  38%] [Cov:=========================>         73%][Progress:===========>                  38%] [Cov:=========================>         73%][Progress:===========>                  39%] [Cov:=========================>         73%][Progress:============>                 41%] [Cov:=========================>         73%][Progress:============>                 42%] [Cov:=========================>         73%][Progress:============>                 43%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                44%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:=============>                46%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               47%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               48%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:==============>               49%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              52%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:===============>              53%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             54%] [Cov:=========================>         73%][Progress:================>             55%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:================>             56%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            57%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            58%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:=================>            59%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           61%] [Cov:=========================>         73%][Progress:==================>           62%] [Cov:=========================>         73%][Progress:==================>           62%] [Cov:=========================>         73%][Progress:==================>           62%] [Cov:=========================>         73%][Progress:==================>           62%] [Cov:=========================>         73%][Progress:==================>           62%] [Cov:=========================>         73%][Progress:==================>           63%] [Cov:=========================>         73%][Progress:==================>           63%] [Cov:=========================>         73%][Progress:==================>           63%] [Cov:=========================>         73%][Progress:==================>           63%] [Cov:=========================>         73%][Progress:==================>           63%] [Cov:=========================>         73%][Progress:==================>           63%] [Cov:=========================>         73%][Progress:===================>          64%] [Cov:=========================>         73%][Progress:===================>          64%] [Cov:=========================>         73%][Progress:===================>          64%] [Cov:=========================>         73%][Progress:===================>          64%] [Cov:=========================>         73%][Progress:===================>          64%] [Cov:=========================>         73%][Progress:===================>          64%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          65%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:===================>          66%] [Cov:=========================>         73%][Progress:====================>         67%] [Cov:=========================>         73%][Progress:====================>         67%] [Cov:=========================>         73%][Progress:====================>         67%] [Cov:=========================>         73%][Progress:====================>         67%] [Cov:=========================>         73%][Progress:====================>         67%] [Cov:=========================>         73%][Progress:====================>         67%] [Cov:=========================>         73%][Progress:====================>         68%] [Cov:=========================>         73%][Progress:====================>         68%] [Cov:=========================>         73%][Progress:====================>         68%] [Cov:=========================>         73%][Progress:====================>         68%] [Cov:=========================>         73%][Progress:====================>         68%] [Cov:=========================>         73%][Progress:====================>         68%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:====================>         69%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        70%] [Cov:=========================>         73%][Progress:=====================>        71%] [Cov:=========================>         73%][Progress:=====================>        71%] [Cov:=========================>         73%][Progress:=====================>        71%] [Cov:=========================>         73%][Progress:=====================>        71%] [Cov:=========================>         73%][Progress:=====================>        71%] [Cov:=========================>         74%][Progress:=====================>        71%] [Cov:=========================>         74%][Progress:=====================>        71%] [Cov:=========================>         74%][Progress:=====================>        72%] [Cov:=========================>         74%][Progress:=====================>        72%] [Cov:=========================>         74%][Progress:=====================>        72%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:=====================>        73%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       74%] [Cov:=========================>         74%][Progress:======================>       75%] [Cov:=========================>         74%][Progress:======================>       75%] [Cov:=========================>         74%][Progress:======================>       75%] [Cov:=========================>         74%][Progress:======================>       75%] [Cov:=========================>         74%][Progress:======================>       75%] [Cov:=========================>         74%][Progress:======================>       76%] [Cov:=========================>         74%][Progress:======================>       76%] [Cov:=========================>         74%][Progress:======================>       76%] [Cov:=========================>         74%][Progress:======================>       76%] [Cov:=========================>         74%][Progress:======================>       76%] [Cov:=========================>         74%][Progress:======================>       76%] [Cov:=========================>         74%][Progress:=======================>      77%] [Cov:=========================>         74%][Progress:=======================>      77%] [Cov:=========================>         74%][Progress:=======================>      77%] [Cov:=========================>         74%][Progress:=======================>      77%] [Cov:=========================>         74%][Progress:=======================>      77%] [Cov:=========================>         74%][Progress:=======================>      78%] [Cov:=========================>         74%][Progress:=======================>      78%] [Cov:=========================>         74%][Progress:=======================>      78%] [Cov:=========================>         74%][Progress:=======================>      78%] [Cov:=========================>         74%][Progress:=======================>      78%] [Cov:=========================>         74%][Progress:=======================>      78%] [Cov:=========================>         74%][Progress:=======================>      79%] [Cov:=========================>         74%][Progress:=======================>      79%] [Cov:=========================>         74%][Progress:=======================>      79%] [Cov:=========================>         74%][Progress:=======================>      79%] [Cov:=========================>         74%][Progress:=======================>      79%] [Cov:=========================>         74%][Progress:=======================>      79%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     80%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     81%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     82%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:========================>     83%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    84%] [Cov:=========================>         74%][Progress:=========================>    85%] [Cov:=========================>         74%][Progress:=========================>    85%] [Cov:=========================>         74%][Progress:=========================>    85%] [Cov:=========================>         74%][Progress:=========================>    85%] [Cov:=========================>         74%][Progress:==========================>   87%] [Cov:=========================>         74%][Progress:==========================>   87%] [Cov:=========================>         74%][Progress:==========================>   87%] [Cov:=========================>         74%][Progress:==========================>   87%] [Cov:=========================>         74%][Progress:==========================>   88%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  90%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  91%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  92%] [Cov:=========================>         74%][Progress:===========================>  93%] [Cov:=========================>         74%][Progress:===========================>  93%] [Cov:=========================>         74%][Progress:===========================>  93%] [Cov:=========================>         74%][Progress:===========================>  93%] [Cov:=========================>         74%][Progress:===========================>  93%] [Cov:=========================>         74%][Progress:===========================>  93%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 94%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 95%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:============================> 96%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>97%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>98%] [Cov:=========================>         74%][Progress:=============================>99%] [Cov:=========================>         74%][Progress:=============================>99%] [Cov:=========================>         74%][Progress:=============================>99%] [Cov:=========================>         74%][Progress:=============================>99%] [Cov:=========================>         74%][Progress:=============================>99%] [Cov:=========================>         74%][Progress:=============================>99%] [Cov:=========================>         74%][Progress:==============================100%] [Cov:=========================>         74%][Progress:==============================100%] [Cov:=========================>         74%][Progress:==============================100%] [Cov:=========================>         74%]
* Search finished after 202s and 443 generations, 244386 statements, best individual has fitness: 131.0
* Generated before the refinement 33 tests with total length 140
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: com.microsoft.jdbcx.sqlserver.SQLServerDataSource()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.microsoft.jdbcx.sqlserver.SQLServerDataSource
statement code is: SQLServerDataSource sQLServerDataSource = new SQLServerDataSource()
statement is: setDataSource(Ljavax/sql/DataSource;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: advSearchDAO.setDataSource(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
SQLServerDataSource sQLServerDataSource = new SQLServerDataSource();
advSearchDAO.setDataSource(sQLServerDataSource);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        SQLServerDataSource sQLServerDataSource = new SQLServerDataSource();
        advSearchDAO.setDataSource(sQLServerDataSource);
        // Improved test data:
        int id = 1234;
        String firstName = "John";
        String lastName = "Doe";
        String email = "john.doe@example.com";
        advSearchDAO.setUserID(id);
        advSearchDAO.setFirstName(firstName);
        advSearchDAO.setLastName(lastName);
        advSearchDAO.setEmail(email);
        // End of improved test data }}
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SQLServerDataSource sQLServerDataSource = new SQLServerDataSource(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.setDataSource(sQLServerDataSource), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setDataSource(sQLServerDataSource) target is: advSearchDAO method is: setDataSource(SQLServerDataSource)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: setDataSource(Ljavax/sql/DataSource;)V
statement is: // Improved test data:
int id = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String firstName = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String lastName = "Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email = "john.doe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: advSearchDAO.setUserID(id), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setUserID(id) target is: advSearchDAO method is: setUserID(int)
statement is: advSearchDAO.setFirstName(firstName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setFirstName(firstName) target is: advSearchDAO method is: setFirstName(java.lang.String)
statement is: advSearchDAO.setLastName(lastName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setLastName(lastName) target is: advSearchDAO method is: setLastName(java.lang.String)
statement is: advSearchDAO.setEmail(email), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setEmail(email) target is: advSearchDAO method is: setEmail(java.lang.String)
statement is: // End of improved test data }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "John"
* this is vulnerable: String string = "Doe"
* this is vulnerable: String string = "john.doe@example.com"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
SQLServerDataSource sQLServerDataSource = new SQLServerDataSource();
advSearchDAO.setDataSource(sQLServerDataSource);
int _int = 1234;
String string = "John";
String string = "Doe";
String string = "john.doe@example.com";

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.", "Character set {0} not found in com.microsoft.util.transliteration.properties.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ", "S*@3C", "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ", "S*@3C", "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ", "S*@3C", "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ", "S*@3C", "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ", "S*@3C", "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ";
String string = "S*@3C";
String string = "SELECT  ND) (.metadataID from  ND) ( WHERE  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like 'TaxonPathID%' OR  AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education')) like '% TaxonPathID%' ";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )", "SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )", "\" :zJnY")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )", "SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )", "\" :zJnY");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "\" :zJnY");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "\" :zJnY"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "\" :zJnY") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )";
String string = "SELECT `metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )";
String string = "\" :zJnY";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT  from .metadataID from  from  WHERE KDOa3- IN (Select KDOa3- from .jar WHERE \" :zJnY like '&$<Su;$%' OR \" :zJnY like '% &$<Su;$%' )", ".jar", "AUTO_INCREMENT")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT  from .metadataID from  from  WHERE KDOa3- IN (Select KDOa3- from .jar WHERE \" :zJnY like '&$<Su;$%' OR \" :zJnY like '% &$<Su;$%' )", ".jar", "AUTO_INCREMENT");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT  from .metadataID from  from  WHERE KDOa3- IN (Select KDOa3- from .jar WHERE \" :zJnY like \'&$<Su;$%\' OR \" :zJnY like \'% &$<Su;$%\' )", ".jar", 50);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT  from .metadataID from  from  WHERE KDOa3- IN (Select KDOa3- from .jar WHERE \" :zJnY like \'&$<Su;$%\' OR \" :zJnY like \'% &$<Su;$%\' )", ".jar", 50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT  from .metadataID from  from  WHERE KDOa3- IN (Select KDOa3- from .jar WHERE \" :zJnY like \'&$<Su;$%\' OR \" :zJnY like \'% &$<Su;$%\' )", ".jar", 50) target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,int)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT  from .metadataID from  from  WHERE KDOa3- IN (Select KDOa3- from .jar WHERE \" :zJnY like '&$<Su;$%' OR \" :zJnY like '% &$<Su;$%' )";
String string = ".jar";
int _int = 50;
advSearchDAO.buildCommonQuery(string, string, (String) _int);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("Updateable concurr8ncy not supported, downgraded to readonly concurrency.", "Updateable concurr8ncy not supported, downgraded to readonly concurrency.", "Updateable concurr8ncy not supported, downgraded to readonly concurrency.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Updateable concurr8ncy not supported, downgraded to readonly concurrency.", "Updateable concurr8ncy not supported, downgraded to readonly concurrency.", "Updateable concurr8ncy not supported, downgraded to readonly concurrency.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("The application is unable to connect to the database due to a network issue.", "The database server is not responding.", "The connection to the database has been lost.");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("The application is unable to connect to the database due to a network issue.", "The database server is not responding.", "The connection to the database has been lost."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("The application is unable to connect to the database due to a network issue.", "The database server is not responding.", "The connection to the database has been lost.") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "The application is unable to connect to the database due to a network issue.";
String string = "The database server is not responding.";
String string = "The connection to the database has been lost.";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )", "`Qa<-:A7", "`Qa<-:A7", "\" :zJnY", "&$<Su;$")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )", "`Qa<-:A7", "`Qa<-:A7", "\" :zJnY", "&$<Su;$");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "users", "user_metadata", "&$<Su;$", Arrays.asList("value1", "value2"));
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "users", "user_metadata", "&$<Su;$", Arrays.asList("value1", "value2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like \'`Qa<-:A7%\' OR `Qa<-:A7 like \'% `Qa<-:A7%\' )", "users", "user_metadata", "&$<Su;$", Arrays.asList("value1", "value2")) target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 4 Parameters size() 4 Num of Method Parameters: 5
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT `Qa<-:A7.metadataID from `Qa<-:A7 WHERE `Qa<-:A7 IN (Select `Qa<-:A7 from \" :zJnY WHERE `Qa<-:A7 like '`Qa<-:A7%' OR `Qa<-:A7 like '% `Qa<-:A7%' )";
String string = "users";
String string = "user_metadata";
String string = "&$<Su;$";
String string = null;
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT <jXiY98ZE9@:F].metadataID from <jXiY98ZE9@:F] WHERE \" :zJnY IN (Select \" :zJnY from \" :zJnY WHERE  AND \" :zJnY IN (SELECT \" :zJnY FROM \" :zJnY WHERE )", "Nkz", "SELECT <jXiY98ZE9@:F].metadataID from <jXiY98ZE9@:F] WHERE \" :zJnY IN (Select \" :zJnY from \" :zJnY WHERE  AND \" :zJnY IN (SELECT \" :zJnY FROM \" :zJnY WHERE )", "+g!+aa", "\" :zJnY")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT <jXiY98ZE9@:F].metadataID from <jXiY98ZE9@:F] WHERE \" :zJnY IN (Select \" :zJnY from \" :zJnY WHERE  AND \" :zJnY IN (SELECT \" :zJnY FROM \" :zJnY WHERE )", "Nkz", "SELECT <jXiY98ZE9@:F].metadataID from <jXiY98ZE9@:F] WHERE \" :zJnY IN (Select \" :zJnY from \" :zJnY WHERE  AND \" :zJnY IN (SELECT \" :zJnY FROM \" :zJnY WHERE )", "+g!+aa", "\" :zJnY");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')", "Nkz", "SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')", "+g!+aa", "country");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')", "Nkz", "SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')", "+g!+aa", "country"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')", "Nkz", "SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')", "+g!+aa", "country") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')";
String string = "Nkz";
String string = "SELECT * from customers WHERE country IN (Select country from countries WHERE country LIKE '%USA%')";
String string = "+g!+aa";
String string = "country";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ")
statement is: org.evosuite.testcase.statements.ArrayStatement@fa3d02be type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a4299599 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND "
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery(arg0, "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ", "Resource com.microsoft.util.transliteration.properties is corrupt.", "(Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND ", "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ");
String[] stringArray = new String[5];
stringArray[0] = "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ";
parameterBean.setFilterArray(stringArray);
parameterBean.setPrimaryArray(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
advSearchDAO.buildMutiQuery(makeQuery, "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ", "Resource com.microsoft.util.transliteration.properties is corrupt.", "(Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND ", "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ");
        String[] stringArray = new String[5];
        stringArray[0] = "2023-02-27";
        parameterBean.setFilterArray(stringArray);
        stringArray[1] = "2023-02-28";
        parameterBean.setPrimaryArray(stringArray);
        String makeQuery = advSearchDAO.makeQuery(parameterBean);
        advSearchDAO.buildMutiQuery(makeQuery, "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ", "Resource com.microsoft.util.transliteration.properties is corrupt.", "(Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND ", "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "2023-02-27", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"2023-02-27" Ct is: stringArray[0] = "2023-02-27"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@956e382f
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: stringArray[1] = "2023-02-28", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"2023-02-28" Ct is: stringArray[1] = "2023-02-28"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c909d77f
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: String makeQuery = advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: advSearchDAO.buildMutiQuery(makeQuery, "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ", "Resource com.microsoft.util.transliteration.properties is corrupt.", "(Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND ", "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery(makeQuery, "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ", "Resource com.microsoft.util.transliteration.properties is corrupt.", "(Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND ", "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
* this is vulnerable: String string = "2023-02-27"
* this is vulnerable: String string = "2023-02-28"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "2023-02-27";
((ParameterBean) string).setFilterArray(stringArray);
String string = "2023-02-28";
((ParameterBean) string).setPrimaryArray(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
String string = "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ";
String string = "Resource com.microsoft.util.transliteration.properties is corrupt.";
String string = "(Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND ";
String string = "(Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND ";
advSearchDAO.buildMutiQuery(makeQuery, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))", " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g")
statement is: setHidden(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setHidden(true)
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
parameterBean.setHidden(true);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
        parameterBean.setHidden(true);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.setHidden(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setHidden(true) target is: parameterBean method is: setHidden(boolean)
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setHidden(Z)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 2, type org.heal.module.search.AdvSearchDAOindex is: 4
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: String string = "`Qa<-:\"g";
ParameterBean parameterBean = new ParameterBean(string);
boolean _boolean = true;
((ParameterBean) string).setHidden(_boolean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _boolean).makeQuery(parameterBean);

statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all")
statement is: org.evosuite.testcase.statements.ArrayStatement@45eb17ab type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7bba335c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[1];
        stringArray[0] = "all";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        ParameterBean parameterBean = new ParameterBean("ABC");
        String[] stringArray = new String[2];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 2
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[3];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 3
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[4];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 4
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[5];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 5
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[6];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        stringArray[5] = "STU";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 6
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[7];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        stringArray[5] = "STU";
        stringArray[6] = "VWX";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 7
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[8];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        stringArray[5] = "STU";
        stringArray[6] = "VWX";
        stringArray[7] = "YZA";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 8
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[9];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        stringArray[5] = "STU";
        stringArray[6] = "VWX";
        stringArray[7] = "YZA";
        stringArray[8] = "BCD";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 9
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[10];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        stringArray[5] = "STU";
        stringArray[6] = "VWX";
        stringArray[7] = "YZA";
        stringArray[8] = "BCD";
        stringArray[9] = "CDE";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data 10
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[11];
        stringArray[0] = "ABC";
        stringArray[1] = "XYZ";
        stringArray[2] = "PQR";
        stringArray[3] = "LMN";
        stringArray[4] = "OPQ";
        stringArray[5] = "STU";
        stringArray[6] = "VWX";
        stringArray[7] = "YZA";
        stringArray[8] = "BCD";
        stringArray[9] = "CDE";
        stringArray[10] = "DEF";
        parameterBean.setFilterArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6df3b78
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 5
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
ParameterBean parameterBean = new ParameterBean("ABC"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cb55c45
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40deb115
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 8
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 13
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 2
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@23449d13
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@25d1444
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f6623ecc
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 16
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 22
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 3
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[4] Elements: []
lengths: [1] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ca65f407
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fc1b3d35
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e3269f08
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e8f475b3
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 25
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 32
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 4
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[5] Elements: []
lengths: [1] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3fc2688d
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e3e24a45
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3232b9ee
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@381c123f
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1495b526
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 35
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 43
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 5
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[6] Elements: []
lengths: [1] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3ae9810e
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@295c0f1f
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e5e60ce
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@379b7f1d
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f268c198
statement is: stringArray[5] = "STU", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"STU" Ct is: stringArray[5] = "STU"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2779b227
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 46
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 55
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 6
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[7] Elements: []
lengths: [1] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@17104fd2
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d3686e02
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@419300ab
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@42d28faf
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e32abf59
statement is: stringArray[5] = "STU", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"STU" Ct is: stringArray[5] = "STU"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d3ba57c6
statement is: stringArray[6] = "VWX", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"VWX" Ct is: stringArray[6] = "VWX"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1205aa3f
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 58
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 68
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 7
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[8] Elements: []
lengths: [1] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eda4418f
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e01bdfc1
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@567cedb
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ecb3c6b
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fbff7049
statement is: stringArray[5] = "STU", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"STU" Ct is: stringArray[5] = "STU"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1409d21
statement is: stringArray[6] = "VWX", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"VWX" Ct is: stringArray[6] = "VWX"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@31291c7e
statement is: stringArray[7] = "YZA", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"YZA" Ct is: stringArray[7] = "YZA"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3776654c
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 71
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 82
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 8
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[9] Elements: []
lengths: [1] [9]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3b7c8f81
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f4b50ee9
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@127027d0
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fd16ad38
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b111427
statement is: stringArray[5] = "STU", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"STU" Ct is: stringArray[5] = "STU"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a51608
statement is: stringArray[6] = "VWX", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"VWX" Ct is: stringArray[6] = "VWX"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e7a07159
statement is: stringArray[7] = "YZA", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"YZA" Ct is: stringArray[7] = "YZA"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40a085e3
statement is: stringArray[8] = "BCD", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[8] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"BCD" Ct is: stringArray[8] = "BCD"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed219175
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 85
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 97
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 9
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[10] Elements: []
lengths: [1] [10]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@422f0cc7
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cb4aa27e
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8977240
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@15388cfa
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@408e05f1
statement is: stringArray[5] = "STU", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"STU" Ct is: stringArray[5] = "STU"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d79c6e04
statement is: stringArray[6] = "VWX", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"VWX" Ct is: stringArray[6] = "VWX"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1bc427c5
statement is: stringArray[7] = "YZA", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"YZA" Ct is: stringArray[7] = "YZA"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1406210f
statement is: stringArray[8] = "BCD", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[8] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"BCD" Ct is: stringArray[8] = "BCD"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e97b36ab
statement is: stringArray[9] = "CDE", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[9] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"CDE" Ct is: stringArray[9] = "CDE"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@34287b5e
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 100
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 113
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data 10
ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[11], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [11] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[11] Elements: []
lengths: [1] [11]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d6e8eb8
statement is: stringArray[1] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[1] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1462edca
statement is: stringArray[2] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[2] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1cec7866
statement is: stringArray[3] = "LMN", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"LMN" Ct is: stringArray[3] = "LMN"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fbf2a260
statement is: stringArray[4] = "OPQ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OPQ" Ct is: stringArray[4] = "OPQ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@43f96962
statement is: stringArray[5] = "STU", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"STU" Ct is: stringArray[5] = "STU"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1e4364aa
statement is: stringArray[6] = "VWX", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"VWX" Ct is: stringArray[6] = "VWX"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@447056a9
statement is: stringArray[7] = "YZA", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"YZA" Ct is: stringArray[7] = "YZA"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f5a986cf
statement is: stringArray[8] = "BCD", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[8] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"BCD" Ct is: stringArray[8] = "BCD"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@29d1762a
statement is: stringArray[9] = "CDE", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[9] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"CDE" Ct is: stringArray[9] = "CDE"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e37027be
statement is: stringArray[10] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[10] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[10] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fa423a88
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 116
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 130
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "STU"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "STU"
* this is vulnerable: String string = "VWX"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "STU"
* this is vulnerable: String string = "VWX"
* this is vulnerable: String string = "YZA"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "STU"
* this is vulnerable: String string = "VWX"
* this is vulnerable: String string = "YZA"
* this is vulnerable: String string = "BCD"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "STU"
* this is vulnerable: String string = "VWX"
* this is vulnerable: String string = "YZA"
* this is vulnerable: String string = "BCD"
* this is vulnerable: String string = "CDE"
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "PQR"
* this is vulnerable: String string = "LMN"
* this is vulnerable: String string = "OPQ"
* this is vulnerable: String string = "STU"
* this is vulnerable: String string = "VWX"
* this is vulnerable: String string = "YZA"
* this is vulnerable: String string = "BCD"
* this is vulnerable: String string = "CDE"
* this is vulnerable: String string = "DEF"
TestCase is: String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "all";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "ABC";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
String string = "STU";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
String string = "STU";
String string = "VWX";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
String string = "STU";
String string = "VWX";
String string = "YZA";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
String string = "STU";
String string = "VWX";
String string = "YZA";
String string = "BCD";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
String string = "STU";
String string = "VWX";
String string = "YZA";
String string = "BCD";
String string = "CDE";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "ABC";
String string = "XYZ";
String string = "PQR";
String string = "LMN";
String string = "OPQ";
String string = "STU";
String string = "VWX";
String string = "YZA";
String string = "BCD";
String string = "CDE";
String string = "DEF";
((ParameterBean) string).setFilterArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);

statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all")
statement is: org.evosuite.testcase.statements.ArrayStatement@9e6dfb93 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@75e6c443 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[3];
parameterBean.setImaging(stringArray);
stringArray[0] = "all";
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean("ABC12345");
        String[] stringArray = new String[3];
        stringArray[0] = "XYZ67890";
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: ParameterBean parameterBean = new ParameterBean("ABC12345"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "XYZ67890", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ67890" Ct is: stringArray[0] = "XYZ67890"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8e96e2ab
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 4
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "XYZ67890"
TestCase is: String string = "ABC12345";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[3];
String string = "XYZ67890";
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g")
statement is: org.evosuite.testcase.statements.ArrayStatement@3e37112c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9adf65a1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "`Qa<-:\"g"
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
String[] stringArray = new String[5];
stringArray[0] = "`Qa<-:\"g";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
        String[] stringArray = new String[5];
        stringArray[0] = "https://www.example1.com";// replace with a more descriptive and representative URL

        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
        String[] stringArray = new String[5];
        stringArray[0] = "https://www.example2.com";// replace with a more descriptive and representative URL

        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
        String[] stringArray = new String[5];
        stringArray[0] = "https://www.example3.com";// replace with a more descriptive and representative URL

        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
        String[] stringArray = new String[5];
        stringArray[0] = "https://www.example4.com";// replace with a more descriptive and representative URL

        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g");
        String[] stringArray = new String[5];
        stringArray[0] = "https://www.example5.com";// replace with a more descriptive and representative URL

        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "https://www.example1.com"// replace with a more descriptive and representative URL
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example1.com" Ct is: stringArray[0] = "https://www.example1.com"// replace with a more descriptive and representative URL

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@22aab358
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "https://www.example2.com"// replace with a more descriptive and representative URL
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example2.com" Ct is: stringArray[0] = "https://www.example2.com"// replace with a more descriptive and representative URL

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@49c154a8
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 9
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 7
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "https://www.example3.com"// replace with a more descriptive and representative URL
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example3.com" Ct is: stringArray[0] = "https://www.example3.com"// replace with a more descriptive and representative URL

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7b84f40c
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 16
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 14
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "https://www.example4.com"// replace with a more descriptive and representative URL
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example4.com" Ct is: stringArray[0] = "https://www.example4.com"// replace with a more descriptive and representative URL

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@795c4d8c
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 23
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 21
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("`Qa<-:\"g"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "https://www.example5.com"// replace with a more descriptive and representative URL
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example5.com" Ct is: stringArray[0] = "https://www.example5.com"// replace with a more descriptive and representative URL

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7e6d18ba
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 30
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 28
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "https://www.example1.com"
* this is vulnerable: String string = "https://www.example2.com"
* this is vulnerable: String string = "https://www.example3.com"
* this is vulnerable: String string = "https://www.example4.com"
* this is vulnerable: String string = "https://www.example5.com"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "`Qa<-:\"g";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "https://www.example1.com";
((ParameterBean) string).setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "`Qa<-:\"g";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "https://www.example2.com";
((ParameterBean) string).setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "`Qa<-:\"g";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "https://www.example3.com";
((ParameterBean) string).setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "`Qa<-:\"g";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "https://www.example4.com";
((ParameterBean) string).setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "`Qa<-:\"g";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "https://www.example5.com";
((ParameterBean) string).setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all")
statement is: org.evosuite.testcase.statements.ArrayStatement@89834b0a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@60760bc0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setDisease([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setDisease(arg0)
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[4];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.makeQuery(parameterBean);

* Computation finished
